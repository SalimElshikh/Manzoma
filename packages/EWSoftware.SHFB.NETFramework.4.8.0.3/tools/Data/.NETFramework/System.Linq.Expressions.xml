<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="System.Core">
      <assemblydata version="4.0.0.0" culture="" key="00000000000000000400000000000000" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\EcmaPublicKey.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:System.Linq.Expressions">
      <topicdata group="api" />
      <apidata name="System.Linq.Expressions" group="namespace" />
      <elements>
        <element api="T:System.Linq.Expressions.BinaryExpression" />
        <element api="T:System.Linq.Expressions.Expression" />
        <element api="T:System.Linq.Expressions.BlockExpression" />
        <element api="T:System.Linq.Expressions.CatchBlock" />
        <element api="T:System.Linq.Expressions.ConditionalExpression" />
        <element api="T:System.Linq.Expressions.ConstantExpression" />
        <element api="T:System.Linq.Expressions.DebugInfoExpression" />
        <element api="T:System.Linq.Expressions.DefaultExpression" />
        <element api="T:System.Linq.Expressions.DynamicExpression" />
        <element api="T:System.Linq.Expressions.ElementInit" />
        <element api="T:System.Linq.Expressions.ExpressionType" />
        <element api="T:System.Linq.Expressions.ExpressionVisitor" />
        <element api="T:System.Linq.Expressions.DynamicExpressionVisitor" />
        <element api="T:System.Linq.Expressions.GotoExpressionKind" />
        <element api="T:System.Linq.Expressions.GotoExpression" />
        <element api="T:System.Linq.Expressions.IArgumentProvider" />
        <element api="T:System.Linq.Expressions.IDynamicExpression" />
        <element api="T:System.Linq.Expressions.IndexExpression" />
        <element api="T:System.Linq.Expressions.InvocationExpression" />
        <element api="T:System.Linq.Expressions.LabelExpression" />
        <element api="T:System.Linq.Expressions.LabelTarget" />
        <element api="T:System.Linq.Expressions.LambdaExpression" />
        <element api="T:System.Linq.Expressions.Expression`1" />
        <element api="T:System.Linq.Expressions.ListInitExpression" />
        <element api="T:System.Linq.Expressions.LoopExpression" />
        <element api="T:System.Linq.Expressions.MemberAssignment" />
        <element api="T:System.Linq.Expressions.MemberBindingType" />
        <element api="T:System.Linq.Expressions.MemberBinding" />
        <element api="T:System.Linq.Expressions.MemberExpression" />
        <element api="T:System.Linq.Expressions.MemberInitExpression" />
        <element api="T:System.Linq.Expressions.MemberListBinding" />
        <element api="T:System.Linq.Expressions.MemberMemberBinding" />
        <element api="T:System.Linq.Expressions.MethodCallExpression" />
        <element api="T:System.Linq.Expressions.NewArrayExpression" />
        <element api="T:System.Linq.Expressions.NewExpression" />
        <element api="T:System.Linq.Expressions.ParameterExpression" />
        <element api="T:System.Linq.Expressions.RuntimeVariablesExpression" />
        <element api="T:System.Linq.Expressions.SwitchCase" />
        <element api="T:System.Linq.Expressions.SwitchExpression" />
        <element api="T:System.Linq.Expressions.SymbolDocumentInfo" />
        <element api="T:System.Linq.Expressions.TryExpression" />
        <element api="T:System.Linq.Expressions.TypeBinaryExpression" />
        <element api="T:System.Linq.Expressions.UnaryExpression" />
      </elements>
    </api>
    <api id="T:System.Linq.Expressions.BinaryExpression">
      <topicdata group="api" />
      <apidata name="BinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.BinaryExpression.Reduce" />
        <element api="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Conversion" />
        <element api="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
        <element api="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Left" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Method" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Right" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.BinaryExpression">
      <topicdata name="BinaryExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.BinaryExpression" />
      <apidata name="BinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.BinaryExpression.Reduce" />
        <element api="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.BinaryExpression">
      <topicdata name="BinaryExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.BinaryExpression" />
      <apidata name="BinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Conversion" />
        <element api="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
        <element api="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Left" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Method" />
        <element api="P:System.Linq.Expressions.BinaryExpression.Right" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <topicdata group="api" />
      <apidata name="CanReduce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.CanReduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_CanReduce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <topicdata group="api" />
      <apidata name="Conversion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Conversion" />
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <topicdata group="api" />
      <apidata name="IsLifted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsLifted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <topicdata group="api" />
      <apidata name="IsLiftedToNull" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsLiftedToNull" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.Left">
      <topicdata group="api" />
      <apidata name="Left" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Left" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.Method">
      <topicdata group="api" />
      <apidata name="Method" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Method" />
      <returns>
        <type api="T:System.Reflection.MethodInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Reduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BinaryExpression.Right">
      <topicdata group="api" />
      <apidata name="Right" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Right" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.BlockExpression">
      <topicdata group="api" />
      <apidata name="BlockExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.BlockExpression.Expressions" />
        <element api="P:System.Linq.Expressions.BlockExpression.NodeType" />
        <element api="P:System.Linq.Expressions.BlockExpression.Result" />
        <element api="P:System.Linq.Expressions.BlockExpression.Type" />
        <element api="P:System.Linq.Expressions.BlockExpression.Variables" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.BlockExpression">
      <topicdata name="BlockExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.BlockExpression" />
      <apidata name="BlockExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.BlockExpression">
      <topicdata name="BlockExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.BlockExpression" />
      <apidata name="BlockExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.BlockExpression.Expressions" />
        <element api="P:System.Linq.Expressions.BlockExpression.NodeType" />
        <element api="P:System.Linq.Expressions.BlockExpression.Result" />
        <element api="P:System.Linq.Expressions.BlockExpression.Type" />
        <element api="P:System.Linq.Expressions.BlockExpression.Variables" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BlockExpression.Expressions">
      <topicdata group="api" />
      <apidata name="Expressions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expressions" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BlockExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BlockExpression.Result">
      <topicdata group="api" />
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Result" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BlockExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.BlockExpression.Variables">
      <topicdata group="api" />
      <apidata name="Variables" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Variables" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.CatchBlock">
      <topicdata group="api" />
      <apidata name="CatchBlock" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.CatchBlock.ToString" />
        <element api="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.CatchBlock.Body" />
        <element api="P:System.Linq.Expressions.CatchBlock.Filter" />
        <element api="P:System.Linq.Expressions.CatchBlock.Test" />
        <element api="P:System.Linq.Expressions.CatchBlock.Variable" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.CatchBlock">
      <topicdata name="CatchBlock" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.CatchBlock" />
      <apidata name="CatchBlock" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.CatchBlock.ToString" />
        <element api="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.CatchBlock">
      <topicdata name="CatchBlock" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.CatchBlock" />
      <apidata name="CatchBlock" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.CatchBlock.Body" />
        <element api="P:System.Linq.Expressions.CatchBlock.Filter" />
        <element api="P:System.Linq.Expressions.CatchBlock.Test" />
        <element api="P:System.Linq.Expressions.CatchBlock.Variable" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.CatchBlock.Body">
      <topicdata group="api" />
      <apidata name="Body" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Body" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.CatchBlock.Filter">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Filter" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.CatchBlock.Test">
      <topicdata group="api" />
      <apidata name="Test" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Test" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.CatchBlock.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variable">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.CatchBlock.Variable">
      <topicdata group="api" />
      <apidata name="Variable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Variable" />
      <returns>
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ConditionalExpression">
      <topicdata group="api" />
      <apidata name="ConditionalExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.Test" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ConditionalExpression">
      <topicdata name="ConditionalExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ConditionalExpression" />
      <apidata name="ConditionalExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.ConditionalExpression">
      <topicdata name="ConditionalExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.ConditionalExpression" />
      <apidata name="ConditionalExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.Test" />
        <element api="P:System.Linq.Expressions.ConditionalExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <topicdata group="api" />
      <apidata name="IfFalse" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IfFalse" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <topicdata group="api" />
      <apidata name="IfTrue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IfTrue" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConditionalExpression.Test">
      <topicdata group="api" />
      <apidata name="Test" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Test" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConditionalExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="test">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifTrue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifFalse">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ConstantExpression">
      <topicdata group="api" />
      <apidata name="ConstantExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.ConstantExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ConstantExpression.Type" />
        <element api="P:System.Linq.Expressions.ConstantExpression.Value" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ConstantExpression">
      <topicdata name="ConstantExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ConstantExpression" />
      <apidata name="ConstantExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.ConstantExpression">
      <topicdata name="ConstantExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.ConstantExpression" />
      <apidata name="ConstantExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.ConstantExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ConstantExpression.Type" />
        <element api="P:System.Linq.Expressions.ConstantExpression.Value" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConstantExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ConstantExpression.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.DebugInfoExpression">
      <topicdata group="api" />
      <apidata name="DebugInfoExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.Document" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.EndColumn" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.EndLine" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.IsClear" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.StartColumn" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.StartLine" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.DebugInfoExpression">
      <topicdata name="DebugInfoExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.DebugInfoExpression" />
      <apidata name="DebugInfoExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.DebugInfoExpression">
      <topicdata name="DebugInfoExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.DebugInfoExpression" />
      <apidata name="DebugInfoExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.DebugInfoExpression.Document" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.EndColumn" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.EndLine" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.IsClear" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.StartColumn" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.StartLine" />
        <element api="P:System.Linq.Expressions.DebugInfoExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <topicdata group="api" />
      <apidata name="Document" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Document" />
      <returns>
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <topicdata group="api" />
      <apidata name="EndColumn" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_EndColumn" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <topicdata group="api" />
      <apidata name="EndLine" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_EndLine" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <topicdata group="api" />
      <apidata name="IsClear" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsClear" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <topicdata group="api" />
      <apidata name="StartColumn" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_StartColumn" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <topicdata group="api" />
      <apidata name="StartLine" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_StartLine" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.DefaultExpression">
      <topicdata group="api" />
      <apidata name="DefaultExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.DefaultExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DefaultExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.DefaultExpression">
      <topicdata name="DefaultExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.DefaultExpression" />
      <apidata name="DefaultExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DefaultExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.DefaultExpression">
      <topicdata name="DefaultExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.DefaultExpression" />
      <apidata name="DefaultExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.DefaultExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DefaultExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DefaultExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DefaultExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.DynamicExpression">
      <topicdata group="api" />
      <apidata name="DynamicExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.DynamicExpression.Dynamic">
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic">
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite" />
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.DynamicExpression.Arguments" />
        <element api="P:System.Linq.Expressions.DynamicExpression.Binder" />
        <element api="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
        <element api="P:System.Linq.Expressions.DynamicExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.DynamicExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.DynamicExpression">
      <topicdata name="DynamicExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.DynamicExpression" />
      <apidata name="DynamicExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.DynamicExpression.Dynamic">
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic">
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite" />
        <element api="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.DynamicExpression">
      <topicdata name="DynamicExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.DynamicExpression" />
      <apidata name="DynamicExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.DynamicExpression.Arguments" />
        <element api="P:System.Linq.Expressions.DynamicExpression.Binder" />
        <element api="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
        <element api="P:System.Linq.Expressions.DynamicExpression.NodeType" />
        <element api="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.DynamicExpression.Type" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.DynamicExpression.Dynamic">
      <topicdata name="Dynamic" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic">
      <topicdata name="MakeDynamic" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.Binder">
      <topicdata group="api" />
      <apidata name="Binder" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Binder" />
      <returns>
        <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <topicdata group="api" />
      <apidata name="DelegateType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_DelegateType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
          <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.DynamicExpression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <topicdata group="api" eiiName="IDynamicExpression.CreateCallSite" />
      <apidata name="CreateCallSite" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
          <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <topicdata group="api" eiiName="IDynamicExpression.Rewrite" />
      <apidata name="Rewrite" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
          <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.DynamicExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <topicdata group="api" />
      <apidata name="DynamicExpressionVisitor" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor" />
        <element api="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
        <element api="Overload:System.Linq.Expressions.DynamicExpressionVisitor.Visit">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
        </element>
        <element api="Overload:System.Linq.Expressions.DynamicExpressionVisitor.VisitAndConvert">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.DynamicExpressionVisitor">
      <topicdata name="DynamicExpressionVisitor" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.DynamicExpressionVisitor" />
      <apidata name="DynamicExpressionVisitor" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
        <element api="Overload:System.Linq.Expressions.DynamicExpressionVisitor.Visit">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
        </element>
        <element api="Overload:System.Linq.Expressions.DynamicExpressionVisitor.VisitAndConvert">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpressionVisitor" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <topicdata group="api" />
      <apidata name="VisitDynamic" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.DynamicExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ElementInit">
      <topicdata group="api" />
      <apidata name="ElementInit" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.ElementInit.ToString" />
        <element api="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.ElementInit.AddMethod" />
        <element api="P:System.Linq.Expressions.ElementInit.Arguments" />
        <element api="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ElementInit">
      <topicdata name="ElementInit" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ElementInit" />
      <apidata name="ElementInit" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.ElementInit.ToString" />
        <element api="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.ElementInit">
      <topicdata name="ElementInit" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.ElementInit" />
      <apidata name="ElementInit" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.ElementInit.AddMethod" />
        <element api="P:System.Linq.Expressions.ElementInit.Arguments" />
        <element api="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ElementInit.AddMethod">
      <topicdata group="api" />
      <apidata name="AddMethod" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AddMethod" />
      <returns>
        <type api="T:System.Reflection.MethodInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ElementInit.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ElementInit.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
          <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
          <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
          <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
          <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
          <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
          <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
          <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
          <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
          <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
          <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
          <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
          <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
          <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
          <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
          <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
          <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
          <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
          <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
          <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
          <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="Overload:System.Linq.Expressions.Expression.#ctor">
          <element api="M:System.Linq.Expressions.Expression.#ctor" />
          <element api="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.Expression.Add">
          <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddAssign">
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddChecked">
          <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.And">
          <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AndAlso">
          <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AndAssign">
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ArrayAccess">
          <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ArrayIndex">
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Bind">
          <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Block">
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Break">
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Call">
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Catch">
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
        <element api="Overload:System.Linq.Expressions.Expression.Coalesce">
          <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Condition">
          <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Constant">
          <element api="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
          <element api="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Continue">
          <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Convert">
          <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ConvertChecked">
          <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="Overload:System.Linq.Expressions.Expression.Decrement">
          <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Default(System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.Divide">
          <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.DivideAssign">
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Dynamic">
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ElementInit">
          <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Empty" />
        <element api="Overload:System.Linq.Expressions.Expression.Equal">
          <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ExclusiveOr">
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign">
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Field">
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
        <element api="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
        <element api="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
        <element api="Overload:System.Linq.Expressions.Expression.Goto">
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.GreaterThan">
          <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.GreaterThanOrEqual">
          <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Increment">
          <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Invoke">
          <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.IsFalse">
          <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.IsTrue">
          <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Label">
          <element api="M:System.Linq.Expressions.Expression.Label" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Lambda">
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LeftShift">
          <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LeftShiftAssign">
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LessThan">
          <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LessThanOrEqual">
          <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ListBind">
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ListInit">
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Loop">
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MakeBinary">
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.MakeDynamic">
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
        <element api="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
        <element api="Overload:System.Linq.Expressions.Expression.MakeUnary">
          <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MemberBind">
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MemberInit">
          <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Modulo">
          <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ModuloAssign">
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Multiply">
          <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyAssign">
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyChecked">
          <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Negate">
          <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NegateChecked">
          <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.New">
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NewArrayBounds">
          <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NewArrayInit">
          <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Not">
          <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NotEqual">
          <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OnesComplement">
          <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Or">
          <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OrAssign">
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OrElse">
          <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Parameter">
          <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PostDecrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PostIncrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Power">
          <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PowerAssign">
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PreDecrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PreIncrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Property">
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
        <element api="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Rethrow">
          <element api="M:System.Linq.Expressions.Expression.Rethrow" />
          <element api="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Return">
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RightShift">
          <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RightShiftAssign">
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RuntimeVariables">
          <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Subtract">
          <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractAssign">
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractChecked">
          <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Switch">
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SwitchCase">
          <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SymbolDocument">
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Throw">
          <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
        <element api="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
        <element api="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
        <element api="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
        <element api="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.UnaryPlus">
          <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.Variable">
          <element api="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.Expression">
      <topicdata name="Expression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.Expression" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.Expression.Add">
          <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddAssign">
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AddChecked">
          <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.And">
          <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AndAlso">
          <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.AndAssign">
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ArrayAccess">
          <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ArrayIndex">
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Bind">
          <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Block">
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Break">
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Call">
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Catch">
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
        <element api="Overload:System.Linq.Expressions.Expression.Coalesce">
          <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Condition">
          <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Constant">
          <element api="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
          <element api="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Continue">
          <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Convert">
          <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ConvertChecked">
          <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="Overload:System.Linq.Expressions.Expression.Decrement">
          <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Default(System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.Divide">
          <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.DivideAssign">
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Dynamic">
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ElementInit">
          <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Empty" />
        <element api="Overload:System.Linq.Expressions.Expression.Equal">
          <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ExclusiveOr">
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign">
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Field">
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
        <element api="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
        <element api="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
        <element api="Overload:System.Linq.Expressions.Expression.Goto">
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.GreaterThan">
          <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.GreaterThanOrEqual">
          <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Increment">
          <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Invoke">
          <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.IsFalse">
          <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.IsTrue">
          <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Label">
          <element api="M:System.Linq.Expressions.Expression.Label" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Lambda">
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LeftShift">
          <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LeftShiftAssign">
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LessThan">
          <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.LessThanOrEqual">
          <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ListBind">
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ListInit">
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Loop">
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MakeBinary">
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.MakeDynamic">
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
        <element api="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
        <element api="Overload:System.Linq.Expressions.Expression.MakeUnary">
          <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MemberBind">
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MemberInit">
          <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
          <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Modulo">
          <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.ModuloAssign">
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Multiply">
          <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyAssign">
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.MultiplyChecked">
          <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Negate">
          <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NegateChecked">
          <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.New">
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
          <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NewArrayBounds">
          <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NewArrayInit">
          <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Not">
          <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.NotEqual">
          <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OnesComplement">
          <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Or">
          <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OrAssign">
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.OrElse">
          <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Parameter">
          <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PostDecrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PostIncrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Power">
          <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PowerAssign">
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PreDecrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.PreIncrementAssign">
          <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Property">
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
          <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
        <element api="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="Overload:System.Linq.Expressions.Expression.Rethrow">
          <element api="M:System.Linq.Expressions.Expression.Rethrow" />
          <element api="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Return">
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RightShift">
          <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RightShiftAssign">
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.RuntimeVariables">
          <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Subtract">
          <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractAssign">
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked">
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SubtractChecked">
          <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Switch">
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
          <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SwitchCase">
          <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.SymbolDocument">
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
          <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
        </element>
        <element api="Overload:System.Linq.Expressions.Expression.Throw">
          <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
        <element api="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
        <element api="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
        <element api="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
        <element api="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.UnaryPlus">
          <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
        <element api="Overload:System.Linq.Expressions.Expression.Variable">
          <element api="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
          <element api="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.Expression">
      <topicdata name="Expression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.Expression" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.#ctor" />
        <element api="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Add">
      <topicdata name="Add" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Add" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.AddAssign">
      <topicdata name="AddAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.AddAssignChecked">
      <topicdata name="AddAssignChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddAssignChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.AddChecked">
      <topicdata name="AddChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.And">
      <topicdata name="And" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="And" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.AndAlso">
      <topicdata name="AndAlso" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AndAlso" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.AndAssign">
      <topicdata name="AndAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AndAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ArrayAccess">
      <topicdata name="ArrayAccess" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ArrayAccess" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ArrayIndex">
      <topicdata name="ArrayIndex" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ArrayIndex" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Bind">
      <topicdata name="Bind" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Bind" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Block">
      <topicdata name="Block" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Block" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Break">
      <topicdata name="Break" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Break" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Call">
      <topicdata name="Call" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Call" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Catch">
      <topicdata name="Catch" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Catch" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Coalesce">
      <topicdata name="Coalesce" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Coalesce" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Condition">
      <topicdata name="Condition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Condition" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Constant">
      <topicdata name="Constant" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Constant" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
        <element api="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Continue">
      <topicdata name="Continue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Continue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Convert">
      <topicdata name="Convert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Convert" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ConvertChecked">
      <topicdata name="ConvertChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ConvertChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Divide">
      <topicdata name="Divide" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Divide" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.DivideAssign">
      <topicdata name="DivideAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="DivideAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Dynamic">
      <topicdata name="Dynamic" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ElementInit">
      <topicdata name="ElementInit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ElementInit" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Equal">
      <topicdata name="Equal" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equal" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ExclusiveOr">
      <topicdata name="ExclusiveOr" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ExclusiveOr" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign">
      <topicdata name="ExclusiveOrAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ExclusiveOrAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Field">
      <topicdata name="Field" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Field" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
        <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
        <element api="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Goto">
      <topicdata name="Goto" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Goto" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.GreaterThan">
      <topicdata name="GreaterThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThan" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.GreaterThanOrEqual">
      <topicdata name="GreaterThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Invoke">
      <topicdata name="Invoke" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Invoke" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.IsFalse">
      <topicdata name="IsFalse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="IsFalse" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.IsTrue">
      <topicdata name="IsTrue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="IsTrue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Label">
      <topicdata name="Label" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Label" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Label" />
        <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Label(System.String)" />
        <element api="M:System.Linq.Expressions.Expression.Label(System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Lambda">
      <topicdata name="Lambda" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.LeftShift">
      <topicdata name="LeftShift" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LeftShift" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.LeftShiftAssign">
      <topicdata name="LeftShiftAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LeftShiftAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.LessThan">
      <topicdata name="LessThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThan" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.LessThanOrEqual">
      <topicdata name="LessThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ListBind">
      <topicdata name="ListBind" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ListBind" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
        <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ListInit">
      <topicdata name="ListInit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Loop">
      <topicdata name="Loop" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Loop" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MakeBinary">
      <topicdata name="MakeBinary" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MakeBinary" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MakeDynamic">
      <topicdata name="MakeDynamic" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MakeUnary">
      <topicdata name="MakeUnary" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MakeUnary" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MemberBind">
      <topicdata name="MemberBind" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MemberBind" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
        <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MemberInit">
      <topicdata name="MemberInit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MemberInit" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Modulo">
      <topicdata name="Modulo" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Modulo" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.ModuloAssign">
      <topicdata name="ModuloAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ModuloAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Multiply">
      <topicdata name="Multiply" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Multiply" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MultiplyAssign">
      <topicdata name="MultiplyAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MultiplyAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked">
      <topicdata name="MultiplyAssignChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MultiplyAssignChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.MultiplyChecked">
      <topicdata name="MultiplyChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="MultiplyChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Negate">
      <topicdata name="Negate" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Negate" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.NegateChecked">
      <topicdata name="NegateChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="NegateChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.New">
      <topicdata name="New" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="New" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
        <element api="M:System.Linq.Expressions.Expression.New(System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
        <element api="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.NewArrayBounds">
      <topicdata name="NewArrayBounds" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="NewArrayBounds" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.NewArrayInit">
      <topicdata name="NewArrayInit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="NewArrayInit" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Not">
      <topicdata name="Not" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Not" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.NotEqual">
      <topicdata name="NotEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="NotEqual" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.OnesComplement">
      <topicdata name="OnesComplement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="OnesComplement" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Or">
      <topicdata name="Or" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Or" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.OrAssign">
      <topicdata name="OrAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="OrAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.OrElse">
      <topicdata name="OrElse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="OrElse" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Parameter">
      <topicdata name="Parameter" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Parameter" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.PostDecrementAssign">
      <topicdata name="PostDecrementAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="PostDecrementAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.PostIncrementAssign">
      <topicdata name="PostIncrementAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="PostIncrementAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Power">
      <topicdata name="Power" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Power" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.PowerAssign">
      <topicdata name="PowerAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="PowerAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.PreDecrementAssign">
      <topicdata name="PreDecrementAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="PreDecrementAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.PreIncrementAssign">
      <topicdata name="PreIncrementAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="PreIncrementAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Property">
      <topicdata name="Property" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Property" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
        <element api="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Rethrow">
      <topicdata name="Rethrow" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Rethrow" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Rethrow" />
        <element api="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Return">
      <topicdata name="Return" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Return" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.RightShift">
      <topicdata name="RightShift" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RightShift" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.RightShiftAssign">
      <topicdata name="RightShiftAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RightShiftAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.RuntimeVariables">
      <topicdata name="RuntimeVariables" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RuntimeVariables" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Subtract">
      <topicdata name="Subtract" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Subtract" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.SubtractAssign">
      <topicdata name="SubtractAssign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SubtractAssign" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked">
      <topicdata name="SubtractAssignChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SubtractAssignChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
        <element api="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.SubtractChecked">
      <topicdata name="SubtractChecked" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SubtractChecked" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Switch">
      <topicdata name="Switch" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Switch" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
        <element api="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.SwitchCase">
      <topicdata name="SwitchCase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SwitchCase" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.SymbolDocument">
      <topicdata name="SymbolDocument" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SymbolDocument" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
        <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
        <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
        <element api="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Throw">
      <topicdata name="Throw" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Throw" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.UnaryPlus">
      <topicdata name="UnaryPlus" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="UnaryPlus" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression.Variable">
      <topicdata name="Variable" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Variable" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
        <element api="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.Linq.Expressions.Expression.#ctor" />
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.Linq.Expressions.Expression.#ctor" />
      <parameters>
        <parameter name="nodeType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="AddAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="AddAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="AddAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="AddAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="AddAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="AddAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="AddChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="AddChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AddChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="And" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.And" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="And" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.And" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="AndAlso" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AndAlso" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="AndAlso" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AndAlso" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="AndAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AndAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="AndAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AndAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="AndAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.AndAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="ArrayAccess" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ArrayAccess" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexes">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="ArrayAccess" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ArrayAccess" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexes" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="ArrayIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ArrayIndex" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexes">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ArrayIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ArrayIndex" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="index">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="ArrayIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ArrayIndex" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexes" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ArrayLength" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="array">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Bind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Bind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Bind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Bind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="expressions" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg4">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expressions" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="expressions" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Block" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Block" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="expressions" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Break" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Break" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Break" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <topicdata group="api" />
      <apidata name="Break" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Break" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="typeArguments">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg4">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Call" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Call" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="typeArguments">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.Expression.CanReduce">
      <topicdata group="api" />
      <apidata name="CanReduce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_CanReduce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Catch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Catch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variable">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Catch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Catch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variable">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Catch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Catch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Catch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Catch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <topicdata group="api" />
      <apidata name="ClearDebugInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="document">
          <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Coalesce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Coalesce" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="Coalesce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Coalesce" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Condition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Condition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="test">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifTrue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifFalse">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Condition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Condition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="test">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifTrue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifFalse">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <topicdata group="api" />
      <apidata name="Constant" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Constant" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <topicdata group="api" />
      <apidata name="Constant" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Constant" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Continue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Continue" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <topicdata group="api" />
      <apidata name="Continue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Continue" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Convert" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Convert" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="ConvertChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ConvertChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="ConvertChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ConvertChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="DebugInfo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="document">
          <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
        </parameter>
        <parameter name="startLine">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="startColumn">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="endLine">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="endColumn">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <topicdata group="api" />
      <apidata name="Default" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Divide" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Divide" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Divide" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Divide" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="DivideAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.DivideAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="DivideAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.DivideAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="DivideAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.DivideAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Dynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Dynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="returnType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="ElementInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ElementInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addMethod">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="ElementInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ElementInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addMethod">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Empty">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Equal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Equal" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Equal" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Equal" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ExclusiveOr" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ExclusiveOr" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="ExclusiveOr" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ExclusiveOr" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ExclusiveOrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="ExclusiveOrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="ExclusiveOrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ExclusiveOrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <topicdata group="api" />
      <apidata name="Field" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Field" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="field">
          <type api="T:System.Reflection.FieldInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <topicdata group="api" />
      <apidata name="Field" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Field" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="Field" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Field" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <topicdata group="api" />
      <apidata name="GetActionType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="typeArgs" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <topicdata group="api" />
      <apidata name="GetDelegateType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="typeArgs" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <topicdata group="api" />
      <apidata name="GetFuncType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="typeArgs" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Goto" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Goto" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Goto" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Goto" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Goto" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Goto" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <topicdata group="api" />
      <apidata name="Goto" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Goto" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="IfThen" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="test">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifTrue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="IfThenElse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="test">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifTrue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="ifFalse">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Invoke" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Invoke" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Invoke" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Invoke" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="IsFalse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.IsFalse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="IsFalse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.IsFalse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="IsTrue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.IsTrue" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="IsTrue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.IsTrue" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label(System.String)">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="Label" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Label" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="tailCall">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Lambda" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Lambda" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="LeftShift" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LeftShift" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="LeftShift" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LeftShift" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="LeftShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LeftShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="LeftShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LeftShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="LeftShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LeftShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <topicdata group="api" />
      <apidata name="ListBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <topicdata group="api" />
      <apidata name="ListBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <topicdata group="api" />
      <apidata name="ListBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <topicdata group="api" />
      <apidata name="ListBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="addMethod">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="ListInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ListInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="addMethod">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Loop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Loop" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Loop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Loop" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="break">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Loop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Loop" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="break">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="continue">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeBinary" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeBinary" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binaryType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="MakeBinary" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeBinary" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binaryType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="MakeBinary" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeBinary" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binaryType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeCatchBlock" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="variable">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arg0">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg1">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg2">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arg3">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="MakeDynamic" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeDynamic" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="delegateType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binder">
          <type api="T:System.Runtime.CompilerServices.CallSiteBinder" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="MakeGoto" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="kind">
          <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
        </parameter>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="MakeIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexer">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <topicdata group="api" />
      <apidata name="MakeMemberAccess" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <topicdata group="api" />
      <apidata name="MakeTry" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="finally">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="fault">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="handlers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="MakeUnary" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeUnary" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="unaryType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="operand">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="MakeUnary" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MakeUnary" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="unaryType">
          <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
        </parameter>
        <parameter name="operand">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <topicdata group="api" />
      <apidata name="MemberBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="bindings">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <topicdata group="api" />
      <apidata name="MemberBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="bindings" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <topicdata group="api" />
      <apidata name="MemberBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="bindings">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <topicdata group="api" />
      <apidata name="MemberBind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberBind" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="bindings" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <topicdata group="api" />
      <apidata name="MemberInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="bindings">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <topicdata group="api" />
      <apidata name="MemberInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MemberInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="bindings" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Modulo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Modulo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Modulo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Modulo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ModuloAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ModuloAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="ModuloAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ModuloAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="ModuloAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.ModuloAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Multiply" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Multiply" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Multiply" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Multiply" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MultiplyAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="MultiplyAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="MultiplyAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MultiplyAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="MultiplyAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="MultiplyAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="MultiplyChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="MultiplyChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.MultiplyChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Negate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Negate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Negate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Negate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="NegateChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NegateChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="NegateChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NegateChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="constructor">
          <type api="T:System.Reflection.ConstructorInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="constructor">
          <type api="T:System.Reflection.ConstructorInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="constructor">
          <type api="T:System.Reflection.ConstructorInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="members">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="constructor">
          <type api="T:System.Reflection.ConstructorInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="members" params="true">
          <arrayOf rank="1">
            <type api="T:System.Reflection.MemberInfo" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="constructor">
          <type api="T:System.Reflection.ConstructorInfo" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.New(System.Type)">
      <topicdata group="api" />
      <apidata name="New" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.New" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="NewArrayBounds" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NewArrayBounds" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="bounds">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="NewArrayBounds" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NewArrayBounds" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="bounds" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="NewArrayInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NewArrayInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="NewArrayInit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NewArrayInit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="initializers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.Expression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Not" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Not" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Not" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Not" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="NotEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NotEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="NotEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.NotEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="liftToNull">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="OnesComplement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OnesComplement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="OnesComplement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OnesComplement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Or" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Or" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Or" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Or" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="OrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="OrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="OrAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OrAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="OrElse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OrElse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="OrElse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.OrElse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <topicdata group="api" />
      <apidata name="Parameter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Parameter" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="Parameter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Parameter" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="PostDecrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PostDecrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="PostDecrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PostDecrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="PostIncrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PostIncrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="PostIncrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PostIncrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Power" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Power" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Power" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Power" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="PowerAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PowerAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="PowerAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PowerAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="PowerAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PowerAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="PreDecrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PreDecrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="PreDecrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PreDecrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="PreIncrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PreIncrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="PreIncrementAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.PreIncrementAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="propertyAccessor">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexer">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="indexer">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="arguments" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="Property" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Property" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="propertyName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <topicdata group="api" />
      <apidata name="PropertyOrField" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="propertyOrFieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Quote" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Reduce">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <topicdata group="api" />
      <apidata name="ReduceAndCheck" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <topicdata group="api" />
      <apidata name="ReduceExtensions" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ReferenceEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="ReferenceNotEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Rethrow">
      <topicdata group="api" />
      <apidata name="Rethrow" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Rethrow" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <topicdata group="api" />
      <apidata name="Rethrow" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Rethrow" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="Return" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Return" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Return" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Return" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Return" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Return" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <topicdata group="api" />
      <apidata name="Return" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Return" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="RightShift" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RightShift" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="RightShift" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RightShift" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="RightShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RightShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="RightShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RightShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="RightShiftAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RightShiftAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="RuntimeVariables" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RuntimeVariables" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <topicdata group="api" />
      <apidata name="RuntimeVariables" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.RuntimeVariables" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Subtract" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Subtract" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="Subtract" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Subtract" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="SubtractAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="SubtractAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="SubtractAssign" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="SubtractAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="SubtractAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <topicdata group="api" />
      <apidata name="SubtractAssignChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractAssignChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="conversion">
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="SubtractChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="SubtractChecked" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SubtractChecked" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="right">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="cases" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="comparison">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="cases">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="comparison">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="cases" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="cases" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="comparison">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="cases">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <topicdata group="api" />
      <apidata name="Switch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Switch" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="comparison">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
        <parameter name="cases" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="SwitchCase" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SwitchCase" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="testValues">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="SwitchCase" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SwitchCase" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="testValues" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <topicdata group="api" />
      <apidata name="SymbolDocument" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SymbolDocument" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <topicdata group="api" />
      <apidata name="SymbolDocument" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SymbolDocument" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="language">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <topicdata group="api" />
      <apidata name="SymbolDocument" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SymbolDocument" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="language">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="languageVendor">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <topicdata group="api" />
      <apidata name="SymbolDocument" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.SymbolDocument" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="language">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="languageVendor">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="documentType">
          <type api="T:System.Guid" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Throw" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Throw" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Throw" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Throw" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <topicdata group="api" />
      <apidata name="TryCatch" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="handlers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <topicdata group="api" />
      <apidata name="TryCatchFinally" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="finally">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="handlers" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="TryFault" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="fault">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="TryFinally" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="finally">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <topicdata group="api" />
      <apidata name="TryGetActionType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="typeArgs">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="actionType" out="true">
          <referenceTo>
            <type api="T:System.Type" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <topicdata group="api" />
      <apidata name="TryGetFuncType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="typeArgs">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="funcType" out="true">
          <referenceTo>
            <type api="T:System.Type" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.Expression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="TypeAs" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="TypeEqual" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="TypeIs" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="UnaryPlus" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.UnaryPlus" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="UnaryPlus" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.UnaryPlus" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <topicdata group="api" />
      <apidata name="Unbox" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <topicdata group="api" />
      <apidata name="Variable" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Variable" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="Variable" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.Expression.Variable" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="VisitChildren" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.Expression`1">
      <topicdata group="api" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TDelegate" />
      </templates>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="Overload:System.Linq.Expressions.Expression`1.Compile">
          <element api="M:System.Linq.Expressions.Expression`1.Compile" />
          <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
          <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="Overload:System.Linq.Expressions.Expression`1.CompileToMethod">
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Body" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Name" />
        <element api="P:System.Linq.Expressions.LambdaExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Parameters" />
        <element api="P:System.Linq.Expressions.LambdaExpression.ReturnType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.TailCall" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.Expression`1">
      <topicdata name="Expression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.Expression`1" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="Overload:System.Linq.Expressions.Expression`1.Compile">
          <element api="M:System.Linq.Expressions.Expression`1.Compile" />
          <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
          <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="Overload:System.Linq.Expressions.Expression`1.CompileToMethod">
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.Expression`1">
      <topicdata name="Expression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.Expression`1" />
      <apidata name="Expression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TDelegate" />
      </templates>
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Body" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Name" />
        <element api="P:System.Linq.Expressions.LambdaExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Parameters" />
        <element api="P:System.Linq.Expressions.LambdaExpression.ReturnType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.TailCall" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.Expression`1.Compile">
      <topicdata name="Compile" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Compile" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression`1.Compile" />
        <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
        <element api="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression`1.Compile">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.Expression`1.Compile" />
      <proceduredata virtual="false" />
      <returns>
        <template name="TDelegate" index="0" api="T:System.Linq.Expressions.Expression`1" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.Expression`1.Compile" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="preferInterpretation">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TDelegate" index="0" api="T:System.Linq.Expressions.Expression`1" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.Expression`1.Compile" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="debugInfoGenerator">
          <type api="T:System.Runtime.CompilerServices.DebugInfoGenerator" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TDelegate" index="0" api="T:System.Linq.Expressions.Expression`1" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression`1" ref="true">
          <specialization>
            <template name="TDelegate" index="0" api="T:System.Linq.Expressions.Expression`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ExpressionType">
      <topicdata group="api" />
      <apidata name="ExpressionType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Linq.Expressions.ExpressionType.Add" />
        <element api="F:System.Linq.Expressions.ExpressionType.AddChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.And" />
        <element api="F:System.Linq.Expressions.ExpressionType.AndAlso" />
        <element api="F:System.Linq.Expressions.ExpressionType.ArrayLength" />
        <element api="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />
        <element api="F:System.Linq.Expressions.ExpressionType.Call" />
        <element api="F:System.Linq.Expressions.ExpressionType.Coalesce" />
        <element api="F:System.Linq.Expressions.ExpressionType.Conditional" />
        <element api="F:System.Linq.Expressions.ExpressionType.Constant" />
        <element api="F:System.Linq.Expressions.ExpressionType.Convert" />
        <element api="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.Divide" />
        <element api="F:System.Linq.Expressions.ExpressionType.Equal" />
        <element api="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />
        <element api="F:System.Linq.Expressions.ExpressionType.GreaterThan" />
        <element api="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />
        <element api="F:System.Linq.Expressions.ExpressionType.Invoke" />
        <element api="F:System.Linq.Expressions.ExpressionType.Lambda" />
        <element api="F:System.Linq.Expressions.ExpressionType.LeftShift" />
        <element api="F:System.Linq.Expressions.ExpressionType.LessThan" />
        <element api="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />
        <element api="F:System.Linq.Expressions.ExpressionType.ListInit" />
        <element api="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
        <element api="F:System.Linq.Expressions.ExpressionType.MemberInit" />
        <element api="F:System.Linq.Expressions.ExpressionType.Modulo" />
        <element api="F:System.Linq.Expressions.ExpressionType.Multiply" />
        <element api="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.Negate" />
        <element api="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />
        <element api="F:System.Linq.Expressions.ExpressionType.NegateChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.New" />
        <element api="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />
        <element api="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />
        <element api="F:System.Linq.Expressions.ExpressionType.Not" />
        <element api="F:System.Linq.Expressions.ExpressionType.NotEqual" />
        <element api="F:System.Linq.Expressions.ExpressionType.Or" />
        <element api="F:System.Linq.Expressions.ExpressionType.OrElse" />
        <element api="F:System.Linq.Expressions.ExpressionType.Parameter" />
        <element api="F:System.Linq.Expressions.ExpressionType.Power" />
        <element api="F:System.Linq.Expressions.ExpressionType.Quote" />
        <element api="F:System.Linq.Expressions.ExpressionType.RightShift" />
        <element api="F:System.Linq.Expressions.ExpressionType.Subtract" />
        <element api="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.TypeAs" />
        <element api="F:System.Linq.Expressions.ExpressionType.TypeIs" />
        <element api="F:System.Linq.Expressions.ExpressionType.Assign" />
        <element api="F:System.Linq.Expressions.ExpressionType.Block" />
        <element api="F:System.Linq.Expressions.ExpressionType.DebugInfo" />
        <element api="F:System.Linq.Expressions.ExpressionType.Decrement" />
        <element api="F:System.Linq.Expressions.ExpressionType.Dynamic" />
        <element api="F:System.Linq.Expressions.ExpressionType.Default" />
        <element api="F:System.Linq.Expressions.ExpressionType.Extension" />
        <element api="F:System.Linq.Expressions.ExpressionType.Goto" />
        <element api="F:System.Linq.Expressions.ExpressionType.Increment" />
        <element api="F:System.Linq.Expressions.ExpressionType.Index" />
        <element api="F:System.Linq.Expressions.ExpressionType.Label" />
        <element api="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />
        <element api="F:System.Linq.Expressions.ExpressionType.Loop" />
        <element api="F:System.Linq.Expressions.ExpressionType.Switch" />
        <element api="F:System.Linq.Expressions.ExpressionType.Throw" />
        <element api="F:System.Linq.Expressions.ExpressionType.Try" />
        <element api="F:System.Linq.Expressions.ExpressionType.Unbox" />
        <element api="F:System.Linq.Expressions.ExpressionType.AddAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.AndAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.DivideAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.OrAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.PowerAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />
        <element api="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign" />
        <element api="F:System.Linq.Expressions.ExpressionType.TypeEqual" />
        <element api="F:System.Linq.Expressions.ExpressionType.OnesComplement" />
        <element api="F:System.Linq.Expressions.ExpressionType.IsTrue" />
        <element api="F:System.Linq.Expressions.ExpressionType.IsFalse" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Add">
      <topicdata group="api" notopic="" />
      <apidata name="Add" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <topicdata group="api" notopic="" />
      <apidata name="AddAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>63</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <topicdata group="api" notopic="" />
      <apidata name="AddAssignChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>74</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <topicdata group="api" notopic="" />
      <apidata name="AddChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.And">
      <topicdata group="api" notopic="" />
      <apidata name="And" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <topicdata group="api" notopic="" />
      <apidata name="AndAlso" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <topicdata group="api" notopic="" />
      <apidata name="AndAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>64</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <topicdata group="api" notopic="" />
      <apidata name="ArrayIndex" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <topicdata group="api" notopic="" />
      <apidata name="ArrayLength" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Assign">
      <topicdata group="api" notopic="" />
      <apidata name="Assign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>46</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Block">
      <topicdata group="api" notopic="" />
      <apidata name="Block" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>47</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Call">
      <topicdata group="api" notopic="" />
      <apidata name="Call" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <topicdata group="api" notopic="" />
      <apidata name="Coalesce" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>7</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Conditional">
      <topicdata group="api" notopic="" />
      <apidata name="Conditional" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Constant">
      <topicdata group="api" notopic="" />
      <apidata name="Constant" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>9</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Convert">
      <topicdata group="api" notopic="" />
      <apidata name="Convert" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>10</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <topicdata group="api" notopic="" />
      <apidata name="ConvertChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>11</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <topicdata group="api" notopic="" />
      <apidata name="DebugInfo" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>48</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Decrement">
      <topicdata group="api" notopic="" />
      <apidata name="Decrement" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>49</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>51</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Divide">
      <topicdata group="api" notopic="" />
      <apidata name="Divide" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>12</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <topicdata group="api" notopic="" />
      <apidata name="DivideAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>65</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <topicdata group="api" notopic="" />
      <apidata name="Dynamic" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>50</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Equal">
      <topicdata group="api" notopic="" />
      <apidata name="Equal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>13</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <topicdata group="api" notopic="" />
      <apidata name="ExclusiveOr" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>14</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <topicdata group="api" notopic="" />
      <apidata name="ExclusiveOrAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>66</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Extension">
      <topicdata group="api" notopic="" />
      <apidata name="Extension" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>52</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Goto">
      <topicdata group="api" notopic="" />
      <apidata name="Goto" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>53</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <topicdata group="api" notopic="" />
      <apidata name="GreaterThan" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>15</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <topicdata group="api" notopic="" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>16</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Increment">
      <topicdata group="api" notopic="" />
      <apidata name="Increment" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>54</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Index">
      <topicdata group="api" notopic="" />
      <apidata name="Index" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>55</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Invoke">
      <topicdata group="api" notopic="" />
      <apidata name="Invoke" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>17</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <topicdata group="api" notopic="" />
      <apidata name="IsFalse" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>84</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <topicdata group="api" notopic="" />
      <apidata name="IsTrue" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>83</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Label">
      <topicdata group="api" notopic="" />
      <apidata name="Label" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>56</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Lambda">
      <topicdata group="api" notopic="" />
      <apidata name="Lambda" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>18</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <topicdata group="api" notopic="" />
      <apidata name="LeftShift" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>19</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <topicdata group="api" notopic="" />
      <apidata name="LeftShiftAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>67</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.LessThan">
      <topicdata group="api" notopic="" />
      <apidata name="LessThan" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>20</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <topicdata group="api" notopic="" />
      <apidata name="LessThanOrEqual" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>21</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ListInit">
      <topicdata group="api" notopic="" />
      <apidata name="ListInit" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>22</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Loop">
      <topicdata group="api" notopic="" />
      <apidata name="Loop" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>58</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <topicdata group="api" notopic="" />
      <apidata name="MemberAccess" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>23</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <topicdata group="api" notopic="" />
      <apidata name="MemberInit" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>24</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Modulo">
      <topicdata group="api" notopic="" />
      <apidata name="Modulo" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>25</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <topicdata group="api" notopic="" />
      <apidata name="ModuloAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>68</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Multiply">
      <topicdata group="api" notopic="" />
      <apidata name="Multiply" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>26</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <topicdata group="api" notopic="" />
      <apidata name="MultiplyAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>69</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <topicdata group="api" notopic="" />
      <apidata name="MultiplyAssignChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>75</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <topicdata group="api" notopic="" />
      <apidata name="MultiplyChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>27</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Negate">
      <topicdata group="api" notopic="" />
      <apidata name="Negate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>28</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <topicdata group="api" notopic="" />
      <apidata name="NegateChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>30</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.New">
      <topicdata group="api" notopic="" />
      <apidata name="New" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>31</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <topicdata group="api" notopic="" />
      <apidata name="NewArrayBounds" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>33</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <topicdata group="api" notopic="" />
      <apidata name="NewArrayInit" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>32</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Not">
      <topicdata group="api" notopic="" />
      <apidata name="Not" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>34</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <topicdata group="api" notopic="" />
      <apidata name="NotEqual" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>35</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <topicdata group="api" notopic="" />
      <apidata name="OnesComplement" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>82</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Or">
      <topicdata group="api" notopic="" />
      <apidata name="Or" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>36</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <topicdata group="api" notopic="" />
      <apidata name="OrAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>70</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.OrElse">
      <topicdata group="api" notopic="" />
      <apidata name="OrElse" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>37</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Parameter">
      <topicdata group="api" notopic="" />
      <apidata name="Parameter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>38</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <topicdata group="api" notopic="" />
      <apidata name="PostDecrementAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>80</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <topicdata group="api" notopic="" />
      <apidata name="PostIncrementAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>79</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Power">
      <topicdata group="api" notopic="" />
      <apidata name="Power" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>39</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <topicdata group="api" notopic="" />
      <apidata name="PowerAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>71</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <topicdata group="api" notopic="" />
      <apidata name="PreDecrementAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>78</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <topicdata group="api" notopic="" />
      <apidata name="PreIncrementAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>77</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Quote">
      <topicdata group="api" notopic="" />
      <apidata name="Quote" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>40</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.RightShift">
      <topicdata group="api" notopic="" />
      <apidata name="RightShift" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>41</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <topicdata group="api" notopic="" />
      <apidata name="RightShiftAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>72</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <topicdata group="api" notopic="" />
      <apidata name="RuntimeVariables" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>57</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Subtract">
      <topicdata group="api" notopic="" />
      <apidata name="Subtract" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>42</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <topicdata group="api" notopic="" />
      <apidata name="SubtractAssign" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>73</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <topicdata group="api" notopic="" />
      <apidata name="SubtractAssignChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>76</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <topicdata group="api" notopic="" />
      <apidata name="SubtractChecked" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>43</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Switch">
      <topicdata group="api" notopic="" />
      <apidata name="Switch" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>59</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Throw">
      <topicdata group="api" notopic="" />
      <apidata name="Throw" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>60</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Try">
      <topicdata group="api" notopic="" />
      <apidata name="Try" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>61</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <topicdata group="api" notopic="" />
      <apidata name="TypeAs" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>44</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <topicdata group="api" notopic="" />
      <apidata name="TypeEqual" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>81</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <topicdata group="api" notopic="" />
      <apidata name="TypeIs" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>45</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <topicdata group="api" notopic="" />
      <apidata name="UnaryPlus" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>29</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.ExpressionType.Unbox">
      <topicdata group="api" notopic="" />
      <apidata name="Unbox" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <value>62</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ExpressionVisitor">
      <topicdata group="api" />
      <apidata name="ExpressionVisitor" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Linq.Expressions.DynamicExpressionVisitor" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.#ctor" />
        <element api="Overload:System.Linq.Expressions.ExpressionVisitor.Visit">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
        </element>
        <element api="Overload:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ExpressionVisitor">
      <topicdata name="ExpressionVisitor" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ExpressionVisitor" />
      <apidata name="ExpressionVisitor" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="Overload:System.Linq.Expressions.ExpressionVisitor.Visit">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
        </element>
        <element api="Overload:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert">
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
          <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
        </element>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.ExpressionVisitor.Visit">
      <topicdata name="Visit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Visit" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert">
      <topicdata name="VisitAndConvert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="VisitAndConvert" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
        <element api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Visit" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.ExpressionVisitor.Visit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="nodes">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <topicdata group="api" />
      <apidata name="Visit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Linq.Expressions.ExpressionVisitor.Visit" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="nodes">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="elementVisitor">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
              <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Visit" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.ExpressionVisitor.Visit" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <topicdata group="api" />
      <apidata name="VisitAndConvert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="nodes">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="callerName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <topicdata group="api" />
      <apidata name="VisitAndConvert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="node">
          <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
        </parameter>
        <parameter name="callerName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <topicdata group="api" />
      <apidata name="VisitBinary" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.BinaryExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <topicdata group="api" />
      <apidata name="VisitBlock" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.BlockExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <topicdata group="api" />
      <apidata name="VisitCatchBlock" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <topicdata group="api" />
      <apidata name="VisitConditional" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.ConditionalExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <topicdata group="api" />
      <apidata name="VisitConstant" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.ConstantExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <topicdata group="api" />
      <apidata name="VisitDebugInfo" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.DebugInfoExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <topicdata group="api" />
      <apidata name="VisitDefault" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.DefaultExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <topicdata group="api" />
      <apidata name="VisitDynamic" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <topicdata group="api" />
      <apidata name="VisitElementInit" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="VisitExtension" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <topicdata group="api" />
      <apidata name="VisitGoto" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <topicdata group="api" />
      <apidata name="VisitIndex" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <topicdata group="api" />
      <apidata name="VisitInvocation" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <topicdata group="api" />
      <apidata name="VisitLabel" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <topicdata group="api" />
      <apidata name="VisitLabelTarget" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <topicdata group="api" />
      <apidata name="VisitLambda" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <topicdata group="api" />
      <apidata name="VisitListInit" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <topicdata group="api" />
      <apidata name="VisitLoop" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <topicdata group="api" />
      <apidata name="VisitMember" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <topicdata group="api" />
      <apidata name="VisitMemberAssignment" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <topicdata group="api" />
      <apidata name="VisitMemberBinding" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <topicdata group="api" />
      <apidata name="VisitMemberInit" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <topicdata group="api" />
      <apidata name="VisitMemberListBinding" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <topicdata group="api" />
      <apidata name="VisitMemberMemberBinding" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <topicdata group="api" />
      <apidata name="VisitMethodCall" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <topicdata group="api" />
      <apidata name="VisitNew" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <topicdata group="api" />
      <apidata name="VisitNewArray" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <topicdata group="api" />
      <apidata name="VisitParameter" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <topicdata group="api" />
      <apidata name="VisitRuntimeVariables" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <topicdata group="api" />
      <apidata name="VisitSwitch" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <topicdata group="api" />
      <apidata name="VisitSwitchCase" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <topicdata group="api" />
      <apidata name="VisitTry" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <topicdata group="api" />
      <apidata name="VisitTypeBinary" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <topicdata group="api" />
      <apidata name="VisitUnary" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="node">
          <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.GotoExpression">
      <topicdata group="api" />
      <apidata name="GotoExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.GotoExpression.Kind" />
        <element api="P:System.Linq.Expressions.GotoExpression.NodeType" />
        <element api="P:System.Linq.Expressions.GotoExpression.Target" />
        <element api="P:System.Linq.Expressions.GotoExpression.Type" />
        <element api="P:System.Linq.Expressions.GotoExpression.Value" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.GotoExpression">
      <topicdata name="GotoExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.GotoExpression" />
      <apidata name="GotoExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.GotoExpression">
      <topicdata name="GotoExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.GotoExpression" />
      <apidata name="GotoExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.GotoExpression.Kind" />
        <element api="P:System.Linq.Expressions.GotoExpression.NodeType" />
        <element api="P:System.Linq.Expressions.GotoExpression.Target" />
        <element api="P:System.Linq.Expressions.GotoExpression.Type" />
        <element api="P:System.Linq.Expressions.GotoExpression.Value" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.GotoExpression.Kind">
      <topicdata group="api" />
      <apidata name="Kind" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Kind" />
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.GotoExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.GotoExpression.Target">
      <topicdata group="api" />
      <apidata name="Target" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Target" />
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.GotoExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.GotoExpression.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.GotoExpressionKind">
      <topicdata group="api" />
      <apidata name="GotoExpressionKind" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Linq.Expressions.GotoExpressionKind.Goto" />
        <element api="F:System.Linq.Expressions.GotoExpressionKind.Return" />
        <element api="F:System.Linq.Expressions.GotoExpressionKind.Break" />
        <element api="F:System.Linq.Expressions.GotoExpressionKind.Continue" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <topicdata group="api" notopic="" />
      <apidata name="Break" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <topicdata group="api" notopic="" />
      <apidata name="Continue" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <topicdata group="api" notopic="" />
      <apidata name="Goto" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <topicdata group="api" notopic="" />
      <apidata name="Return" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.GotoExpressionKind" ref="false" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.IArgumentProvider">
      <topicdata group="api" />
      <apidata name="IArgumentProvider" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
        <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </implementors>
      <elements>
        <element api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
        <element api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.IArgumentProvider">
      <topicdata name="IArgumentProvider" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.IArgumentProvider" />
      <apidata name="IArgumentProvider" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IArgumentProvider" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.IArgumentProvider">
      <topicdata name="IArgumentProvider" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.IArgumentProvider" />
      <apidata name="IArgumentProvider" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IArgumentProvider" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <topicdata group="api" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <topicdata group="api" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.IDynamicExpression">
      <topicdata group="api" />
      <apidata name="IDynamicExpression" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <implementors>
        <type api="T:System.Linq.Expressions.DynamicExpression" ref="true" />
      </implementors>
      <elements>
        <element api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite" />
        <element api="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])" />
        <element api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
        <element api="P:System.Linq.Expressions.IDynamicExpression.DelegateType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.IDynamicExpression">
      <topicdata name="IDynamicExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.IDynamicExpression" />
      <apidata name="IDynamicExpression" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite" />
        <element api="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.IDynamicExpression">
      <topicdata name="IDynamicExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.IDynamicExpression" />
      <apidata name="IDynamicExpression" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
        <element api="P:System.Linq.Expressions.IDynamicExpression.DelegateType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <topicdata group="api" />
      <apidata name="CreateCallSite" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <topicdata group="api" />
      <apidata name="DelegateType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_DelegateType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <topicdata group="api" />
      <apidata name="Rewrite" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IDynamicExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.IndexExpression">
      <topicdata group="api" />
      <apidata name="IndexExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.IndexExpression.Arguments" />
        <element api="P:System.Linq.Expressions.IndexExpression.Indexer" />
        <element api="P:System.Linq.Expressions.IndexExpression.NodeType" />
        <element api="P:System.Linq.Expressions.IndexExpression.Object" />
        <element api="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.IndexExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.IndexExpression">
      <topicdata name="IndexExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.IndexExpression" />
      <apidata name="IndexExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.IndexExpression">
      <topicdata name="IndexExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.IndexExpression" />
      <apidata name="IndexExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.IndexExpression.Arguments" />
        <element api="P:System.Linq.Expressions.IndexExpression.Indexer" />
        <element api="P:System.Linq.Expressions.IndexExpression.NodeType" />
        <element api="P:System.Linq.Expressions.IndexExpression.Object" />
        <element api="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.IndexExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.Indexer">
      <topicdata group="api" />
      <apidata name="Indexer" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Indexer" />
      <returns>
        <type api="T:System.Reflection.PropertyInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.Object">
      <topicdata group="api" />
      <apidata name="Object" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Object" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.IndexExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="object">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.IndexExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.InvocationExpression">
      <topicdata group="api" />
      <apidata name="InvocationExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Arguments" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Expression" />
        <element api="P:System.Linq.Expressions.InvocationExpression.NodeType" />
        <element api="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.InvocationExpression">
      <topicdata name="InvocationExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.InvocationExpression" />
      <apidata name="InvocationExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.InvocationExpression">
      <topicdata name="InvocationExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.InvocationExpression" />
      <apidata name="InvocationExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Arguments" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Expression" />
        <element api="P:System.Linq.Expressions.InvocationExpression.NodeType" />
        <element api="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.InvocationExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.InvocationExpression.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.InvocationExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.InvocationExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.LabelExpression">
      <topicdata group="api" />
      <apidata name="LabelExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LabelExpression.DefaultValue" />
        <element api="P:System.Linq.Expressions.LabelExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LabelExpression.Target" />
        <element api="P:System.Linq.Expressions.LabelExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.LabelExpression">
      <topicdata name="LabelExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.LabelExpression" />
      <apidata name="LabelExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.LabelExpression">
      <topicdata name="LabelExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.LabelExpression" />
      <apidata name="LabelExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LabelExpression.DefaultValue" />
        <element api="P:System.Linq.Expressions.LabelExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LabelExpression.Target" />
        <element api="P:System.Linq.Expressions.LabelExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <topicdata group="api" />
      <apidata name="DefaultValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultValue" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelExpression.Target">
      <topicdata group="api" />
      <apidata name="Target" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Target" />
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="target">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="defaultValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.LabelTarget">
      <topicdata group="api" />
      <apidata name="LabelTarget" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.LabelTarget.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.LabelTarget.Name" />
        <element api="P:System.Linq.Expressions.LabelTarget.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.LabelTarget">
      <topicdata name="LabelTarget" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.LabelTarget" />
      <apidata name="LabelTarget" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.LabelTarget.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelTarget" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.LabelTarget">
      <topicdata name="LabelTarget" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.LabelTarget" />
      <apidata name="LabelTarget" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.LabelTarget.Name" />
        <element api="P:System.Linq.Expressions.LabelTarget.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelTarget" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelTarget.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LabelTarget.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LabelTarget.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.LambdaExpression">
      <topicdata group="api" />
      <apidata name="LambdaExpression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Linq.Expressions.Expression`1" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.LambdaExpression.Compile">
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile" />
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="Overload:System.Linq.Expressions.LambdaExpression.CompileToMethod">
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Body" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Name" />
        <element api="P:System.Linq.Expressions.LambdaExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Parameters" />
        <element api="P:System.Linq.Expressions.LambdaExpression.ReturnType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.TailCall" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.LambdaExpression">
      <topicdata name="LambdaExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.LambdaExpression" />
      <apidata name="LambdaExpression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="Overload:System.Linq.Expressions.LambdaExpression.Compile">
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile" />
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="Overload:System.Linq.Expressions.LambdaExpression.CompileToMethod">
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
          <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.LambdaExpression">
      <topicdata name="LambdaExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.LambdaExpression" />
      <apidata name="LambdaExpression" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Body" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Name" />
        <element api="P:System.Linq.Expressions.LambdaExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Parameters" />
        <element api="P:System.Linq.Expressions.LambdaExpression.ReturnType" />
        <element api="P:System.Linq.Expressions.LambdaExpression.TailCall" />
        <element api="P:System.Linq.Expressions.LambdaExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.LambdaExpression.Compile">
      <topicdata name="Compile" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Compile" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.LambdaExpression.Compile" />
        <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)" />
        <element api="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Linq.Expressions.LambdaExpression.CompileToMethod">
      <topicdata name="CompileToMethod" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CompileToMethod" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)" />
        <element api="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.Body">
      <topicdata group="api" />
      <apidata name="Body" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Body" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LambdaExpression.Compile">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.LambdaExpression.Compile" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Delegate" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.LambdaExpression.Compile" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="preferInterpretation">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Delegate" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.LambdaExpression.Compile" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="debugInfoGenerator">
          <type api="T:System.Runtime.CompilerServices.DebugInfoGenerator" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Delegate" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <topicdata group="api" />
      <apidata name="CompileToMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.LambdaExpression.CompileToMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.Emit.MethodBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <topicdata group="api" />
      <apidata name="CompileToMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Linq.Expressions.LambdaExpression.CompileToMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.Emit.MethodBuilder" ref="true" />
        </parameter>
        <parameter name="debugInfoGenerator">
          <type api="T:System.Runtime.CompilerServices.DebugInfoGenerator" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <topicdata group="api" />
      <apidata name="Parameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Parameters" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <topicdata group="api" />
      <apidata name="ReturnType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReturnType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <topicdata group="api" />
      <apidata name="TailCall" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TailCall" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LambdaExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LambdaExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ListInitExpression">
      <topicdata group="api" />
      <apidata name="ListInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.ListInitExpression.Reduce" />
        <element api="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.ListInitExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.ListInitExpression.Initializers" />
        <element api="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
        <element api="P:System.Linq.Expressions.ListInitExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ListInitExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ListInitExpression">
      <topicdata name="ListInitExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ListInitExpression" />
      <apidata name="ListInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.ListInitExpression.Reduce" />
        <element api="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.ListInitExpression">
      <topicdata name="ListInitExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.ListInitExpression" />
      <apidata name="ListInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.ListInitExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.ListInitExpression.Initializers" />
        <element api="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
        <element api="P:System.Linq.Expressions.ListInitExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ListInitExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <topicdata group="api" />
      <apidata name="CanReduce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.CanReduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_CanReduce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <topicdata group="api" />
      <apidata name="Initializers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Initializers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <topicdata group="api" />
      <apidata name="NewExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NewExpression" />
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Reduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ListInitExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ListInitExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.LoopExpression">
      <topicdata group="api" />
      <apidata name="LoopExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LoopExpression.Body" />
        <element api="P:System.Linq.Expressions.LoopExpression.BreakLabel" />
        <element api="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />
        <element api="P:System.Linq.Expressions.LoopExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LoopExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.LoopExpression">
      <topicdata name="LoopExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.LoopExpression" />
      <apidata name="LoopExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.LoopExpression">
      <topicdata name="LoopExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.LoopExpression" />
      <apidata name="LoopExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.LoopExpression.Body" />
        <element api="P:System.Linq.Expressions.LoopExpression.BreakLabel" />
        <element api="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />
        <element api="P:System.Linq.Expressions.LoopExpression.NodeType" />
        <element api="P:System.Linq.Expressions.LoopExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LoopExpression.Body">
      <topicdata group="api" />
      <apidata name="Body" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Body" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <topicdata group="api" />
      <apidata name="BreakLabel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BreakLabel" />
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <topicdata group="api" />
      <apidata name="ContinueLabel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ContinueLabel" />
      <returns>
        <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LoopExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.LoopExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="breakLabel">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="continueLabel">
          <type api="T:System.Linq.Expressions.LabelTarget" ref="true" />
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.LoopExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberAssignment">
      <topicdata group="api" />
      <apidata name="MemberAssignment" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.MemberAssignment.Expression" />
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberAssignment">
      <topicdata name="MemberAssignment" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberAssignment" />
      <apidata name="MemberAssignment" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberAssignment" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberAssignment">
      <topicdata name="MemberAssignment" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberAssignment" />
      <apidata name="MemberAssignment" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.MemberAssignment.Expression" />
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberAssignment" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberAssignment.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberBinding">
      <topicdata group="api" />
      <apidata name="MemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Linq.Expressions.MemberAssignment" ref="true" />
          <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
          <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)" />
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberBinding">
      <topicdata name="MemberBinding" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberBinding" />
      <apidata name="MemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberBinding">
      <topicdata name="MemberBinding" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberBinding" />
      <apidata name="MemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
        </parameter>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Do not use this constructor. It will be removed in future releases.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.Linq.Expressions.MemberBinding.BindingType">
      <topicdata group="api" />
      <apidata name="BindingType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BindingType" />
      <returns>
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberBinding.Member">
      <topicdata group="api" />
      <apidata name="Member" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Member" />
      <returns>
        <type api="T:System.Reflection.MemberInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberBinding.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberBindingType">
      <topicdata group="api" />
      <apidata name="MemberBindingType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Linq.Expressions.MemberBindingType.Assignment" />
        <element api="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />
        <element api="F:System.Linq.Expressions.MemberBindingType.ListBinding" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <topicdata group="api" notopic="" />
      <apidata name="Assignment" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <topicdata group="api" notopic="" />
      <apidata name="ListBinding" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </containers>
    </api>
    <api id="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <topicdata group="api" notopic="" />
      <apidata name="MemberBinding" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberBindingType" ref="false" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberExpression">
      <topicdata group="api" />
      <apidata name="MemberExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
        <element api="P:System.Linq.Expressions.MemberExpression.Expression" />
        <element api="P:System.Linq.Expressions.MemberExpression.Member" />
        <element api="P:System.Linq.Expressions.MemberExpression.NodeType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberExpression">
      <topicdata name="MemberExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberExpression" />
      <apidata name="MemberExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberExpression">
      <topicdata name="MemberExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberExpression" />
      <apidata name="MemberExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.Type" />
        <element api="P:System.Linq.Expressions.MemberExpression.Expression" />
        <element api="P:System.Linq.Expressions.MemberExpression.Member" />
        <element api="P:System.Linq.Expressions.MemberExpression.NodeType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberExpression.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberExpression.Member">
      <topicdata group="api" />
      <apidata name="Member" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Member" />
      <returns>
        <type api="T:System.Reflection.MemberInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberInitExpression">
      <topicdata group="api" />
      <apidata name="MemberInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.MemberInitExpression.Reduce" />
        <element api="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.Bindings" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.NodeType" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberInitExpression">
      <topicdata name="MemberInitExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberInitExpression" />
      <apidata name="MemberInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.MemberInitExpression.Reduce" />
        <element api="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberInitExpression">
      <topicdata name="MemberInitExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberInitExpression" />
      <apidata name="MemberInitExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.MemberInitExpression.Bindings" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.NodeType" />
        <element api="P:System.Linq.Expressions.MemberInitExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <topicdata group="api" />
      <apidata name="Bindings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Bindings" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <topicdata group="api" />
      <apidata name="CanReduce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.CanReduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_CanReduce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <topicdata group="api" />
      <apidata name="NewExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NewExpression" />
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Reduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberInitExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newExpression">
          <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
        </parameter>
        <parameter name="bindings">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberInitExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberListBinding">
      <topicdata group="api" />
      <apidata name="MemberListBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
        <element api="P:System.Linq.Expressions.MemberListBinding.Initializers" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberListBinding">
      <topicdata name="MemberListBinding" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberListBinding" />
      <apidata name="MemberListBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberListBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberListBinding">
      <topicdata name="MemberListBinding" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberListBinding" />
      <apidata name="MemberListBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
        <element api="P:System.Linq.Expressions.MemberListBinding.Initializers" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberListBinding" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <topicdata group="api" />
      <apidata name="Initializers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Initializers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="initializers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ElementInit" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberListBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MemberMemberBinding">
      <topicdata group="api" />
      <apidata name="MemberMemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
        <element api="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MemberMemberBinding">
      <topicdata name="MemberMemberBinding" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MemberMemberBinding" />
      <apidata name="MemberMemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.MemberBinding.ToString" />
        <element api="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberMemberBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MemberMemberBinding">
      <topicdata name="MemberMemberBinding" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MemberMemberBinding" />
      <apidata name="MemberMemberBinding" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.MemberBinding.BindingType" />
        <element api="P:System.Linq.Expressions.MemberBinding.Member" />
        <element api="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberMemberBinding" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <topicdata group="api" />
      <apidata name="Bindings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Bindings" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="bindings">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.MemberBinding" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MemberMemberBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.MethodCallExpression">
      <topicdata group="api" />
      <apidata name="MethodCallExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Method" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.NodeType" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Object" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.MethodCallExpression">
      <topicdata name="MethodCallExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.MethodCallExpression" />
      <apidata name="MethodCallExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.MethodCallExpression">
      <topicdata name="MethodCallExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.MethodCallExpression" />
      <apidata name="MethodCallExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Method" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.NodeType" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Object" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.MethodCallExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.Method">
      <topicdata group="api" />
      <apidata name="Method" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Method" />
      <returns>
        <type api="T:System.Reflection.MethodInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.Object">
      <topicdata group="api" />
      <apidata name="Object" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Object" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.MethodCallExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="object">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.MethodCallExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.NewArrayExpression">
      <topicdata group="api" />
      <apidata name="NewArrayExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
        <element api="P:System.Linq.Expressions.NewArrayExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.NewArrayExpression">
      <topicdata name="NewArrayExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.NewArrayExpression" />
      <apidata name="NewArrayExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.NewArrayExpression">
      <topicdata name="NewArrayExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.NewArrayExpression" />
      <apidata name="NewArrayExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.Expression.NodeType" />
        <element api="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
        <element api="P:System.Linq.Expressions.NewArrayExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <topicdata group="api" />
      <apidata name="Expressions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expressions" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewArrayExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expressions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewArrayExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.NewExpression">
      <topicdata group="api" />
      <apidata name="NewExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.NewExpression.Arguments" />
        <element api="P:System.Linq.Expressions.NewExpression.Constructor" />
        <element api="P:System.Linq.Expressions.NewExpression.Members" />
        <element api="P:System.Linq.Expressions.NewExpression.NodeType" />
        <element api="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.NewExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.NewExpression">
      <topicdata name="NewExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.NewExpression" />
      <apidata name="NewExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)" />
        <element api="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.NewExpression">
      <topicdata name="NewExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.NewExpression" />
      <apidata name="NewExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.NewExpression.Arguments" />
        <element api="P:System.Linq.Expressions.NewExpression.Constructor" />
        <element api="P:System.Linq.Expressions.NewExpression.Members" />
        <element api="P:System.Linq.Expressions.NewExpression.NodeType" />
        <element api="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount" />
        <element api="P:System.Linq.Expressions.NewExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.Arguments">
      <topicdata group="api" />
      <apidata name="Arguments" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Arguments" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.Constructor">
      <topicdata group="api" />
      <apidata name="Constructor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Constructor" />
      <returns>
        <type api="T:System.Reflection.ConstructorInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.Members">
      <topicdata group="api" />
      <apidata name="Members" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Members" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Reflection.MemberInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <topicdata group="api" eiiName="IArgumentProvider.ArgumentCount" />
      <apidata name="ArgumentCount" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <topicdata group="api" eiiName="IArgumentProvider.GetArgument" />
      <apidata name="GetArgument" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <type api="T:System.Linq.Expressions.IArgumentProvider" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.NewExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="arguments">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.NewExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.ParameterExpression">
      <topicdata group="api" />
      <apidata name="ParameterExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.ParameterExpression.IsByRef" />
        <element api="P:System.Linq.Expressions.ParameterExpression.Name" />
        <element api="P:System.Linq.Expressions.ParameterExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ParameterExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.ParameterExpression">
      <topicdata name="ParameterExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.ParameterExpression" />
      <apidata name="ParameterExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.ParameterExpression">
      <topicdata name="ParameterExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.ParameterExpression" />
      <apidata name="ParameterExpression" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.ParameterExpression.IsByRef" />
        <element api="P:System.Linq.Expressions.ParameterExpression.Name" />
        <element api="P:System.Linq.Expressions.ParameterExpression.NodeType" />
        <element api="P:System.Linq.Expressions.ParameterExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <topicdata group="api" />
      <apidata name="Accept" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="visitor">
          <type api="T:System.Linq.Expressions.ExpressionVisitor" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <topicdata group="api" />
      <apidata name="IsByRef" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsByRef" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ParameterExpression.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.ParameterExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <topicdata group="api" />
      <apidata name="RuntimeVariablesExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.RuntimeVariablesExpression">
      <topicdata name="RuntimeVariablesExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.RuntimeVariablesExpression" />
      <apidata name="RuntimeVariablesExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.RuntimeVariablesExpression">
      <topicdata name="RuntimeVariablesExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.RuntimeVariablesExpression" />
      <apidata name="RuntimeVariablesExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />
        <element api="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <topicdata group="api" />
      <apidata name="Variables" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Variables" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.RuntimeVariablesExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.SwitchCase">
      <topicdata group="api" />
      <apidata name="SwitchCase" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.SwitchCase.ToString" />
        <element api="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.SwitchCase.Body" />
        <element api="P:System.Linq.Expressions.SwitchCase.TestValues" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.SwitchCase">
      <topicdata name="SwitchCase" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.SwitchCase" />
      <apidata name="SwitchCase" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.SwitchCase.ToString" />
        <element api="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.SwitchCase">
      <topicdata name="SwitchCase" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.SwitchCase" />
      <apidata name="SwitchCase" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.SwitchCase.Body" />
        <element api="P:System.Linq.Expressions.SwitchCase.TestValues" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchCase.Body">
      <topicdata group="api" />
      <apidata name="Body" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Body" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchCase.TestValues">
      <topicdata group="api" />
      <apidata name="TestValues" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TestValues" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.Expression" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.SwitchCase.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="testValues">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.SwitchExpression">
      <topicdata group="api" />
      <apidata name="SwitchExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Cases" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Comparison" />
        <element api="P:System.Linq.Expressions.SwitchExpression.DefaultBody" />
        <element api="P:System.Linq.Expressions.SwitchExpression.NodeType" />
        <element api="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.SwitchExpression">
      <topicdata name="SwitchExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.SwitchExpression" />
      <apidata name="SwitchExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.SwitchExpression">
      <topicdata name="SwitchExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.SwitchExpression" />
      <apidata name="SwitchExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Cases" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Comparison" />
        <element api="P:System.Linq.Expressions.SwitchExpression.DefaultBody" />
        <element api="P:System.Linq.Expressions.SwitchExpression.NodeType" />
        <element api="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />
        <element api="P:System.Linq.Expressions.SwitchExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.Cases">
      <topicdata group="api" />
      <apidata name="Cases" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Cases" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <topicdata group="api" />
      <apidata name="Comparison" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Comparison" />
      <returns>
        <type api="T:System.Reflection.MethodInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <topicdata group="api" />
      <apidata name="DefaultBody" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultBody" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <topicdata group="api" />
      <apidata name="SwitchValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SwitchValue" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SwitchExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="switchValue">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="cases">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.SwitchCase" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="defaultBody">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SwitchExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.SymbolDocumentInfo">
      <topicdata group="api" />
      <apidata name="SymbolDocumentInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.SymbolDocumentInfo">
      <topicdata name="SymbolDocumentInfo" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.SymbolDocumentInfo" />
      <apidata name="SymbolDocumentInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.SymbolDocumentInfo">
      <topicdata name="SymbolDocumentInfo" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.SymbolDocumentInfo" />
      <apidata name="SymbolDocumentInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
        <element api="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <topicdata group="api" />
      <apidata name="DocumentType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_DocumentType" />
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <topicdata group="api" />
      <apidata name="FileName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FileName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <topicdata group="api" />
      <apidata name="Language" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Language" />
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <topicdata group="api" />
      <apidata name="LanguageVendor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_LanguageVendor" />
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.SymbolDocumentInfo" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.TryExpression">
      <topicdata group="api" />
      <apidata name="TryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.TryExpression.Body" />
        <element api="P:System.Linq.Expressions.TryExpression.Fault" />
        <element api="P:System.Linq.Expressions.TryExpression.Finally" />
        <element api="P:System.Linq.Expressions.TryExpression.Handlers" />
        <element api="P:System.Linq.Expressions.TryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.TryExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.TryExpression">
      <topicdata name="TryExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.TryExpression" />
      <apidata name="TryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.TryExpression">
      <topicdata name="TryExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.TryExpression" />
      <apidata name="TryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.TryExpression.Body" />
        <element api="P:System.Linq.Expressions.TryExpression.Fault" />
        <element api="P:System.Linq.Expressions.TryExpression.Finally" />
        <element api="P:System.Linq.Expressions.TryExpression.Handlers" />
        <element api="P:System.Linq.Expressions.TryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.TryExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.Body">
      <topicdata group="api" />
      <apidata name="Body" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Body" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.Fault">
      <topicdata group="api" />
      <apidata name="Fault" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Fault" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.Finally">
      <topicdata group="api" />
      <apidata name="Finally" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Finally" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.Handlers">
      <topicdata group="api" />
      <apidata name="Handlers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Handlers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TryExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="body">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="handlers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Linq.Expressions.CatchBlock" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="finally">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
        <parameter name="fault">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TryExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.TypeBinaryExpression">
      <topicdata group="api" />
      <apidata name="TypeBinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.Type" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.TypeBinaryExpression">
      <topicdata name="TypeBinaryExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.TypeBinaryExpression" />
      <apidata name="TypeBinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.Reduce" />
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.TypeBinaryExpression">
      <topicdata name="TypeBinaryExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.TypeBinaryExpression" />
      <apidata name="TypeBinaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.Expression.CanReduce" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.Type" />
        <element api="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <topicdata group="api" />
      <apidata name="TypeOperand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TypeOperand" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.TypeBinaryExpression" ref="true" />
      </containers>
    </api>
    <api id="T:System.Linq.Expressions.UnaryExpression">
      <topicdata group="api" />
      <apidata name="UnaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.UnaryExpression.Reduce" />
        <element api="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="P:System.Linq.Expressions.UnaryExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.UnaryExpression.IsLifted" />
        <element api="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Method" />
        <element api="P:System.Linq.Expressions.UnaryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Operand" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:System.Linq.Expressions.UnaryExpression">
      <topicdata name="UnaryExpression" group="list" subgroup="Methods" typeTopicId="T:System.Linq.Expressions.UnaryExpression" />
      <apidata name="UnaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
        <element api="M:System.Linq.Expressions.Expression.ReduceExtensions" />
        <element api="M:System.Linq.Expressions.Expression.ToString" />
        <element api="M:System.Linq.Expressions.UnaryExpression.Reduce" />
        <element api="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" />
      </containers>
    </api>
    <api id="Properties.T:System.Linq.Expressions.UnaryExpression">
      <topicdata name="UnaryExpression" group="list" subgroup="Properties" typeTopicId="T:System.Linq.Expressions.UnaryExpression" />
      <apidata name="UnaryExpression" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Linq.Expressions.UnaryExpression.CanReduce" />
        <element api="P:System.Linq.Expressions.UnaryExpression.IsLifted" />
        <element api="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Method" />
        <element api="P:System.Linq.Expressions.UnaryExpression.NodeType" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Operand" />
        <element api="P:System.Linq.Expressions.UnaryExpression.Type" />
      </elements>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <topicdata group="api" />
      <apidata name="CanReduce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.CanReduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_CanReduce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <topicdata group="api" />
      <apidata name="IsLifted" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsLifted" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <topicdata group="api" />
      <apidata name="IsLiftedToNull" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsLiftedToNull" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.Method">
      <topicdata group="api" />
      <apidata name="Method" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Method" />
      <returns>
        <type api="T:System.Reflection.MethodInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <topicdata group="api" />
      <apidata name="NodeType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.NodeType">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_NodeType" />
      <returns>
        <type api="T:System.Linq.Expressions.ExpressionType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.Operand">
      <topicdata group="api" />
      <apidata name="Operand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Operand" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Linq.Expressions.Expression.Reduce">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="P:System.Linq.Expressions.UnaryExpression.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="P:System.Linq.Expressions.Expression.Type">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
    <api id="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="operand">
          <type api="T:System.Linq.Expressions.Expression" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Linq.Expressions" />
        <type api="T:System.Linq.Expressions.UnaryExpression" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>