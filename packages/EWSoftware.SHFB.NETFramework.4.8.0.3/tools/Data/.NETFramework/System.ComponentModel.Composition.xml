<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="System.ComponentModel.Composition">
      <assemblydata version="4.0.0.0" culture="" key="00000000000000000400000000000000" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\EcmaPublicKey.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:System.ComponentModel.Composition">
      <topicdata group="api" />
      <apidata name="System.ComponentModel.Composition" group="namespace" />
      <elements>
        <element api="T:System.ComponentModel.Composition.AttributedModelServices" />
        <element api="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" />
        <element api="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
        <element api="T:System.ComponentModel.Composition.CompositionError" />
        <element api="T:System.ComponentModel.Composition.InheritedExportAttribute" />
        <element api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
        <element api="T:System.ComponentModel.Composition.ImportManyAttribute" />
        <element api="T:System.ComponentModel.Composition.ExportFactory`1" />
        <element api="T:System.ComponentModel.Composition.ExportFactory`2" />
        <element api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
        <element api="T:System.ComponentModel.Composition.ImportingConstructorAttribute" />
        <element api="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification" />
        <element api="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" />
        <element api="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" />
        <element api="T:System.ComponentModel.Composition.PartMetadataAttribute" />
        <element api="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" />
        <element api="T:System.ComponentModel.Composition.ChangeRejectedException" />
        <element api="T:System.ComponentModel.Composition.CompositionException" />
        <element api="T:System.ComponentModel.Composition.CreationPolicy" />
        <element api="T:System.ComponentModel.Composition.ExportAttribute" />
        <element api="T:System.ComponentModel.Composition.ExportMetadataAttribute" />
        <element api="T:System.ComponentModel.Composition.ICompositionService" />
        <element api="T:System.ComponentModel.Composition.ImportAttribute" />
        <element api="T:System.ComponentModel.Composition.ImportSource" />
        <element api="T:System.ComponentModel.Composition.MetadataAttributeAttribute" />
      </elements>
    </api>
    <api id="T:System.ComponentModel.Composition.AttributedModelServices">
      <topicdata group="api" />
      <apidata name="AttributedModelServices" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object,System.Reflection.ReflectionContext)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.Exports">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.AttributedModelServices">
      <topicdata name="AttributedModelServices" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.AttributedModelServices" />
      <apidata name="AttributedModelServices" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object,System.Reflection.ReflectionContext)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.Exports">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})" />
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce">
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" />
          <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue">
      <topicdata name="AddExportedValue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddExportedValue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue">
      <topicdata name="ComposeExportedValue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ComposeExportedValue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart">
      <topicdata name="CreatePart" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreatePart" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Object)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object,System.Reflection.ReflectionContext)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition">
      <topicdata name="CreatePartDefinition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreatePartDefinition" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.Exports">
      <topicdata name="Exports" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Exports" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity">
      <topicdata name="GetTypeIdentity" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetTypeIdentity" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports">
      <topicdata name="Imports" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Imports" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce">
      <topicdata name="SatisfyImportsOnce" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" />
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <topicdata group="api" />
      <apidata name="AddExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="batch">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="exportedValue">
          <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <topicdata group="api" />
      <apidata name="AddExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="batch">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
        </parameter>
        <parameter name="exportedValue">
          <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <topicdata group="api" />
      <apidata name="AddPart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="batch">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
        </parameter>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <topicdata group="api" />
      <apidata name="ComposeExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="container">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="exportedValue">
          <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <topicdata group="api" />
      <apidata name="ComposeExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="container">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
        </parameter>
        <parameter name="exportedValue">
          <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <topicdata group="api" />
      <apidata name="ComposeParts" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="container">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
        </parameter>
        <parameter name="attributedParts" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Object)">
      <topicdata group="api" />
      <apidata name="CreatePart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="partDefinition">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <topicdata group="api" />
      <apidata name="CreatePart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name="CreatePart" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePart" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name="CreatePartDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <topicdata group="api" />
      <apidata name="CreatePartDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
        <parameter name="ensureIsDiscoverable">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <topicdata group="api" />
      <apidata name="Exports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Exports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)">
      <topicdata group="api" />
      <apidata name="Exports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Exports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <topicdata group="api" />
      <apidata name="GetContractName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <topicdata group="api" />
      <apidata name="GetMetadataView" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TMetadataView" />
      </templates>
      <parameters>
        <parameter name="metadata">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMetadataView" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <topicdata group="api" />
      <apidata name="GetTypeIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="method">
          <type api="T:System.Reflection.MethodInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <topicdata group="api" />
      <apidata name="GetTypeIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="importCardinality">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportCardinality" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.Imports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="importCardinality">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportCardinality" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="compositionService">
          <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        </parameter>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="compositionService">
          <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        </parameter>
        <parameter name="attributedPart">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute">
      <topicdata group="api" />
      <apidata name="CatalogReflectionContextAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.#ctor(System.Type)" />
        <element api="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.CreateReflectionContext" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Assembly" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.CatalogReflectionContextAttribute">
      <topicdata name="CatalogReflectionContextAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" />
      <apidata name="CatalogReflectionContextAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.CreateReflectionContext" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.CatalogReflectionContextAttribute">
      <topicdata name="CatalogReflectionContextAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" />
      <apidata name="CatalogReflectionContextAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="reflectionContextType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.CreateReflectionContext">
      <topicdata group="api" />
      <apidata name="CreateReflectionContext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Reflection.ReflectionContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ChangeRejectedException">
      <topicdata group="api" />
      <apidata name="ChangeRejectedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
          <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
          <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})" />
          <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.ChangeRejectedException.Message" />
        <element api="P:System.ComponentModel.Composition.CompositionException.Errors" />
        <element api="P:System.ComponentModel.Composition.CompositionException.RootCauses" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ChangeRejectedException">
      <topicdata name="ChangeRejectedException" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ChangeRejectedException" />
      <apidata name="ChangeRejectedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ChangeRejectedException">
      <topicdata name="ChangeRejectedException" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ChangeRejectedException" />
      <apidata name="ChangeRejectedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.ChangeRejectedException.Message" />
        <element api="P:System.ComponentModel.Composition.CompositionException.Errors" />
        <element api="P:System.ComponentModel.Composition.CompositionException.RootCauses" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.ChangeRejectedException">
      <topicdata name="ChangeRejectedException" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.ChangeRejectedException" />
      <apidata name="ChangeRejectedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
        <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})" />
        <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <parameters>
        <parameter name="errors">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ChangeRejectedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ComponentModel.Composition.CompositionException.Message">
          <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Runtime.InteropServices._Exception.Message">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <topicdata group="api" />
      <apidata name="CompositionContractMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
          <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
          <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <topicdata name="CompositionContractMismatchException" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      <apidata name="CompositionContractMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <topicdata name="CompositionContractMismatchException" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      <apidata name="CompositionContractMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <topicdata name="CompositionContractMismatchException" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      <apidata name="CompositionContractMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
        <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionContractMismatchException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.CompositionError">
      <topicdata group="api" />
      <apidata name="CompositionError" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="Overload:System.ComponentModel.Composition.CompositionError.#ctor">
          <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)" />
          <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)" />
        </element>
        <element api="M:System.ComponentModel.Composition.CompositionError.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.CompositionError.Description" />
        <element api="P:System.ComponentModel.Composition.CompositionError.Element" />
        <element api="P:System.ComponentModel.Composition.CompositionError.Exception" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.CompositionError">
      <topicdata name="CompositionError" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.CompositionError" />
      <apidata name="CompositionError" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.ComponentModel.Composition.CompositionError.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.CompositionError">
      <topicdata name="CompositionError" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.CompositionError" />
      <apidata name="CompositionError" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.ComponentModel.Composition.CompositionError.Description" />
        <element api="P:System.ComponentModel.Composition.CompositionError.Element" />
        <element api="P:System.ComponentModel.Composition.CompositionError.Exception" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.CompositionError.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)" />
        <element api="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionError.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionError.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="element">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionError.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="element">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionError.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionError.Description">
      <topicdata group="api" />
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionError.Element">
      <topicdata group="api" />
      <apidata name="Element" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Element" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionError.Exception">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Exception" />
      <returns>
        <type api="T:System.Exception" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionError.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.CompositionException">
      <topicdata group="api" />
      <apidata name="CompositionException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ComponentModel.Composition.ChangeRejectedException" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="Overload:System.ComponentModel.Composition.CompositionException.#ctor">
          <element api="M:System.ComponentModel.Composition.CompositionException.#ctor" />
          <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})" />
          <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.CompositionException.Errors" />
        <element api="P:System.ComponentModel.Composition.CompositionException.Message" />
        <element api="P:System.ComponentModel.Composition.CompositionException.RootCauses" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.CompositionException">
      <topicdata name="CompositionException" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.CompositionException" />
      <apidata name="CompositionException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.CompositionException">
      <topicdata name="CompositionException" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.CompositionException" />
      <apidata name="CompositionException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionException.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.CompositionException.Errors" />
        <element api="P:System.ComponentModel.Composition.CompositionException.Message" />
        <element api="P:System.ComponentModel.Composition.CompositionException.RootCauses" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.CompositionException">
      <topicdata name="CompositionException" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.CompositionException" />
      <apidata name="CompositionException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.CompositionException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.CompositionException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.CompositionException.#ctor" />
        <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})" />
        <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionException.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionException.#ctor" />
      <parameters>
        <parameter name="errors">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.CompositionException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionException.Errors">
      <topicdata group="api" />
      <apidata name="Errors" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Errors" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.CompositionError" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionException.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Exception.Message">
          <type api="T:System.Exception" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Runtime.InteropServices._Exception.Message">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.CompositionException.RootCauses">
      <topicdata group="api" />
      <apidata name="RootCauses" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RootCauses" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Exception" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CompositionException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.CreationPolicy">
      <topicdata group="api" />
      <apidata name="CreationPolicy" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ComponentModel.Composition.CreationPolicy.Any" />
        <element api="F:System.ComponentModel.Composition.CreationPolicy.Shared" />
        <element api="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <topicdata group="api" notopic="" />
      <apidata name="Any" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <topicdata group="api" notopic="" />
      <apidata name="NonShared" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <topicdata group="api" notopic="" />
      <apidata name="Shared" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ExportAttribute">
      <topicdata group="api" />
      <apidata name="ExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor">
          <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
          <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)" />
          <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)" />
        </element>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Method" />
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ExportAttribute">
      <topicdata name="ExportAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ExportAttribute" />
      <apidata name="ExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ExportAttribute">
      <topicdata name="ExportAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ExportAttribute" />
      <apidata name="ExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor" />
        <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)" />
        <element api="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <topicdata group="api" />
      <apidata name="ContractName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ContractName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <topicdata group="api" />
      <apidata name="ContractType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ContractType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ExportFactory`1">
      <topicdata group="api" />
      <apidata name="ExportFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ComponentModel.Composition.ExportFactory`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})" />
        <element api="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ExportFactory`1">
      <topicdata name="ExportFactory" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ExportFactory`1" />
      <apidata name="ExportFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`1" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="exportLifetimeContextCreator">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportFactory`1" />
                  <type api="T:System.Action" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport">
      <topicdata group="api" />
      <apidata name="CreateExport" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportFactory`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ExportFactory`2">
      <topicdata group="api" />
      <apidata name="ExportFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.ExportFactory`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportFactory`2" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
        <template name="TMetadata" />
      </templates>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
        <element api="M:System.ComponentModel.Composition.ExportFactory`2.#ctor(System.Func{System.Tuple{`0,System.Action}},`1)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.ExportFactory`2.Metadata" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ExportFactory`2">
      <topicdata name="ExportFactory" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ExportFactory`2" />
      <apidata name="ExportFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
        <template name="TMetadata" />
      </templates>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`2" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ExportFactory`2">
      <topicdata name="ExportFactory" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ExportFactory`2" />
      <apidata name="ExportFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
        <template name="TMetadata" />
      </templates>
      <elements>
        <element api="P:System.ComponentModel.Composition.ExportFactory`2.Metadata" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`2" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportFactory`2.#ctor(System.Func{System.Tuple{`0,System.Action}},`1)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="exportLifetimeContextCreator">
          <type api="T:System.Func`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportFactory`2" />
                  <type api="T:System.Action" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="metadata">
          <template name="TMetadata" index="1" api="T:System.ComponentModel.Composition.ExportFactory`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`2" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportFactory`2.Metadata">
      <topicdata group="api" />
      <apidata name="Metadata" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Metadata" />
      <returns>
        <template name="TMetadata" index="1" api="T:System.ComponentModel.Composition.ExportFactory`2" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportFactory`2" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ExportLifetimeContext`1">
      <topicdata group="api" />
      <apidata name="ExportLifetimeContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportLifetimeContext`1.#ctor(`0,System.Action)" />
        <element api="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ExportLifetimeContext`1">
      <topicdata name="ExportLifetimeContext" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
      <apidata name="ExportLifetimeContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ExportLifetimeContext`1">
      <topicdata name="ExportLifetimeContext" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
      <apidata name="ExportLifetimeContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportLifetimeContext`1.#ctor(`0,System.Action)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
        </parameter>
        <parameter name="disposeAction">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <template name="T" index="0" api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportLifetimeContext`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <topicdata group="api" />
      <apidata name="ExportMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Method" />
              <field name="Property" />
              <field name="Field" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <topicdata name="ExportMetadataAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ExportMetadataAttribute" />
      <apidata name="ExportMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <topicdata name="ExportMetadataAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ExportMetadataAttribute" />
      <apidata name="ExportMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" />
        <element api="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <topicdata group="api" />
      <apidata name="IsMultiple" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsMultiple" />
      <setter name="set_IsMultiple" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ExportMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ICompositionService">
      <topicdata group="api" />
      <apidata name="ICompositionService" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </implementors>
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ICompositionService">
      <topicdata name="ICompositionService" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ICompositionService" />
      <apidata name="ICompositionService" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ICompositionService" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ImportAttribute">
      <topicdata group="api" />
      <apidata name="ImportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor">
          <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor" />
          <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)" />
          <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)" />
        </element>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.ContractType" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.Source" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
              <field name="Parameter" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ImportAttribute">
      <topicdata name="ImportAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ImportAttribute" />
      <apidata name="ImportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ImportAttribute">
      <topicdata name="ImportAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ImportAttribute" />
      <apidata name="ImportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.ContractType" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy" />
        <element api="P:System.ComponentModel.Composition.ImportAttribute.Source" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor" />
        <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)" />
        <element api="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportAttribute.#ctor" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <topicdata group="api" />
      <apidata name="AllowDefault" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowDefault" />
      <setter name="set_AllowDefault" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <topicdata group="api" />
      <apidata name="AllowRecomposition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowRecomposition" />
      <setter name="set_AllowRecomposition" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <topicdata group="api" />
      <apidata name="ContractName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ContractName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <topicdata group="api" />
      <apidata name="ContractType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ContractType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <topicdata group="api" />
      <apidata name="RequiredCreationPolicy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_RequiredCreationPolicy" />
      <setter name="set_RequiredCreationPolicy" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportAttribute.Source">
      <topicdata group="api" />
      <apidata name="Source" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Source" />
      <setter name="set_Source" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <topicdata group="api" />
      <apidata name="ImportCardinalityMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
          <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
          <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <topicdata name="ImportCardinalityMismatchException" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      <apidata name="ImportCardinalityMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <topicdata name="ImportCardinalityMismatchException" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      <apidata name="ImportCardinalityMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <topicdata name="ImportCardinalityMismatchException" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      <apidata name="ImportCardinalityMismatchException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
        <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <topicdata group="api" />
      <apidata name="ImportingConstructorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Constructor" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <topicdata name="ImportingConstructorAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ImportingConstructorAttribute" />
      <apidata name="ImportingConstructorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportingConstructorAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <topicdata name="ImportingConstructorAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ImportingConstructorAttribute" />
      <apidata name="ImportingConstructorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportingConstructorAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportingConstructorAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ImportManyAttribute">
      <topicdata group="api" />
      <apidata name="ImportManyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
          <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
          <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)" />
          <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)" />
        </element>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.Source" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
              <field name="Parameter" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.ImportManyAttribute">
      <topicdata name="ImportManyAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.ImportManyAttribute" />
      <apidata name="ImportManyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.ImportManyAttribute">
      <topicdata name="ImportManyAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.ImportManyAttribute" />
      <apidata name="ImportManyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy" />
        <element api="P:System.ComponentModel.Composition.ImportManyAttribute.Source" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
        <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)" />
        <element api="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.ImportManyAttribute.#ctor" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <topicdata group="api" />
      <apidata name="AllowRecomposition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowRecomposition" />
      <setter name="set_AllowRecomposition" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <topicdata group="api" />
      <apidata name="ContractName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ContractName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <topicdata group="api" />
      <apidata name="ContractType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ContractType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <topicdata group="api" />
      <apidata name="RequiredCreationPolicy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_RequiredCreationPolicy" />
      <setter name="set_RequiredCreationPolicy" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.ImportManyAttribute.Source">
      <topicdata group="api" />
      <apidata name="Source" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Source" />
      <setter name="set_Source" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportManyAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.ImportSource">
      <topicdata group="api" />
      <apidata name="ImportSource" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ComponentModel.Composition.ImportSource.Any" />
        <element api="F:System.ComponentModel.Composition.ImportSource.Local" />
        <element api="F:System.ComponentModel.Composition.ImportSource.NonLocal" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.ImportSource.Any">
      <topicdata group="api" notopic="" />
      <apidata name="Any" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.ImportSource.Local">
      <topicdata group="api" notopic="" />
      <apidata name="Local" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.ImportSource.NonLocal">
      <topicdata group="api" notopic="" />
      <apidata name="NonLocal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.ImportSource" ref="false" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <topicdata group="api" />
      <apidata name="InheritedExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.ExportAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
          <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
          <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)" />
          <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)" />
        </element>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.InheritedExportAttribute">
      <topicdata name="InheritedExportAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.InheritedExportAttribute" />
      <apidata name="InheritedExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.InheritedExportAttribute">
      <topicdata name="InheritedExportAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.InheritedExportAttribute" />
      <apidata name="InheritedExportAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractName" />
        <element api="P:System.ComponentModel.Composition.ExportAttribute.ContractType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
        <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)" />
        <element api="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.InheritedExportAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <topicdata group="api" />
      <apidata name="IPartImportsSatisfiedNotification" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <topicdata name="IPartImportsSatisfiedNotification" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification" />
      <apidata name="IPartImportsSatisfiedNotification" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <topicdata group="api" />
      <apidata name="OnImportsSatisfied" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <topicdata group="api" />
      <apidata name="MetadataAttributeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <topicdata name="MetadataAttributeAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.MetadataAttributeAttribute" />
      <apidata name="MetadataAttributeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataAttributeAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <topicdata name="MetadataAttributeAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.MetadataAttributeAttribute" />
      <apidata name="MetadataAttributeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataAttributeAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataAttributeAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute">
      <topicdata group="api" />
      <apidata name="MetadataViewImplementationAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.MetadataViewImplementationAttribute.#ctor(System.Type)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.MetadataViewImplementationAttribute.ImplementationType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.MetadataViewImplementationAttribute">
      <topicdata name="MetadataViewImplementationAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" />
      <apidata name="MetadataViewImplementationAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.MetadataViewImplementationAttribute">
      <topicdata name="MetadataViewImplementationAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" />
      <apidata name="MetadataViewImplementationAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.MetadataViewImplementationAttribute.ImplementationType" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.MetadataViewImplementationAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="implementationType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.MetadataViewImplementationAttribute.ImplementationType">
      <topicdata group="api" />
      <apidata name="ImplementationType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ImplementationType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <topicdata group="api" />
      <apidata name="PartCreationPolicyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <topicdata name="PartCreationPolicyAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" />
      <apidata name="PartCreationPolicyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <topicdata name="PartCreationPolicyAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" />
      <apidata name="PartCreationPolicyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="creationPolicy">
          <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <topicdata group="api" />
      <apidata name="CreationPolicy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CreationPolicy" />
      <returns>
        <type api="T:System.ComponentModel.Composition.CreationPolicy" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.PartMetadataAttribute">
      <topicdata group="api" />
      <apidata name="PartMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.PartMetadataAttribute.Name" />
        <element api="P:System.ComponentModel.Composition.PartMetadataAttribute.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.PartMetadataAttribute">
      <topicdata name="PartMetadataAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.PartMetadataAttribute" />
      <apidata name="PartMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartMetadataAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.PartMetadataAttribute">
      <topicdata name="PartMetadataAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.PartMetadataAttribute" />
      <apidata name="PartMetadataAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ComponentModel.Composition.PartMetadataAttribute.Name" />
        <element api="P:System.ComponentModel.Composition.PartMetadataAttribute.Value" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartMetadataAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartMetadataAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <topicdata group="api" />
      <apidata name="PartNotDiscoverableAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <topicdata name="PartNotDiscoverableAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" />
      <apidata name="PartNotDiscoverableAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <topicdata name="PartNotDiscoverableAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" />
      <apidata name="PartNotDiscoverableAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition" />
        <type api="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>