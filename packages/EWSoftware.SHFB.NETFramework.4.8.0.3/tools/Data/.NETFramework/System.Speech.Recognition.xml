<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="System.Speech">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Speech.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Speech.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.Speech.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\wpf\src\windows.snk</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:System.Speech.Recognition">
      <topicdata group="api" />
      <apidata name="System.Speech.Recognition" group="namespace" />
      <elements>
        <element api="T:System.Speech.Recognition.Grammar" />
        <element api="T:System.Speech.Recognition.SpeechUI" />
        <element api="T:System.Speech.Recognition.SubsetMatchingMode" />
        <element api="T:System.Speech.Recognition.RecognitionEventArgs" />
        <element api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
        <element api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
        <element api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
        <element api="T:System.Speech.Recognition.RecognitionResult" />
        <element api="T:System.Speech.Recognition.ReplacementText" />
        <element api="T:System.Speech.Recognition.RecognizedAudio" />
        <element api="T:System.Speech.Recognition.RecognizedPhrase" />
        <element api="T:System.Speech.Recognition.RecognizedWordUnit" />
        <element api="T:System.Speech.Recognition.DisplayAttributes" />
        <element api="T:System.Speech.Recognition.SemanticValue" />
        <element api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <element api="T:System.Speech.Recognition.AudioSignalProblem" />
        <element api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
        <element api="T:System.Speech.Recognition.AudioState" />
        <element api="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <element api="T:System.Speech.Recognition.Choices" />
        <element api="T:System.Speech.Recognition.DictationGrammar" />
        <element api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <element api="T:System.Speech.Recognition.GrammarBuilder" />
        <element api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <element api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <element api="T:System.Speech.Recognition.RecognizeMode" />
        <element api="T:System.Speech.Recognition.RecognizerInfo" />
        <element api="T:System.Speech.Recognition.RecognizerState" />
        <element api="T:System.Speech.Recognition.StateChangedEventArgs" />
        <element api="T:System.Speech.Recognition.SemanticResultKey" />
        <element api="T:System.Speech.Recognition.SemanticResultValue" />
        <element api="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <element api="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <element api="T:System.Speech.Recognition.SpeechRecognizer" />
        <element api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </elements>
    </api>
    <api id="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs">
      <topicdata group="api" />
      <apidata name="AudioLevelUpdatedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.AudioLevelUpdatedEventArgs">
      <topicdata name="AudioLevelUpdatedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
      <apidata name="AudioLevelUpdatedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.AudioLevelUpdatedEventArgs">
      <topicdata name="AudioLevelUpdatedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
      <apidata name="AudioLevelUpdatedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel">
      <topicdata group="api" />
      <apidata name="AudioLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioLevel" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.AudioSignalProblem">
      <topicdata group="api" />
      <apidata name="AudioSignalProblem" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.AudioSignalProblem.None" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.TooNoisy" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.NoSignal" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.TooLoud" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.TooSoft" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.TooFast" />
        <element api="F:System.Speech.Recognition.AudioSignalProblem.TooSlow" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.NoSignal">
      <topicdata group="api" notopic="" />
      <apidata name="NoSignal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.TooFast">
      <topicdata group="api" notopic="" />
      <apidata name="TooFast" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.TooLoud">
      <topicdata group="api" notopic="" />
      <apidata name="TooLoud" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.TooNoisy">
      <topicdata group="api" notopic="" />
      <apidata name="TooNoisy" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.TooSlow">
      <topicdata group="api" notopic="" />
      <apidata name="TooSlow" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioSignalProblem.TooSoft">
      <topicdata group="api" notopic="" />
      <apidata name="TooSoft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs">
      <topicdata group="api" />
      <apidata name="AudioSignalProblemOccurredEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioLevel" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.RecognizerAudioPosition" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs">
      <topicdata name="AudioSignalProblemOccurredEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      <apidata name="AudioSignalProblemOccurredEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs">
      <topicdata name="AudioSignalProblemOccurredEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      <apidata name="AudioSignalProblemOccurredEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioLevel" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem" />
        <element api="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.RecognizerAudioPosition" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioLevel">
      <topicdata group="api" />
      <apidata name="AudioLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioLevel" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem">
      <topicdata group="api" />
      <apidata name="AudioSignalProblem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioSignalProblem" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioSignalProblem" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.RecognizerAudioPosition">
      <topicdata group="api" />
      <apidata name="RecognizerAudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerAudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.AudioState">
      <topicdata group="api" />
      <apidata name="AudioState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.AudioState.Stopped" />
        <element api="F:System.Speech.Recognition.AudioState.Silence" />
        <element api="F:System.Speech.Recognition.AudioState.Speech" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioState.Silence">
      <topicdata group="api" notopic="" />
      <apidata name="Silence" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioState.Speech">
      <topicdata group="api" notopic="" />
      <apidata name="Speech" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.AudioState.Stopped">
      <topicdata group="api" notopic="" />
      <apidata name="Stopped" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.AudioStateChangedEventArgs">
      <topicdata group="api" />
      <apidata name="AudioStateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.AudioStateChangedEventArgs">
      <topicdata name="AudioStateChangedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
      <apidata name="AudioStateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.AudioStateChangedEventArgs">
      <topicdata name="AudioStateChangedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
      <apidata name="AudioStateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState">
      <topicdata group="api" />
      <apidata name="AudioState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioState" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.Choices">
      <topicdata group="api" />
      <apidata name="Choices" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.Choices.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.Choices.#ctor">
          <element api="M:System.Speech.Recognition.Choices.#ctor" />
          <element api="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
          <element api="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
        </element>
        <element api="Overload:System.Speech.Recognition.Choices.Add">
          <element api="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
          <element api="M:System.Speech.Recognition.Choices.Add(System.String[])" />
        </element>
        <element api="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.Choices">
      <topicdata name="Choices" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.Choices" />
      <apidata name="Choices" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.Choices.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.Choices.Add">
          <element api="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
          <element api="M:System.Speech.Recognition.Choices.Add(System.String[])" />
        </element>
        <element api="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.Choices.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.Choices.#ctor" />
        <element api="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
        <element api="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.Choices.Add">
      <topicdata name="Add" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Add" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
        <element api="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Choices.#ctor" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Choices.#ctor" />
      <parameters>
        <parameter name="alternateChoices" params="true">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.#ctor(System.String[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Choices.#ctor" />
      <parameters>
        <parameter name="phrases" params="true">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.Choices.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="alternateChoices" params="true">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.Add(System.String[])">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.Choices.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrases" params="true">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Choices.ToGrammarBuilder">
      <topicdata group="api" />
      <apidata name="ToGrammarBuilder" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Choices" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.DictationGrammar">
      <topicdata group="api" />
      <apidata name="DictationGrammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.DictationGrammar.#ctor">
          <element api="M:System.Speech.Recognition.DictationGrammar.#ctor" />
          <element api="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
        </element>
        <element api="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
        <element api="P:System.Speech.Recognition.Grammar.Enabled" />
        <element api="P:System.Speech.Recognition.Grammar.IsStg" />
        <element api="P:System.Speech.Recognition.Grammar.Loaded" />
        <element api="P:System.Speech.Recognition.Grammar.Name" />
        <element api="P:System.Speech.Recognition.Grammar.Priority" />
        <element api="P:System.Speech.Recognition.Grammar.ResourceName" />
        <element api="P:System.Speech.Recognition.Grammar.RuleName" />
        <element api="P:System.Speech.Recognition.Grammar.Weight" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.DictationGrammar">
      <topicdata name="DictationGrammar" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.DictationGrammar" />
      <apidata name="DictationGrammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.DictationGrammar">
      <topicdata name="DictationGrammar" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.DictationGrammar" />
      <apidata name="DictationGrammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <elements>
        <element api="P:System.Speech.Recognition.Grammar.Enabled" />
        <element api="P:System.Speech.Recognition.Grammar.IsStg" />
        <element api="P:System.Speech.Recognition.Grammar.Loaded" />
        <element api="P:System.Speech.Recognition.Grammar.Name" />
        <element api="P:System.Speech.Recognition.Grammar.Priority" />
        <element api="P:System.Speech.Recognition.Grammar.ResourceName" />
        <element api="P:System.Speech.Recognition.Grammar.RuleName" />
        <element api="P:System.Speech.Recognition.Grammar.Weight" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" />
      </containers>
    </api>
    <api id="Events.T:System.Speech.Recognition.DictationGrammar">
      <topicdata name="DictationGrammar" group="list" subgroup="Events" typeTopicId="T:System.Speech.Recognition.DictationGrammar" />
      <apidata name="DictationGrammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <elements>
        <element api="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.DictationGrammar.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.DictationGrammar.#ctor" />
        <element api="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.DictationGrammar.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.DictationGrammar.#ctor" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.DictationGrammar.#ctor" />
      <parameters>
        <parameter name="topic">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="SetDictationContext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="precedingText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="subsequentText">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DictationGrammar" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.DisplayAttributes">
      <topicdata group="api" />
      <apidata name="DisplayAttributes" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.DisplayAttributes.None" />
        <element api="F:System.Speech.Recognition.DisplayAttributes.ZeroTrailingSpaces" />
        <element api="F:System.Speech.Recognition.DisplayAttributes.OneTrailingSpace" />
        <element api="F:System.Speech.Recognition.DisplayAttributes.TwoTrailingSpaces" />
        <element api="F:System.Speech.Recognition.DisplayAttributes.ConsumeLeadingSpaces" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:System.Speech.Recognition.DisplayAttributes.ConsumeLeadingSpaces">
      <topicdata group="api" notopic="" />
      <apidata name="ConsumeLeadingSpaces" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <value>16</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.DisplayAttributes.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.DisplayAttributes.OneTrailingSpace">
      <topicdata group="api" notopic="" />
      <apidata name="OneTrailingSpace" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.DisplayAttributes.TwoTrailingSpaces">
      <topicdata group="api" notopic="" />
      <apidata name="TwoTrailingSpaces" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.DisplayAttributes.ZeroTrailingSpaces">
      <topicdata group="api" notopic="" />
      <apidata name="ZeroTrailingSpaces" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.AsyncCompletedEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs">
      <topicdata name="EmulateRecognizeCompletedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
      <apidata name="EmulateRecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs">
      <topicdata name="EmulateRecognizeCompletedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
      <apidata name="EmulateRecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result">
      <topicdata group="api" />
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Result" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.Grammar">
      <topicdata group="api" />
      <apidata name="Grammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Speech.Recognition.DictationGrammar" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.Grammar.#ctor">
          <element api="M:System.Speech.Recognition.Grammar.#ctor" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
          <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
        </element>
        <element api="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
        <element api="P:System.Speech.Recognition.Grammar.Enabled" />
        <element api="P:System.Speech.Recognition.Grammar.IsStg" />
        <element api="P:System.Speech.Recognition.Grammar.Loaded" />
        <element api="P:System.Speech.Recognition.Grammar.Name" />
        <element api="P:System.Speech.Recognition.Grammar.Priority" />
        <element api="P:System.Speech.Recognition.Grammar.ResourceName" />
        <element api="P:System.Speech.Recognition.Grammar.RuleName" />
        <element api="P:System.Speech.Recognition.Grammar.Weight" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.Grammar">
      <topicdata name="Grammar" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.Grammar" />
      <apidata name="Grammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.Grammar">
      <topicdata name="Grammar" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.Grammar" />
      <apidata name="Grammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.Grammar.Enabled" />
        <element api="P:System.Speech.Recognition.Grammar.IsStg" />
        <element api="P:System.Speech.Recognition.Grammar.Loaded" />
        <element api="P:System.Speech.Recognition.Grammar.Name" />
        <element api="P:System.Speech.Recognition.Grammar.Priority" />
        <element api="P:System.Speech.Recognition.Grammar.ResourceName" />
        <element api="P:System.Speech.Recognition.Grammar.RuleName" />
        <element api="P:System.Speech.Recognition.Grammar.Weight" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" />
      </containers>
    </api>
    <api id="Events.T:System.Speech.Recognition.Grammar">
      <topicdata name="Grammar" group="list" subgroup="Events" typeTopicId="T:System.Speech.Recognition.Grammar" />
      <apidata name="Grammar" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.Grammar.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.Grammar.#ctor" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
        <element api="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="srgsDocument">
          <type api="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="srgsDocument">
          <type api="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="srgsDocument">
          <type api="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="srgsDocument">
          <type api="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="srgsDocument">
          <type api="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.Grammar.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ruleName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.Enabled">
      <topicdata group="api" />
      <apidata name="Enabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Enabled" />
      <setter name="set_Enabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.IsStg">
      <topicdata group="api" />
      <apidata name="IsStg" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsStg" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.Loaded">
      <topicdata group="api" />
      <apidata name="Loaded" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Loaded" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])">
      <topicdata group="api" />
      <apidata name="LoadLocalizedGrammarFromType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="onInitParameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.Priority">
      <topicdata group="api" />
      <apidata name="Priority" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Priority" />
      <setter name="set_Priority" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.ResourceName">
      <topicdata group="api" />
      <apidata name="ResourceName" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ResourceName" />
      <setter name="set_ResourceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.RuleName">
      <topicdata group="api" />
      <apidata name="RuleName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RuleName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.Grammar.SpeechRecognized">
      <topicdata group="api" />
      <apidata name="SpeechRecognized" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechRecognized" />
      <remover name="remove_SpeechRecognized" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])">
      <topicdata group="api" />
      <apidata name="StgInit" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.Grammar.Weight">
      <topicdata group="api" />
      <apidata name="Weight" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Weight" />
      <setter name="set_Weight" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.GrammarBuilder">
      <topicdata group="api" />
      <apidata name="GrammarBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.#ctor">
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.Add">
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.Append">
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.AppendDictation">
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.AppendRuleReference">
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
        </element>
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition">
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit">
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
        </element>
        <element api="P:System.Speech.Recognition.GrammarBuilder.Culture" />
        <element api="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.GrammarBuilder">
      <topicdata name="GrammarBuilder" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.GrammarBuilder" />
      <apidata name="GrammarBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.Add">
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.Append">
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.AppendDictation">
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.AppendRuleReference">
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
        </element>
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" />
      </containers>
    </api>
    <api id="Operators.T:System.Speech.Recognition.GrammarBuilder">
      <topicdata name="GrammarBuilder" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:System.Speech.Recognition.GrammarBuilder" />
      <apidata name="GrammarBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <elements>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition">
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
        </element>
        <element api="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit">
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
          <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
        </element>
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.GrammarBuilder">
      <topicdata name="GrammarBuilder" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.GrammarBuilder" />
      <apidata name="GrammarBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <elements>
        <element api="P:System.Speech.Recognition.GrammarBuilder.Culture" />
        <element api="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.Add">
      <topicdata name="Add" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Add" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.Append">
      <topicdata name="Append" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Append" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.AppendDictation">
      <topicdata name="AppendDictation" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AppendDictation" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.AppendRuleReference">
      <topicdata name="AppendRuleReference" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AppendRuleReference" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition">
      <topicdata name="Addition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit">
      <topicdata name="Implicit" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
        <element api="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="alternateChoices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="minRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="minRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="subsetMatchingCriteria">
          <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="choices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="choices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder1">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="builder2">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.Add" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="alternateChoices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="minRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="minRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxRepeat">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.Append" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="subsetMatchingCriteria">
          <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.AppendDictation">
      <topicdata group="api" />
      <apidata name="AppendDictation" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)">
      <topicdata group="api" />
      <apidata name="AppendDictation" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="category">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)">
      <topicdata group="api" />
      <apidata name="AppendRuleReference" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.AppendRuleReference" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="AppendRuleReference" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.GrammarBuilder.AppendRuleReference" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="rule">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard">
      <topicdata group="api" />
      <apidata name="AppendWildcard" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.GrammarBuilder.Culture">
      <topicdata group="api" />
      <apidata name="Culture" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Culture" />
      <setter name="set_Culture" />
      <returns>
        <type api="T:System.Globalization.CultureInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases">
      <topicdata group="api" />
      <apidata name="DebugShowPhrases" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DebugShowPhrases" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="choices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="choices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder1">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="builder2">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="choices">
          <type api="T:System.Speech.Recognition.Choices" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="semanticKey">
          <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="semanticValue">
          <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:System.Speech.Recognition.GrammarBuilder.op_Implicit" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs">
      <topicdata group="api" />
      <apidata name="LoadGrammarCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.AsyncCompletedEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.LoadGrammarCompletedEventArgs">
      <topicdata name="LoadGrammarCompletedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
      <apidata name="LoadGrammarCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.LoadGrammarCompletedEventArgs">
      <topicdata name="LoadGrammarCompletedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
      <apidata name="LoadGrammarCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar">
      <topicdata group="api" />
      <apidata name="Grammar" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Grammar" />
      <returns>
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognitionEventArgs">
      <topicdata group="api" />
      <apidata name="RecognitionEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
          <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" ref="true" />
          <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognitionEventArgs">
      <topicdata name="RecognitionEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognitionEventArgs" />
      <apidata name="RecognitionEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognitionEventArgs">
      <topicdata name="RecognitionEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognitionEventArgs" />
      <apidata name="RecognitionEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognitionEventArgs.Result">
      <topicdata group="api" />
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Result" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognitionResult">
      <topicdata group="api" />
      <apidata name="RecognitionResult" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
        <element api="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
        <element api="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <element api="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognitionResult">
      <topicdata name="RecognitionResult" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognitionResult" />
      <apidata name="RecognitionResult" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
        <element api="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognitionResult">
      <topicdata name="RecognitionResult" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognitionResult" />
      <apidata name="RecognitionResult" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <element api="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognitionResult.Alternates">
      <topicdata group="api" />
      <apidata name="Alternates" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Alternates" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognitionResult.Audio">
      <topicdata group="api" />
      <apidata name="Audio" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Audio" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)">
      <topicdata group="api" />
      <apidata name="GetAudioForWordRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="firstWord">
          <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
        </parameter>
        <parameter name="lastWord">
          <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" eiiName="ISerializable.GetObjectData" />
      <apidata name="GetObjectData" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizeCompletedEventArgs">
      <topicdata group="api" />
      <apidata name="RecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.AsyncCompletedEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizeCompletedEventArgs">
      <topicdata name="RecognizeCompletedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
      <apidata name="RecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizeCompletedEventArgs">
      <topicdata name="RecognizeCompletedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
      <apidata name="RecognizeCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded" />
        <element api="P:System.Speech.Recognition.RecognizeCompletedEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout">
      <topicdata group="api" />
      <apidata name="BabbleTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BabbleTimeout" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout">
      <topicdata group="api" />
      <apidata name="InitialSilenceTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InitialSilenceTimeout" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded">
      <topicdata group="api" />
      <apidata name="InputStreamEnded" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InputStreamEnded" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizeCompletedEventArgs.Result">
      <topicdata group="api" />
      <apidata name="Result" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Result" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizedAudio">
      <topicdata group="api" />
      <apidata name="RecognizedAudio" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.Duration" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.Format" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizedAudio">
      <topicdata name="RecognizedAudio" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizedAudio" />
      <apidata name="RecognizedAudio" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
        <element api="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizedAudio">
      <topicdata name="RecognizedAudio" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizedAudio" />
      <apidata name="RecognizedAudio" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.Duration" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.Format" />
        <element api="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedAudio.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedAudio.Duration">
      <topicdata group="api" />
      <apidata name="Duration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Duration" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedAudio.Format">
      <topicdata group="api" />
      <apidata name="Format" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Format" />
      <returns>
        <type api="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="GetRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="audioPosition">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="duration">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedAudio.StartTime">
      <topicdata group="api" />
      <apidata name="StartTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_StartTime" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)">
      <topicdata group="api" />
      <apidata name="WriteToAudioStream" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="outputStream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)">
      <topicdata group="api" />
      <apidata name="WriteToWaveStream" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="outputStream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedAudio" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizedPhrase">
      <topicdata group="api" />
      <apidata name="RecognizedPhrase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizedPhrase">
      <topicdata name="RecognizedPhrase" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizedPhrase" />
      <apidata name="RecognizedPhrase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizedPhrase">
      <topicdata name="RecognizedPhrase" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizedPhrase" />
      <apidata name="RecognizedPhrase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <element api="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Confidence">
      <topicdata group="api" />
      <apidata name="Confidence" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Confidence" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics">
      <topicdata group="api" />
      <apidata name="ConstructSmlFromSemantics" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Xml.XPath.IXPathNavigable" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Grammar">
      <topicdata group="api" />
      <apidata name="Grammar" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Grammar" />
      <returns>
        <type api="T:System.Speech.Recognition.Grammar" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId">
      <topicdata group="api" />
      <apidata name="HomophoneGroupId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HomophoneGroupId" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Homophones">
      <topicdata group="api" />
      <apidata name="Homophones" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Homophones" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits">
      <topicdata group="api" />
      <apidata name="ReplacementWordUnits" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReplacementWordUnits" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.ReplacementText" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Semantics">
      <topicdata group="api" />
      <apidata name="Semantics" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Semantics" />
      <returns>
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Text">
      <topicdata group="api" />
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedPhrase.Words">
      <topicdata group="api" />
      <apidata name="Words" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Words" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedPhrase" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizedWordUnit">
      <topicdata group="api" />
      <apidata name="RecognizedWordUnit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizedWordUnit">
      <topicdata name="RecognizedWordUnit" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizedWordUnit" />
      <apidata name="RecognizedWordUnit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizedWordUnit">
      <topicdata name="RecognizedWordUnit" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizedWordUnit" />
      <apidata name="RecognizedWordUnit" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
        <element api="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="confidence">
          <type api="T:System.Single" ref="false" />
        </parameter>
        <parameter name="pronunciation">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="lexicalForm">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="displayAttributes">
          <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
        </parameter>
        <parameter name="audioPosition">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="audioDuration">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedWordUnit.Confidence">
      <topicdata group="api" />
      <apidata name="Confidence" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Confidence" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes">
      <topicdata group="api" />
      <apidata name="DisplayAttributes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DisplayAttributes" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm">
      <topicdata group="api" />
      <apidata name="LexicalForm" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LexicalForm" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation">
      <topicdata group="api" />
      <apidata name="Pronunciation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Pronunciation" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizedWordUnit.Text">
      <topicdata group="api" />
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizeMode">
      <topicdata group="api" />
      <apidata name="RecognizeMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.RecognizeMode.Single" />
        <element api="F:System.Speech.Recognition.RecognizeMode.Multiple" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.RecognizeMode.Multiple">
      <topicdata group="api" notopic="" />
      <apidata name="Multiple" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizeMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.RecognizeMode.Single">
      <topicdata group="api" notopic="" />
      <apidata name="Single" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizeMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizeMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizerInfo">
      <topicdata group="api" />
      <apidata name="RecognizerInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizerInfo.Dispose" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.AdditionalInfo" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Culture" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Description" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Id" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Name" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizerInfo">
      <topicdata name="RecognizerInfo" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizerInfo" />
      <apidata name="RecognizerInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.RecognizerInfo.Dispose" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizerInfo">
      <topicdata name="RecognizerInfo" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizerInfo" />
      <apidata name="RecognizerInfo" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognizerInfo.AdditionalInfo" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Culture" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Description" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Id" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.Name" />
        <element api="P:System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.AdditionalInfo">
      <topicdata group="api" />
      <apidata name="AdditionalInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AdditionalInfo" />
      <returns>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.Culture">
      <topicdata group="api" />
      <apidata name="Culture" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Culture" />
      <returns>
        <type api="T:System.Globalization.CultureInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.Description">
      <topicdata group="api" />
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Description" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.RecognizerInfo.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.Id">
      <topicdata group="api" />
      <apidata name="Id" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Id" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerInfo.SupportedAudioFormats">
      <topicdata group="api" />
      <apidata name="SupportedAudioFormats" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SupportedAudioFormats" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizerState">
      <topicdata group="api" />
      <apidata name="RecognizerState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.RecognizerState.Stopped" />
        <element api="F:System.Speech.Recognition.RecognizerState.Listening" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.RecognizerState.Listening">
      <topicdata group="api" notopic="" />
      <apidata name="Listening" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.RecognizerState.Stopped">
      <topicdata group="api" notopic="" />
      <apidata name="Stopped" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs">
      <topicdata group="api" />
      <apidata name="RecognizerUpdateReachedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs">
      <topicdata name="RecognizerUpdateReachedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      <apidata name="RecognizerUpdateReachedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs">
      <topicdata name="RecognizerUpdateReachedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      <apidata name="RecognizerUpdateReachedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition" />
        <element api="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken">
      <topicdata group="api" />
      <apidata name="UserToken" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_UserToken" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.ReplacementText">
      <topicdata group="api" />
      <apidata name="ReplacementText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" layout="sequential" format="ansi" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.ReplacementText.CountOfWords" />
        <element api="P:System.Speech.Recognition.ReplacementText.DisplayAttributes" />
        <element api="P:System.Speech.Recognition.ReplacementText.FirstWordIndex" />
        <element api="P:System.Speech.Recognition.ReplacementText.Text" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.ReplacementText">
      <topicdata name="ReplacementText" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.ReplacementText" />
      <apidata name="ReplacementText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" layout="sequential" format="ansi" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.ReplacementText">
      <topicdata name="ReplacementText" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.ReplacementText" />
      <apidata name="ReplacementText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" layout="sequential" format="ansi" />
      <elements>
        <element api="P:System.Speech.Recognition.ReplacementText.CountOfWords" />
        <element api="P:System.Speech.Recognition.ReplacementText.DisplayAttributes" />
        <element api="P:System.Speech.Recognition.ReplacementText.FirstWordIndex" />
        <element api="P:System.Speech.Recognition.ReplacementText.Text" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.ReplacementText.CountOfWords">
      <topicdata group="api" />
      <apidata name="CountOfWords" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CountOfWords" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.ReplacementText.DisplayAttributes">
      <topicdata group="api" />
      <apidata name="DisplayAttributes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DisplayAttributes" />
      <returns>
        <type api="T:System.Speech.Recognition.DisplayAttributes" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.ReplacementText.FirstWordIndex">
      <topicdata group="api" />
      <apidata name="FirstWordIndex" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FirstWordIndex" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.ReplacementText.Text">
      <topicdata group="api" />
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.ReplacementText" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SemanticResultKey">
      <topicdata group="api" />
      <apidata name="SemanticResultKey" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SemanticResultKey.#ctor">
          <element api="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
          <element api="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
        </element>
        <element api="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SemanticResultKey">
      <topicdata name="SemanticResultKey" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SemanticResultKey" />
      <apidata name="SemanticResultKey" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultKey" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SemanticResultKey.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
        <element api="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticResultKey.#ctor" />
      <parameters>
        <parameter name="semanticResultKey">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="builders" params="true">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticResultKey.#ctor" />
      <parameters>
        <parameter name="semanticResultKey">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="phrases" params="true">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder">
      <topicdata group="api" />
      <apidata name="ToGrammarBuilder" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultKey" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SemanticResultValue">
      <topicdata group="api" />
      <apidata name="SemanticResultValue" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SemanticResultValue.#ctor">
          <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
          <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
          <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
        </element>
        <element api="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SemanticResultValue">
      <topicdata name="SemanticResultValue" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SemanticResultValue" />
      <apidata name="SemanticResultValue" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SemanticResultValue.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
        <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
        <element api="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticResultValue.#ctor" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticResultValue.#ctor" />
      <parameters>
        <parameter name="builder">
          <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticResultValue.#ctor" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder">
      <topicdata group="api" />
      <apidata name="ToGrammarBuilder" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Speech.Recognition.GrammarBuilder" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticResultValue" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SemanticValue">
      <topicdata group="api" />
      <apidata name="SemanticValue" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <type api="T:System.String" ref="true" />
                        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <type api="T:System.String" ref="true" />
                        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <type api="T:System.String" ref="true" />
                          <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <type api="T:System.String" ref="true" />
                          <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SemanticValue.#ctor">
          <element api="M:System.Speech.Recognition.SemanticValue.#ctor(System.Object)" />
          <element api="M:System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)" />
        </element>
        <element api="M:System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.ContainsKey(System.String)" />
        <element api="M:System.Speech.Recognition.SemanticValue.Equals(System.Object)" />
        <element api="M:System.Speech.Recognition.SemanticValue.GetHashCode" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Clear" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Remove(System.String)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#GetEnumerator" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator" />
        <element api="P:System.Speech.Recognition.SemanticValue.Confidence" />
        <element api="P:System.Speech.Recognition.SemanticValue.Count" />
        <element api="P:System.Speech.Recognition.SemanticValue.Item(System.String)" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#IsReadOnly" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Keys" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Values" />
        <element api="P:System.Speech.Recognition.SemanticValue.Value" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SemanticValue">
      <topicdata name="SemanticValue" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SemanticValue" />
      <apidata name="SemanticValue" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <type api="T:System.String" ref="true" />
                        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <type api="T:System.String" ref="true" />
                        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <type api="T:System.String" ref="true" />
                          <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <type api="T:System.String" ref="true" />
                          <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <type api="T:System.String" ref="true" />
                      <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.ContainsKey(System.String)" />
        <element api="M:System.Speech.Recognition.SemanticValue.Equals(System.Object)" />
        <element api="M:System.Speech.Recognition.SemanticValue.GetHashCode" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Clear" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Remove(System.String)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#GetEnumerator" />
        <element api="M:System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SemanticValue">
      <topicdata name="SemanticValue" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SemanticValue" />
      <apidata name="SemanticValue" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.SemanticValue.Confidence" />
        <element api="P:System.Speech.Recognition.SemanticValue.Count" />
        <element api="P:System.Speech.Recognition.SemanticValue.Item(System.String)" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#IsReadOnly" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Keys" />
        <element api="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Values" />
        <element api="P:System.Speech.Recognition.SemanticValue.Value" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SemanticValue.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.SemanticValue.#ctor(System.Object)" />
        <element api="M:System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticValue.#ctor" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SemanticValue.#ctor" />
      <parameters>
        <parameter name="keyName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="confidence">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.Confidence">
      <topicdata group="api" />
      <apidata name="Confidence" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Confidence" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})">
      <topicdata group="api" />
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="item">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.ContainsKey(System.String)">
      <topicdata group="api" />
      <apidata name="ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.Count">
      <topicdata group="api" />
      <apidata name="Count" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Count" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.ICollection`1.Count">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.Item(System.String)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Item" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})">
      <topicdata group="api" eiiName="ICollection`1.Add" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Add(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Clear">
      <topicdata group="api" eiiName="ICollection`1.Clear" />
      <apidata name="Clear" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Clear">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)">
      <topicdata group="api" eiiName="ICollection`1.CopyTo" />
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#IsReadOnly">
      <topicdata group="api" eiiName="ICollection`1.IsReadOnly" />
      <apidata name="IsReadOnly" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Speech.Recognition.SemanticValue&gt;&gt;.IsReadOnly" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.ICollection`1.IsReadOnly">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})">
      <topicdata group="api" eiiName="ICollection`1.Remove" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Remove(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)">
      <topicdata group="api" eiiName="IDictionary`2.Add" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Keys">
      <topicdata group="api" eiiName="IDictionary`2.Keys" />
      <apidata name="Keys" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Keys" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IDictionary`2.Keys">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Remove(System.String)">
      <topicdata group="api" eiiName="IDictionary`2.Remove" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)">
      <topicdata group="api" eiiName="IDictionary`2.TryGetValue" />
      <apidata name="TryGetValue" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value" out="true">
          <referenceTo>
            <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String@System#Speech#Recognition#SemanticValue}#Values">
      <topicdata group="api" eiiName="IDictionary`2.Values" />
      <apidata name="Values" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Collections.Generic.IDictionary&lt;System.String,System.Speech.Recognition.SemanticValue&gt;.Values" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IDictionary`2.Values">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Speech#Recognition#SemanticValue}}#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable`1.GetEnumerator" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.GetEnumerator" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerable.GetEnumerator">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SemanticValue.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SemanticValue" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechDetectedEventArgs">
      <topicdata group="api" />
      <apidata name="SpeechDetectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechDetectedEventArgs">
      <topicdata name="SpeechDetectedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      <apidata name="SpeechDetectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechDetectedEventArgs">
      <topicdata name="SpeechDetectedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      <apidata name="SpeechDetectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechHypothesizedEventArgs">
      <topicdata group="api" />
      <apidata name="SpeechHypothesizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Speech.Recognition.RecognitionEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechHypothesizedEventArgs">
      <topicdata name="SpeechHypothesizedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
      <apidata name="SpeechHypothesizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechHypothesizedEventArgs">
      <topicdata name="SpeechHypothesizedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
      <apidata name="SpeechHypothesizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechRecognitionEngine">
      <topicdata group="api" />
      <apidata name="SpeechRecognitionEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Dispose">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Recognize">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
        </element>
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechRecognitionEngine">
      <topicdata name="SpeechRecognitionEngine" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      <apidata name="SpeechRecognitionEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Dispose">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Recognize">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting">
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
          <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechRecognitionEngine">
      <topicdata name="SpeechRecognitionEngine" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      <apidata name="SpeechRecognitionEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <elements>
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </containers>
    </api>
    <api id="Events.T:System.Speech.Recognition.SpeechRecognitionEngine">
      <topicdata name="SpeechRecognitionEngine" group="list" subgroup="Events" typeTopicId="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      <apidata name="SpeechRecognitionEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <elements>
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <element api="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize">
      <topicdata name="EmulateRecognize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync">
      <topicdata name="EmulateRecognizeAsync" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Recognize">
      <topicdata name="Recognize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Recognize" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync">
      <topicdata name="RecognizeAsync" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RecognizeAsync" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate">
      <topicdata name="RequestRecognizerUpdate" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting">
      <topicdata name="UpdateRecognizerSetting" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="UpdateRecognizerSetting" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <element api="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <parameters>
        <parameter name="culture">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <parameters>
        <parameter name="recognizerInfo">
          <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <parameters>
        <parameter name="recognizerId">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat">
      <topicdata group="api" />
      <apidata name="AudioFormat" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioFormat" />
      <returns>
        <type api="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel">
      <topicdata group="api" />
      <apidata name="AudioLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioLevel" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated">
      <topicdata group="api" />
      <apidata name="AudioLevelUpdated" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioLevelUpdated" />
      <remover name="remove_AudioLevelUpdated" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred">
      <topicdata group="api" />
      <apidata name="AudioSignalProblemOccurred" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioSignalProblemOccurred" />
      <remover name="remove_AudioSignalProblemOccurred" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState">
      <topicdata group="api" />
      <apidata name="AudioState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioState" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged">
      <topicdata group="api" />
      <apidata name="AudioStateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioStateChanged" />
      <remover name="remove_AudioStateChanged" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout">
      <topicdata group="api" />
      <apidata name="BabbleTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BabbleTimeout" />
      <setter name="set_BabbleTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="wordUnits">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="wordUnits">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_EmulateRecognizeCompleted" />
      <remover name="remove_EmulateRecognizeCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout">
      <topicdata group="api" />
      <apidata name="EndSilenceTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EndSilenceTimeout" />
      <setter name="set_EndSilenceTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous">
      <topicdata group="api" />
      <apidata name="EndSilenceTimeoutAmbiguous" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EndSilenceTimeoutAmbiguous" />
      <setter name="set_EndSilenceTimeoutAmbiguous" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars">
      <topicdata group="api" />
      <apidata name="Grammars" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Grammars" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.Grammar" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout">
      <topicdata group="api" />
      <apidata name="InitialSilenceTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InitialSilenceTimeout" />
      <setter name="set_InitialSilenceTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
          <argument>
            <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
            <enumValue>
              <field name="Advanced" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers">
      <topicdata group="api" />
      <apidata name="InstalledRecognizers" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="LoadGrammar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="LoadGrammarAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted">
      <topicdata group="api" />
      <apidata name="LoadGrammarCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_LoadGrammarCompleted" />
      <remover name="remove_LoadGrammarCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates">
      <topicdata group="api" />
      <apidata name="MaxAlternates" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxAlternates" />
      <setter name="set_MaxAlternates" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)">
      <topicdata group="api" />
      <apidata name="QueryRecognizerSetting" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="settingName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize">
      <topicdata group="api" />
      <apidata name="Recognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Recognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="initialSilenceTimeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync">
      <topicdata group="api" />
      <apidata name="RecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)">
      <topicdata group="api" />
      <apidata name="RecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="mode">
          <type api="T:System.Speech.Recognition.RecognizeMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel">
      <topicdata group="api" />
      <apidata name="RecognizeAsyncCancel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop">
      <topicdata group="api" />
      <apidata name="RecognizeAsyncStop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted">
      <topicdata group="api" />
      <apidata name="RecognizeCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_RecognizeCompleted" />
      <remover name="remove_RecognizeCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.RecognizeCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition">
      <topicdata group="api" />
      <apidata name="RecognizerAudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerAudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo">
      <topicdata group="api" />
      <apidata name="RecognizerInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerInfo" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached">
      <topicdata group="api" />
      <apidata name="RecognizerUpdateReached" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_RecognizerUpdateReached" />
      <remover name="remove_RecognizerUpdateReached" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userToken">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userToken">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="audioPositionAheadToRaiseUpdate">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)">
      <topicdata group="api" />
      <apidata name="SetInputToAudioStream" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="audioSource">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="audioFormat">
          <type api="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice">
      <topicdata group="api" />
      <apidata name="SetInputToDefaultAudioDevice" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull">
      <topicdata group="api" />
      <apidata name="SetInputToNull" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)">
      <topicdata group="api" />
      <apidata name="SetInputToWaveFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)">
      <topicdata group="api" />
      <apidata name="SetInputToWaveStream" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="audioSource">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected">
      <topicdata group="api" />
      <apidata name="SpeechDetected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechDetected" />
      <remover name="remove_SpeechDetected" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized">
      <topicdata group="api" />
      <apidata name="SpeechHypothesized" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechHypothesized" />
      <remover name="remove_SpeechHypothesized" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected">
      <topicdata group="api" />
      <apidata name="SpeechRecognitionRejected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechRecognitionRejected" />
      <remover name="remove_SpeechRecognitionRejected" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized">
      <topicdata group="api" />
      <apidata name="SpeechRecognized" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechRecognized" />
      <remover name="remove_SpeechRecognized" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars">
      <topicdata group="api" />
      <apidata name="UnloadAllGrammars" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="UnloadGrammar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="UpdateRecognizerSetting" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="settingName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="updatedValue">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="UpdateRecognizerSetting" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="settingName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="updatedValue">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionEngine" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs">
      <topicdata group="api" />
      <apidata name="SpeechRecognitionRejectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Speech.Recognition.RecognitionEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs">
      <topicdata name="SpeechRecognitionRejectedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
      <apidata name="SpeechRecognitionRejectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs">
      <topicdata name="SpeechRecognitionRejectedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
      <apidata name="SpeechRecognitionRejectedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechRecognizedEventArgs">
      <topicdata group="api" />
      <apidata name="SpeechRecognizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.Speech.Recognition.RecognitionEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechRecognizedEventArgs">
      <topicdata name="SpeechRecognizedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
      <apidata name="SpeechRecognizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechRecognizedEventArgs">
      <topicdata name="SpeechRecognizedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
      <apidata name="SpeechRecognizedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <elements>
        <element api="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechRecognizer">
      <topicdata group="api" />
      <apidata name="SpeechRecognizer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.Dispose">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechRecognizer">
      <topicdata name="SpeechRecognizer" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechRecognizer" />
      <apidata name="SpeechRecognizer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.Dispose">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <element api="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate">
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
          <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
        </element>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.SpeechRecognizer">
      <topicdata name="SpeechRecognizer" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.SpeechRecognizer" />
      <apidata name="SpeechRecognizer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <elements>
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
        <element api="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" />
      </containers>
    </api>
    <api id="Events.T:System.Speech.Recognition.SpeechRecognizer">
      <topicdata name="SpeechRecognizer" group="list" subgroup="Events" typeTopicId="T:System.Speech.Recognition.SpeechRecognizer" />
      <apidata name="SpeechRecognizer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <elements>
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
        <element api="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognizer.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize">
      <topicdata name="EmulateRecognize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync">
      <topicdata name="EmulateRecognizeAsync" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate">
      <topicdata name="RequestRecognizerUpdate" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <elements>
        <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
        <element api="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat">
      <topicdata group="api" />
      <apidata name="AudioFormat" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioFormat" />
      <returns>
        <type api="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel">
      <topicdata group="api" />
      <apidata name="AudioLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioLevel" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated">
      <topicdata group="api" />
      <apidata name="AudioLevelUpdated" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioLevelUpdated" />
      <remover name="remove_AudioLevelUpdated" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition">
      <topicdata group="api" />
      <apidata name="AudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred">
      <topicdata group="api" />
      <apidata name="AudioSignalProblemOccurred" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioSignalProblemOccurred" />
      <remover name="remove_AudioSignalProblemOccurred" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.AudioState">
      <topicdata group="api" />
      <apidata name="AudioState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AudioState" />
      <returns>
        <type api="T:System.Speech.Recognition.AudioState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged">
      <topicdata group="api" />
      <apidata name="AudioStateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_AudioStateChanged" />
      <remover name="remove_AudioStateChanged" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.AudioStateChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.Speech.Recognition.SpeechRecognizer.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="wordUnits">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="wordUnits">
          <arrayOf rank="1">
            <type api="T:System.Speech.Recognition.RecognizedWordUnit" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeAsync" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="inputText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="compareOptions">
          <type api="T:System.Globalization.CompareOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted">
      <topicdata group="api" />
      <apidata name="EmulateRecognizeCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_EmulateRecognizeCompleted" />
      <remover name="remove_EmulateRecognizeCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.Enabled">
      <topicdata group="api" />
      <apidata name="Enabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Enabled" />
      <setter name="set_Enabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.Grammars">
      <topicdata group="api" />
      <apidata name="Grammars" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Grammars" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.Grammar" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="LoadGrammar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="LoadGrammarAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted">
      <topicdata group="api" />
      <apidata name="LoadGrammarCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_LoadGrammarCompleted" />
      <remover name="remove_LoadGrammarCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates">
      <topicdata group="api" />
      <apidata name="MaxAlternates" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxAlternates" />
      <setter name="set_MaxAlternates" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition">
      <topicdata group="api" />
      <apidata name="PauseRecognizerOnRecognition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PauseRecognizerOnRecognition" />
      <setter name="set_PauseRecognizerOnRecognition" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition">
      <topicdata group="api" />
      <apidata name="RecognizerAudioPosition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerAudioPosition" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo">
      <topicdata group="api" />
      <apidata name="RecognizerInfo" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerInfo" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached">
      <topicdata group="api" />
      <apidata name="RecognizerUpdateReached" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_RecognizerUpdateReached" />
      <remover name="remove_RecognizerUpdateReached" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userToken">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="RequestRecognizerUpdate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userToken">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="audioPositionAheadToRaiseUpdate">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected">
      <topicdata group="api" />
      <apidata name="SpeechDetected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechDetected" />
      <remover name="remove_SpeechDetected" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechDetectedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized">
      <topicdata group="api" />
      <apidata name="SpeechHypothesized" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechHypothesized" />
      <remover name="remove_SpeechHypothesized" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected">
      <topicdata group="api" />
      <apidata name="SpeechRecognitionRejected" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechRecognitionRejected" />
      <remover name="remove_SpeechRecognitionRejected" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized">
      <topicdata group="api" />
      <apidata name="SpeechRecognized" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_SpeechRecognized" />
      <remover name="remove_SpeechRecognized" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.SpeechRecognizedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.SpeechRecognizer.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_State" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="E:System.Speech.Recognition.SpeechRecognizer.StateChanged">
      <topicdata group="api" />
      <apidata name="StateChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_StateChanged" />
      <remover name="remove_StateChanged" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.Speech.Recognition.StateChangedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.Speech.Recognition.StateChangedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars">
      <topicdata group="api" />
      <apidata name="UnloadAllGrammars" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)">
      <topicdata group="api" />
      <apidata name="UnloadGrammar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="grammar">
          <type api="T:System.Speech.Recognition.Grammar" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechRecognizer" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SpeechUI">
      <topicdata group="api" />
      <apidata name="SpeechUI" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.SpeechUI">
      <topicdata name="SpeechUI" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.SpeechUI" />
      <apidata name="SpeechUI" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechUI" />
      </containers>
    </api>
    <api id="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="SendTextFeedback" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="result">
          <type api="T:System.Speech.Recognition.RecognitionResult" ref="true" />
        </parameter>
        <parameter name="feedback">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isSuccessfulAction">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SpeechUI" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.StateChangedEventArgs">
      <topicdata group="api" />
      <apidata name="StateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.Speech.Recognition.StateChangedEventArgs.RecognizerState" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="Methods.T:System.Speech.Recognition.StateChangedEventArgs">
      <topicdata name="StateChangedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.Speech.Recognition.StateChangedEventArgs" />
      <apidata name="StateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.StateChangedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.Speech.Recognition.StateChangedEventArgs">
      <topicdata name="StateChangedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.Speech.Recognition.StateChangedEventArgs" />
      <apidata name="StateChangedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Speech.Recognition.StateChangedEventArgs.RecognizerState" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.StateChangedEventArgs" />
      </containers>
    </api>
    <api id="P:System.Speech.Recognition.StateChangedEventArgs.RecognizerState">
      <topicdata group="api" />
      <apidata name="RecognizerState" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RecognizerState" />
      <returns>
        <type api="T:System.Speech.Recognition.RecognizerState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.StateChangedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.Speech.Recognition.SubsetMatchingMode">
      <topicdata group="api" />
      <apidata name="SubsetMatchingMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.Speech.Recognition.SubsetMatchingMode.Subsequence" />
        <element api="F:System.Speech.Recognition.SubsetMatchingMode.OrderedSubset" />
        <element api="F:System.Speech.Recognition.SubsetMatchingMode.SubsequenceContentRequired" />
        <element api="F:System.Speech.Recognition.SubsetMatchingMode.OrderedSubsetContentRequired" />
      </elements>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.Speech.Recognition" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.SubsetMatchingMode.OrderedSubset">
      <topicdata group="api" notopic="" />
      <apidata name="OrderedSubset" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.SubsetMatchingMode.OrderedSubsetContentRequired">
      <topicdata group="api" notopic="" />
      <apidata name="OrderedSubsetContentRequired" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.SubsetMatchingMode.Subsequence">
      <topicdata group="api" notopic="" />
      <apidata name="Subsequence" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.Speech.Recognition.SubsetMatchingMode.SubsequenceContentRequired">
      <topicdata group="api" notopic="" />
      <apidata name="SubsequenceContentRequired" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.Speech" module="System.Speech" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
          <noAptca />
        </library>
        <namespace api="N:System.Speech.Recognition" />
        <type api="T:System.Speech.Recognition.SubsetMatchingMode" ref="false" />
      </containers>
    </api>
  </apis>
</reflection>