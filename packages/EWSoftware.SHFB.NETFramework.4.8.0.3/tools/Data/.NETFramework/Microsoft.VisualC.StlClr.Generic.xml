<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Microsoft.VisualC.STLCLR">
      <assemblydata version="2.0.0.0" culture="" key="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.VisualC.STLCLR</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>STLCLR cross assembly library</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTrademarkAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>STLCLR</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Microsoft.VisualC.StlClr.Generic">
      <topicdata group="api" />
      <apidata name="Microsoft.VisualC.StlClr.Generic" group="namespace" />
      <elements>
        <element api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
        <element api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      </elements>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <topicdata group="api" />
      <apidata name="ConstContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <topicdata name="ConstContainerBidirectionalIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
      <apidata name="ConstContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <topicdata name="ConstContainerBidirectionalIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
      <apidata name="ConstContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign">
      <topicdata name="Assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Node">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <topicdata group="api" />
      <apidata name="ConstContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <topicdata name="ConstContainerRandomAccessIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      <apidata name="ConstContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <topicdata name="ConstContainerRandomAccessIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      <apidata name="ConstContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <topicdata name="ConstContainerRandomAccessIterator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      <apidata name="ConstContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance">
      <topicdata name="distance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="distance" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than">
      <topicdata name="less_than" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="less_than" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition">
      <topicdata name="Addition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign">
      <topicdata name="Assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan">
      <topicdata name="GreaterThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
      <topicdata name="GreaterThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan">
      <topicdata name="LessThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual">
      <topicdata name="LessThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction">
      <topicdata name="Subtraction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
      <topicdata group="api" />
      <apidata name="move" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Left">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <topicdata group="api" />
      <apidata name="ConstReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <topicdata name="ConstReverseBidirectionalIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
      <apidata name="ConstReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <topicdata name="ConstReverseBidirectionalIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
      <apidata name="ConstReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign">
      <topicdata name="Assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base">
      <topicdata group="api" />
      <apidata name="base" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <topicdata group="api" />
      <apidata name="ConstReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <topicdata name="ConstReverseRandomAccessIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      <apidata name="ConstReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <topicdata name="ConstReverseRandomAccessIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      <apidata name="ConstReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <topicdata name="ConstReverseRandomAccessIterator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      <apidata name="ConstReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance">
      <topicdata name="distance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="distance" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than">
      <topicdata name="less_than" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="less_than" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition">
      <topicdata name="Addition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign">
      <topicdata name="Assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction">
      <topicdata name="Subtraction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
      <topicdata group="api" />
      <apidata name="base" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
      <topicdata group="api" />
      <apidata name="move" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Left">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <topicdata group="api" />
      <apidata name="ContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <topicdata name="ContainerBidirectionalIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
      <apidata name="ContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <topicdata name="ContainerBidirectionalIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
      <apidata name="ContainerBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Node">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <topicdata group="api" />
      <apidata name="ContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <topicdata name="ContainerRandomAccessIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      <apidata name="ContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <topicdata name="ContainerRandomAccessIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      <apidata name="ContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        </element>
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <topicdata name="ContainerRandomAccessIterator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      <apidata name="ContainerRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance">
      <topicdata name="distance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="distance" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than">
      <topicdata name="less_than" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="less_than" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition">
      <topicdata name="Addition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan">
      <topicdata name="GreaterThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual">
      <topicdata name="GreaterThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan">
      <topicdata name="LessThan" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual">
      <topicdata name="LessThanOrEqual" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction">
      <topicdata name="Subtraction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Item" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
      <topicdata group="api" />
      <apidata name="move" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Left">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <topicdata group="api" />
      <apidata name="IBaseIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <topicdata name="IBaseIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" />
      <apidata name="IBaseIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <topicdata group="api" />
      <apidata name="IBidirectionalContainer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <topicdata name="IBidirectionalContainer" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" />
      <apidata name="IBidirectionalContainer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation">
      <topicdata group="api" />
      <apidata name="get_generation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.UInt32" ref="false">
          <optionalModifier>
            <type api="T:System.Runtime.CompilerServices.IsLong" ref="true" />
          </optionalModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <topicdata group="api" />
      <apidata name="IBidirectionalIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <topicdata name="IBidirectionalIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
      <apidata name="IBidirectionalIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <topicdata group="api" />
      <apidata name="IForwardIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" />
          </specialization>
        </type>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <topicdata name="IForwardIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" />
      <apidata name="IForwardIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <topicdata group="api" />
      <apidata name="IInputIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <topicdata name="IInputIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
      <apidata name="IInputIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <topicdata group="api" />
      <apidata name="INode" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node" />
        <element api="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <topicdata name="INode" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
      <apidata name="INode" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <topicdata name="INode" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
      <apidata name="INode" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value">
      <topicdata group="api" />
      <apidata name="_Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get__Value" />
      <setter name="set__Value" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.INode`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head">
      <topicdata group="api" />
      <apidata name="is_head" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node">
      <topicdata group="api" />
      <apidata name="next_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node">
      <topicdata group="api" />
      <apidata name="prev_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.INode`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <topicdata group="api" />
      <apidata name="IOutputIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <topicdata name="IOutputIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" />
      <apidata name="IOutputIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1">
      <topicdata group="api" />
      <apidata name="IRandomAccessContainer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1">
      <topicdata name="IRandomAccessContainer" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />
      <apidata name="IRandomAccessContainer" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)">
      <topicdata group="api" />
      <apidata name="at_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)">
      <topicdata group="api" />
      <apidata name="valid_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
      <topicdata group="api" />
      <apidata name="IRandomAccessIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
      <topicdata name="IRandomAccessIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
      <apidata name="IRandomAccessIterator" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
      <topicdata group="api" />
      <apidata name="move" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <topicdata group="api" />
      <apidata name="ReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <topicdata name="ReverseBidirectionalIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
      <apidata name="ReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <topicdata name="ReverseBidirectionalIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
      <apidata name="ReverseBidirectionalIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality">
      <topicdata name="Equality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality">
      <topicdata name="Inequality" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base">
      <topicdata group="api" />
      <apidata name="base" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <topicdata group="api" />
      <apidata name="ReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <topicdata name="ReverseRandomAccessIterator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      <apidata name="ReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <topicdata name="ReverseRandomAccessIterator" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      <apidata name="ReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction">
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        </element>
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <topicdata name="ReverseRandomAccessIterator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      <apidata name="ReverseRandomAccessIterator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance">
      <topicdata name="distance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="distance" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to">
      <topicdata name="equal_to" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than">
      <topicdata name="less_than" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="less_than" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition">
      <topicdata name="Addition" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement">
      <topicdata name="Decrement" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment">
      <topicdata name="Increment" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction">
      <topicdata name="Subtraction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
      <topicdata group="api" />
      <apidata name="base" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
      <topicdata group="api" />
      <apidata name="container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="distance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="equal_to" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias">
      <topicdata group="api" />
      <apidata name="get_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref">
      <topicdata group="api" />
      <apidata name="get_cref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node">
      <topicdata group="api" />
      <apidata name="get_node" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref">
      <topicdata group="api" />
      <apidata name="get_ref" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Item" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="less_than" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
      <topicdata group="api" />
      <apidata name="move" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="_Offset">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next">
      <topicdata group="api" />
      <apidata name="next" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Left">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Decrement" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="GreaterThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Increment" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="A_0">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThan" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="LessThanOrEqual" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="MemberSelection" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="PointerDereference" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Left">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev">
      <topicdata group="api" />
      <apidata name="prev" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
      <topicdata group="api" />
      <apidata name="valid" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr.Generic" />
        <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>