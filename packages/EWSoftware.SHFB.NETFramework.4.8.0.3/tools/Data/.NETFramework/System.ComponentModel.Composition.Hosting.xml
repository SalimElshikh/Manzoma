<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="System.ComponentModel.Composition">
      <assemblydata version="4.0.0.0" culture="" key="00000000000000000400000000000000" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ComponentModel.Composition.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\EcmaPublicKey.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:System.ComponentModel.Composition.Hosting">
      <topicdata group="api" />
      <apidata name="System.ComponentModel.Composition.Hosting" group="namespace" />
      <elements>
        <element api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
        <element api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
        <element api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" />
        <element api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
        <element api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
        <element api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
        <element api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />
        <element api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" />
        <element api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
        <element api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
        <element api="T:System.ComponentModel.Composition.Hosting.CompositionService" />
        <element api="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
        <element api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
        <element api="T:System.ComponentModel.Composition.Hosting.ImportEngine" />
        <element api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
        <element api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />
        <element api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" />
        <element api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      </elements>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <topicdata group="api" />
      <apidata name="AggregateCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <topicdata name="AggregateCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      <apidata name="AggregateCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <topicdata name="AggregateCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      <apidata name="AggregateCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <topicdata name="AggregateCatalog" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      <apidata name="AggregateCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <parameters>
        <parameter name="catalogs">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor" />
      <parameters>
        <parameter name="catalogs" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <topicdata group="api" />
      <apidata name="Catalogs" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Catalogs" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <topicdata group="api" />
      <apidata name="Changing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changing" />
      <remover name="remove_Changing" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <topicdata group="api" />
      <apidata name="AggregateExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <topicdata name="AggregateExportProvider" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      <apidata name="AggregateExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <topicdata name="AggregateExportProvider" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      <apidata name="AggregateExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <topicdata name="AggregateExportProvider" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      <apidata name="AggregateExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor" />
      <parameters>
        <parameter name="providers">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor" />
      <parameters>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExportsCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <topicdata group="api" />
      <apidata name="Providers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Providers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog">
      <topicdata group="api" />
      <apidata name="ApplicationCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ApplicationCatalog">
      <topicdata name="ApplicationCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" />
      <apidata name="ApplicationCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.ApplicationCatalog">
      <topicdata name="ApplicationCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" />
      <apidata name="ApplicationCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <parameters>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <parameters>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor" />
      <parameters>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <topicdata group="api" eiiName="ICompositionElement.DisplayName" />
      <apidata name="DisplayName" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <topicdata group="api" eiiName="ICompositionElement.Origin" />
      <apidata name="Origin" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.Origin" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <topicdata group="api" />
      <apidata name="AssemblyCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly" />
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <topicdata name="AssemblyCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />
      <apidata name="AssemblyCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <topicdata name="AssemblyCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />
      <apidata name="AssemblyCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly" />
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="codeBase">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="codeBase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="codeBase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor" />
      <parameters>
        <parameter name="codeBase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <topicdata group="api" />
      <apidata name="Assembly" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Assembly" />
      <returns>
        <type api="T:System.Reflection.Assembly" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <topicdata group="api" eiiName="ICompositionElement.DisplayName" />
      <apidata name="DisplayName" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <topicdata group="api" eiiName="ICompositionElement.Origin" />
      <apidata name="Origin" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.Origin" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <topicdata group="api" />
      <apidata name="AtomicComposition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue">
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <topicdata name="AtomicComposition" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />
      <apidata name="AtomicComposition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue">
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)" />
          <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)" />
        </element>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue">
      <topicdata name="TryGetValue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="TryGetValue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)" />
        <element api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
      <parameters>
        <parameter name="outerAtomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <topicdata group="api" />
      <apidata name="AddCompleteAction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="completeAction">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <topicdata group="api" />
      <apidata name="AddRevertAction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="revertAction">
          <type api="T:System.Action" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <topicdata group="api" />
      <apidata name="Complete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <topicdata group="api" />
      <apidata name="SetValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <topicdata group="api" />
      <apidata name="TryGetValue" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="localAtomicCompositionOnly">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="value" out="true">
          <referenceTo>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <topicdata group="api" />
      <apidata name="TryGetValue" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="value" out="true">
          <referenceTo>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <topicdata group="api" />
      <apidata name="CatalogExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" />
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)" />
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog" />
        <element api="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <topicdata name="CatalogExportProvider" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      <apidata name="CatalogExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <topicdata name="CatalogExportProvider" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      <apidata name="CatalogExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog" />
        <element api="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <topicdata name="CatalogExportProvider" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      <apidata name="CatalogExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="isThreadSafe">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="compositionOptions">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <topicdata group="api" />
      <apidata name="Catalog" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Catalog" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExportsCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <topicdata group="api" />
      <apidata name="SourceProvider" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceProvider" />
      <setter name="set_SourceProvider" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CatalogExtensions">
      <topicdata group="api" />
      <apidata name="CatalogExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CatalogExtensions">
      <topicdata name="CatalogExtensions" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" />
      <apidata name="CatalogExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <topicdata group="api" />
      <apidata name="CreateCompositionService" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="composablePartCatalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <topicdata group="api" />
      <apidata name="ComposablePartCatalogChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <topicdata name="ComposablePartCatalogChangeEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      <apidata name="ComposablePartCatalogChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <topicdata name="ComposablePartCatalogChangeEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      <apidata name="ComposablePartCatalogChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="addedDefinitions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="removedDefinitions">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <topicdata group="api" />
      <apidata name="AddedDefinitions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AddedDefinitions" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <topicdata group="api" />
      <apidata name="AtomicComposition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AtomicComposition" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <topicdata group="api" />
      <apidata name="RemovedDefinitions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RemovedDefinitions" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <topicdata group="api" />
      <apidata name="ComposablePartExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <topicdata name="ComposablePartExportProvider" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      <apidata name="ComposablePartExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <topicdata name="ComposablePartExportProvider" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      <apidata name="ComposablePartExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <topicdata name="ComposablePartExportProvider" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      <apidata name="ComposablePartExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <parameters>
        <parameter name="isThreadSafe">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor" />
      <parameters>
        <parameter name="compositionOptions">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <topicdata group="api" />
      <apidata name="Compose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="batch">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExportsCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <topicdata group="api" />
      <apidata name="SourceProvider" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceProvider" />
      <setter name="set_SourceProvider" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <topicdata group="api" />
      <apidata name="CompositionBatch" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" source="extension" overload="true">
          <apidata name="AddExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" source="extension" overload="true">
          <apidata name="AddExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="contractName">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)" source="extension">
          <apidata name="AddPart" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <topicdata name="CompositionBatch" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      <apidata name="CompositionBatch" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" source="extension" overload="true">
          <apidata name="AddExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" source="extension" overload="true">
          <apidata name="AddExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="contractName">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)" source="extension">
          <apidata name="AddPart" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <topicdata name="CompositionBatch" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      <apidata name="CompositionBatch" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor" />
      <parameters>
        <parameter name="partsToAdd">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="partsToRemove">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <topicdata group="api" />
      <apidata name="AddExport" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="export">
          <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="AddPart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <topicdata group="api" />
      <apidata name="PartsToAdd" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PartsToAdd" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <topicdata group="api" />
      <apidata name="PartsToRemove" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PartsToRemove" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="RemovePart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <topicdata group="api" />
      <apidata name="CompositionConstants" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericContractMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericParametersMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ImportSourceMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.IsGenericPartMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Fields.T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <topicdata name="CompositionConstants" group="list" subgroup="Fields" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionConstants" />
      <apidata name="CompositionConstants" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericContractMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericParametersMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ImportSourceMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.IsGenericPartMetadataName" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <topicdata group="api" />
      <apidata name="ExportTypeIdentityMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>ExportTypeIdentity</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericContractMetadataName">
      <topicdata group="api" />
      <apidata name="GenericContractMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>System.ComponentModel.Composition.GenericContractName</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericParametersMetadataName">
      <topicdata group="api" />
      <apidata name="GenericParametersMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>System.ComponentModel.Composition.GenericParameters</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ImportSourceMetadataName">
      <topicdata group="api" />
      <apidata name="ImportSourceMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>System.ComponentModel.Composition.ImportSource</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.IsGenericPartMetadataName">
      <topicdata group="api" />
      <apidata name="IsGenericPartMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>System.ComponentModel.Composition.IsGenericPart</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <topicdata group="api" />
      <apidata name="PartCreationPolicyMetadataName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <value>System.ComponentModel.Composition.CreationPolicy</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionConstants" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <topicdata group="api" />
      <apidata name="CompositionContainer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" source="extension" overload="true">
          <apidata name="ComposeExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" source="extension" overload="true">
          <apidata name="ComposeExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="contractName">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])" source="extension">
          <apidata name="ComposeParts" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedParts" params="true">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <topicdata name="CompositionContainer" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      <apidata name="CompositionContainer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" source="extension" overload="true">
          <apidata name="ComposeExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" source="extension" overload="true">
          <apidata name="ComposeExportedValue" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="contractName">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exportedValue">
              <template name="T" index="0" api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])" source="extension">
          <apidata name="ComposeParts" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedParts" params="true">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <topicdata name="CompositionContainer" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      <apidata name="CompositionContainer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <topicdata name="CompositionContainer" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      <apidata name="CompositionContainer" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport">
      <topicdata name="ReleaseExport" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ReleaseExport" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports">
      <topicdata name="ReleaseExports" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ReleaseExports" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <parameters>
        <parameter name="compositionOptions">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
        </parameter>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <parameters>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="isThreadSafe">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="compositionOptions">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
        </parameter>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="providers" params="true">
          <arrayOf rank="1">
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <topicdata group="api" />
      <apidata name="Catalog" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Catalog" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <topicdata group="api" />
      <apidata name="Compose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="batch">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionBatch" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExportsCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <topicdata group="api" />
      <apidata name="Providers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Providers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <topicdata group="api" />
      <apidata name="ReleaseExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="export">
          <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <topicdata group="api" />
      <apidata name="ReleaseExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="export">
          <type api="T:System.Lazy`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <topicdata group="api" />
      <apidata name="ReleaseExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exports">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <topicdata group="api" />
      <apidata name="ReleaseExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="exports">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Lazy`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <topicdata group="api" />
      <apidata name="ReleaseExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TMetadataView" />
      </templates>
      <parameters>
        <parameter name="exports">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Lazy`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
                  <template name="TMetadataView" index="1" api="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionOptions">
      <topicdata group="api" />
      <apidata name="CompositionOptions" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionOptions.Default" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionOptions.DisableSilentRejection" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionOptions.IsThreadSafe" />
        <element api="F:System.ComponentModel.Composition.Hosting.CompositionOptions.ExportCompositionService" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionOptions.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionOptions.DisableSilentRejection">
      <topicdata group="api" notopic="" />
      <apidata name="DisableSilentRejection" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionOptions.ExportCompositionService">
      <topicdata group="api" notopic="" />
      <apidata name="ExportCompositionService" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </containers>
    </api>
    <api id="F:System.ComponentModel.Composition.Hosting.CompositionOptions.IsThreadSafe">
      <topicdata group="api" notopic="" />
      <apidata name="IsThreadSafe" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition">
      <topicdata group="api" />
      <apidata name="CompositionScopeDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition})" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Children" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.PublicSurface" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition">
      <topicdata name="CompositionScopeDefinition" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      <apidata name="CompositionScopeDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition">
      <topicdata name="CompositionScopeDefinition" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      <apidata name="CompositionScopeDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Children" />
        <element api="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.PublicSurface" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition">
      <topicdata name="CompositionScopeDefinition" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      <apidata name="CompositionScopeDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition})" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="children">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="children">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="publicSurface">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing">
      <topicdata group="api" />
      <apidata name="Changing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changing" />
      <remover name="remove_Changing" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Children">
      <topicdata group="api" />
      <apidata name="Children" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Children" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.PublicSurface">
      <topicdata group="api" />
      <apidata name="PublicSurface" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_PublicSurface" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.CompositionService">
      <topicdata group="api" />
      <apidata name="CompositionService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionService.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.CompositionService">
      <topicdata name="CompositionService" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.CompositionService" />
      <apidata name="CompositionService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionService.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionService.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <topicdata group="api" />
      <apidata name="DirectoryCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <topicdata name="DirectoryCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      <apidata name="DirectoryCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <topicdata name="DirectoryCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      <apidata name="DirectoryCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <topicdata name="DirectoryCatalog" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      <apidata name="DirectoryCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor" />
      <parameters>
        <parameter name="path">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing">
      <topicdata group="api" />
      <apidata name="Changing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changing" />
      <remover name="remove_Changing" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath">
      <topicdata group="api" />
      <apidata name="FullPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_FullPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles">
      <topicdata group="api" />
      <apidata name="LoadedFiles" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_LoadedFiles" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path">
      <topicdata group="api" />
      <apidata name="Path" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Path" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh">
      <topicdata group="api" />
      <apidata name="Refresh" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern">
      <topicdata group="api" />
      <apidata name="SearchPattern" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SearchPattern" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <topicdata group="api" eiiName="ICompositionElement.DisplayName" />
      <apidata name="DisplayName" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <topicdata group="api" eiiName="ICompositionElement.Origin" />
      <apidata name="Origin" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.Origin" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <topicdata group="api" />
      <apidata name="ExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" ref="true" />
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionContainer" ref="true" />
          <type api="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" ref="true" />
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <topicdata name="ExportProvider" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
      <apidata name="ExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports">
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <topicdata name="ExportProvider" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
      <apidata name="ExportProvider" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
        <element api="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport">
      <topicdata name="GetExport" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetExport" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue">
      <topicdata name="GetExportedValue" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetExportedValue" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault">
      <topicdata name="GetExportedValueOrDefault" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetExportedValueOrDefault" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues">
      <topicdata name="GetExportedValues" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetExportedValues" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports">
      <topicdata name="GetExports" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <topicdata group="api" />
      <apidata name="ExportsChanged" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ExportsChanged" />
      <remover name="remove_ExportsChanged" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <topicdata group="api" />
      <apidata name="ExportsChanging" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_ExportsChanging" />
      <remover name="remove_ExportsChanging" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <topicdata group="api" />
      <apidata name="GetExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Lazy`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <topicdata group="api" />
      <apidata name="GetExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TMetadataView" />
      </templates>
      <returns>
        <type api="T:System.Lazy`2" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
            <template name="TMetadataView" index="1" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <topicdata group="api" />
      <apidata name="GetExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Lazy`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <topicdata group="api" />
      <apidata name="GetExport" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TMetadataView" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Lazy`2" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
            <template name="TMetadataView" index="1" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <topicdata group="api" />
      <apidata name="GetExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <topicdata group="api" />
      <apidata name="GetExportedValue" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <topicdata group="api" />
      <apidata name="GetExportedValueOrDefault" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <topicdata group="api" />
      <apidata name="GetExportedValueOrDefault" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <topicdata group="api" />
      <apidata name="GetExportedValues" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <topicdata group="api" />
      <apidata name="GetExportedValues" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Lazy`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TMetadataView" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Lazy`2" ref="true">
              <specialization>
                <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
                <template name="TMetadataView" index="1" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Lazy`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TMetadataView" />
      </templates>
      <parameters>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Lazy`2" ref="true">
              <specialization>
                <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
                <template name="TMetadataView" index="1" api="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="metadataViewType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Lazy`2" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="GetExportsCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnExportsChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnExportsChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <topicdata group="api" />
      <apidata name="TryGetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
        <parameter name="exports" out="true">
          <referenceTo>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.Export" ref="true" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <topicdata group="api" />
      <apidata name="ExportsChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <topicdata name="ExportsChangeEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      <apidata name="ExportsChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <topicdata name="ExportsChangeEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      <apidata name="ExportsChangeEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames" />
        <element api="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="addedExports">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="removedExports">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <topicdata group="api" />
      <apidata name="AddedExports" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AddedExports" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <topicdata group="api" />
      <apidata name="AtomicComposition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AtomicComposition" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <topicdata group="api" />
      <apidata name="ChangedContractNames" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ChangedContractNames" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <topicdata group="api" />
      <apidata name="RemovedExports" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RemovedExports" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.FilteredCatalog">
      <topicdata group="api" />
      <apidata name="FilteredCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies">
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents">
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.FilteredCatalog">
      <topicdata name="FilteredCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      <apidata name="FilteredCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies">
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents">
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
          <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.FilteredCatalog">
      <topicdata name="FilteredCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      <apidata name="FilteredCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.FilteredCatalog">
      <topicdata name="FilteredCatalog" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      <apidata name="FilteredCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies">
      <topicdata name="IncludeDependencies" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="IncludeDependencies" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents">
      <topicdata name="IncludeDependents" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="IncludeDependents" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
        <element api="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing">
      <topicdata group="api" />
      <apidata name="Changing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changing" />
      <remover name="remove_Changing" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
          <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement">
      <topicdata group="api" />
      <apidata name="Complement" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Complement" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <topicdata group="api" />
      <apidata name="GetExports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="definition">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                <type api="T:System.ComponentModel.Composition.Primitives.ExportDefinition" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies">
      <topicdata group="api" />
      <apidata name="IncludeDependencies" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})">
      <topicdata group="api" />
      <apidata name="IncludeDependencies" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="importFilter">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents">
      <topicdata group="api" />
      <apidata name="IncludeDependents" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})">
      <topicdata group="api" />
      <apidata name="IncludeDependents" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="importFilter">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ImportDefinition" ref="true" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <topicdata group="api" />
      <apidata name="OnChanging" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="e">
          <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <topicdata group="api" />
      <apidata name="ImportEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.ComponentModel.Composition.Hosting.CompositionOptions)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <topicdata name="ImportEngine" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ImportEngine" />
      <apidata name="ImportEngine" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" source="extension" overload="true">
          <apidata name="SatisfyImportsOnce" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="attributedPart">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="reflectionContext">
              <type api="T:System.Reflection.ReflectionContext" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition" />
            <type api="T:System.ComponentModel.Composition.AttributedModelServices" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.ComponentModel.Composition.Hosting.CompositionOptions)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor" />
      <parameters>
        <parameter name="sourceProvider">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor" />
      <parameters>
        <parameter name="sourceProvider">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </parameter>
        <parameter name="isThreadSafe">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor" />
      <parameters>
        <parameter name="sourceProvider">
          <type api="T:System.ComponentModel.Composition.Hosting.ExportProvider" ref="true" />
        </parameter>
        <parameter name="compositionOptions">
          <type api="T:System.ComponentModel.Composition.Hosting.CompositionOptions" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="PreviewImports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <topicdata group="api" />
      <apidata name="ReleaseImports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
        <parameter name="atomicComposition">
          <type api="T:System.ComponentModel.Composition.Hosting.AtomicComposition" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="SatisfyImports" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <topicdata group="api" />
      <apidata name="SatisfyImportsOnce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePart" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
          <type api="T:System.ComponentModel.Composition.ICompositionService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ImportEngine" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <topicdata group="api" />
      <apidata name="INotifyComposablePartCatalogChanged" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
        <type api="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" ref="true" />
        <type api="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" ref="true" />
        <type api="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" ref="true" />
      </implementors>
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Events.T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <topicdata name="INotifyComposablePartCatalogChanged" group="list" subgroup="Events" typeTopicId="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
      <apidata name="INotifyComposablePartCatalogChanged" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" />
        <element api="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
      </containers>
    </api>
    <api id="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <topicdata group="api" />
      <apidata name="Changing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changing" />
      <remover name="remove_Changing" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" ref="true" />
      </containers>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.ScopingExtensions">
      <topicdata group="api" />
      <apidata name="ScopingExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports">
          <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.ScopingExtensions">
      <topicdata name="ScopingExtensions" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" />
      <apidata name="ScopingExtensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
        <element api="Overload:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports">
          <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
          <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports">
      <topicdata name="Imports" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Imports" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)">
      <topicdata group="api" />
      <apidata name="ContainsPartMetadata" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <topicdata group="api" />
      <apidata name="ContainsPartMetadataWithKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <topicdata group="api" />
      <apidata name="Exports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="catalog">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </parameter>
        <parameter name="filter">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <topicdata group="api" />
      <apidata name="Imports" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="part">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
        </parameter>
        <parameter name="contractName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="importCardinality">
          <type api="T:System.ComponentModel.Composition.Primitives.ImportCardinality" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <topicdata group="api" />
      <apidata name="TypeCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </implements>
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor">
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext)" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
      </containers>
    </api>
    <api id="Methods.T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <topicdata name="TypeCatalog" group="list" subgroup="Methods" typeTopicId="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />
      <apidata name="TypeCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" source="extension">
          <apidata name="CreateCompositionService" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.CompositionService" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.CatalogExtensions" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel.Composition.Hosting" />
            <type api="T:System.ComponentModel.Composition.Hosting.ScopingExtensions" ref="true" />
          </containers>
        </element>
        <element api="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose">
          <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
          <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetEnumerator" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />
      </containers>
    </api>
    <api id="Properties.T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <topicdata name="TypeCatalog" group="list" subgroup="Properties" typeTopicId="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />
      <apidata name="TypeCatalog" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName" />
        <element api="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext)" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose" />
        <element api="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor" />
      <parameters>
        <parameter name="types">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor" />
      <parameters>
        <parameter name="types">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor" />
      <parameters>
        <parameter name="types">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor" />
      <parameters>
        <parameter name="types">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="reflectionContext">
          <type api="T:System.Reflection.ReflectionContext" ref="true" />
        </parameter>
        <parameter name="definitionOrigin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor" />
      <parameters>
        <parameter name="types" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetEnumerator">
      <topicdata group="api" />
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
          <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <topicdata group="api" eiiName="ICompositionElement.DisplayName" />
      <apidata name="DisplayName" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <topicdata group="api" eiiName="ICompositionElement.Origin" />
      <apidata name="Origin" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ComponentModel.Composition.Primitives.ICompositionElement.Origin" />
      <returns>
        <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
          <type api="T:System.ComponentModel.Composition.Primitives.ICompositionElement" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
    <api id="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ComponentModel.Composition" module="System.ComponentModel.Composition" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ComponentModel.Composition.Hosting" />
        <type api="T:System.ComponentModel.Composition.Hosting.TypeCatalog" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>