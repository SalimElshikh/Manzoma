<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="System.ServiceModel">
      <assemblydata version="4.0.0.0" culture="" key="00000000000000000400000000000000" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\EcmaPublicKey.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="System.ServiceModel.Activities">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activities.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activities.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activities.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\35MSSharedLib1024.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="System.ServiceModel.Activation">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activation.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activation.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Activation.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\35MSSharedLib1024.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="System.ServiceModel.Channels">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.GuidAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>C2196CB7-3181-4ebe-97B3-73A075066880</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Channels.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Channels.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Channels.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\35MSSharedLib1024.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="System.ServiceModel.Web">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Web.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Web.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.ServiceModel.Web.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\35MSSharedLib1024.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="System.WorkflowServices">
      <assemblydata version="4.0.0.0" culture="" key="0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Security.AllowPartiallyTrustedCallersAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.WorkflowServices.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.WorkflowServices.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>System.WorkflowServices.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® .NET Framework</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation.  All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.8.3761.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>4.0.0.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\35MSSharedLib1024.snk</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblySignatureKeyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a</value>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:System.ServiceModel">
      <topicdata group="api" />
      <apidata name="System.ServiceModel" group="namespace" />
      <elements>
        <element api="T:System.ServiceModel.ActionNotSupportedException" />
        <element api="T:System.ServiceModel.AddressAlreadyInUseException" />
        <element api="T:System.ServiceModel.AddressAccessDeniedException" />
        <element api="T:System.ServiceModel.ChannelTerminatedException" />
        <element api="T:System.ServiceModel.CommunicationException" />
        <element api="T:System.ServiceModel.CommunicationObjectAbortedException" />
        <element api="T:System.ServiceModel.CommunicationObjectFaultedException" />
        <element api="T:System.ServiceModel.CommunicationState" />
        <element api="T:System.ServiceModel.EndpointNotFoundException" />
        <element api="T:System.ServiceModel.ICommunicationObject" />
        <element api="T:System.ServiceModel.IDefaultCommunicationTimeouts" />
        <element api="T:System.ServiceModel.ProtocolException" />
        <element api="T:System.ServiceModel.ServerTooBusyException" />
        <element api="T:System.ServiceModel.ServiceActivationException" />
        <element api="T:System.ServiceModel.HostNameComparisonMode" />
        <element api="T:System.ServiceModel.TransferMode" />
        <element api="T:System.ServiceModel.BasicHttpContextBinding" />
        <element api="T:System.ServiceModel.NetTcpContextBinding" />
        <element api="T:System.ServiceModel.WSHttpContextBinding" />
        <element api="T:System.ServiceModel.QuotaExceededException" />
        <element api="T:System.ServiceModel.AddressFilterMode" />
        <element api="T:System.ServiceModel.XPathMessageQuery" />
        <element api="T:System.ServiceModel.DeadLetterQueue" />
        <element api="T:System.ServiceModel.MsmqAuthenticationMode" />
        <element api="T:System.ServiceModel.MsmqBindingBase" />
        <element api="T:System.ServiceModel.MsmqEncryptionAlgorithm" />
        <element api="T:System.ServiceModel.MsmqException" />
        <element api="T:System.ServiceModel.MsmqSecureHashAlgorithm" />
        <element api="T:System.ServiceModel.MsmqPoisonMessageException" />
        <element api="T:System.ServiceModel.PoisonMessageException" />
        <element api="T:System.ServiceModel.ReceiveErrorHandling" />
        <element api="T:System.ServiceModel.QueueTransferProtocol" />
        <element api="T:System.ServiceModel.ReliableMessagingVersion" />
        <element api="T:System.ServiceModel.EndpointIdentity" />
        <element api="T:System.ServiceModel.SpnEndpointIdentity" />
        <element api="T:System.ServiceModel.UpnEndpointIdentity" />
        <element api="T:System.ServiceModel.DnsEndpointIdentity" />
        <element api="T:System.ServiceModel.RsaEndpointIdentity" />
        <element api="T:System.ServiceModel.X509CertificateEndpointIdentity" />
        <element api="T:System.ServiceModel.MessageSecurityVersion" />
        <element api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />
        <element api="T:System.ServiceModel.ServiceAuthorizationManager" />
        <element api="T:System.ServiceModel.ServiceAuthenticationManager" />
        <element api="T:System.ServiceModel.ServiceSecurityContext" />
        <element api="T:System.ServiceModel.AuditLevel" />
        <element api="T:System.ServiceModel.AuditLogLocation" />
        <element api="T:System.ServiceModel.DeliveryRequirementsAttribute" />
        <element api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" />
        <element api="T:System.ServiceModel.CallbackBehaviorAttribute" />
        <element api="T:System.ServiceModel.DataContractFormatAttribute" />
        <element api="T:System.ServiceModel.FaultContractAttribute" />
        <element api="T:System.ServiceModel.ImpersonationOption" />
        <element api="T:System.ServiceModel.MessageBodyMemberAttribute" />
        <element api="T:System.ServiceModel.MessageContractAttribute" />
        <element api="T:System.ServiceModel.MessageContractMemberAttribute" />
        <element api="T:System.ServiceModel.MessageHeaderArrayAttribute" />
        <element api="T:System.ServiceModel.MessageHeaderAttribute" />
        <element api="T:System.ServiceModel.MessageParameterAttribute" />
        <element api="T:System.ServiceModel.MessagePropertyAttribute" />
        <element api="T:System.ServiceModel.OperationBehaviorAttribute" />
        <element api="T:System.ServiceModel.OperationContractAttribute" />
        <element api="T:System.ServiceModel.ReceiveContextEnabledAttribute" />
        <element api="T:System.ServiceModel.ServiceBehaviorAttribute" />
        <element api="T:System.ServiceModel.ServiceContractAttribute" />
        <element api="T:System.ServiceModel.ServiceKnownTypeAttribute" />
        <element api="T:System.ServiceModel.SessionMode" />
        <element api="T:System.ServiceModel.XmlSerializerFormatAttribute" />
        <element api="T:System.ServiceModel.CacheSetting" />
        <element api="T:System.ServiceModel.ChannelFactory" />
        <element api="T:System.ServiceModel.ChannelFactory`1" />
        <element api="T:System.ServiceModel.ConcurrencyMode" />
        <element api="T:System.ServiceModel.DuplexChannelFactory`1" />
        <element api="T:System.ServiceModel.ExceptionDetail" />
        <element api="T:System.ServiceModel.ExtensionCollection`1" />
        <element api="T:System.ServiceModel.IDuplexContextChannel" />
        <element api="T:System.ServiceModel.IExtensibleObject`1" />
        <element api="T:System.ServiceModel.IExtension`1" />
        <element api="T:System.ServiceModel.IExtensionCollection`1" />
        <element api="T:System.ServiceModel.InvalidMessageContractException" />
        <element api="T:System.ServiceModel.InstanceContextMode" />
        <element api="T:System.ServiceModel.IClientChannel" />
        <element api="T:System.ServiceModel.IContextChannel" />
        <element api="T:System.ServiceModel.IServiceChannel" />
        <element api="T:System.ServiceModel.ReleaseInstanceMode" />
        <element api="T:System.ServiceModel.ServiceHostBase" />
        <element api="T:System.ServiceModel.ServiceHost" />
        <element api="T:System.ServiceModel.ServiceConfiguration" />
        <element api="T:System.ServiceModel.OperationFormatUse" />
        <element api="T:System.ServiceModel.OperationFormatStyle" />
        <element api="T:System.ServiceModel.UriSchemeKeyedCollection" />
        <element api="T:System.ServiceModel.DuplexClientBase`1" />
        <element api="T:System.ServiceModel.FaultException" />
        <element api="T:System.ServiceModel.FaultException`1" />
        <element api="T:System.ServiceModel.MessageHeaderException" />
        <element api="T:System.ServiceModel.OperationContext" />
        <element api="T:System.ServiceModel.OperationContextScope" />
        <element api="T:System.ServiceModel.ClientBase`1" />
        <element api="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />
        <element api="T:System.ServiceModel.ClientBase`1.EndOperationDelegate" />
        <element api="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" />
        <element api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
        <element api="T:System.ServiceModel.InstanceContext" />
        <element api="T:System.ServiceModel.FaultImportOptions" />
        <element api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" />
        <element api="T:System.ServiceModel.MessageHeader`1" />
        <element api="T:System.ServiceModel.EndpointAddress" />
        <element api="T:System.ServiceModel.EndpointAddressBuilder" />
        <element api="T:System.ServiceModel.EndpointAddress10" />
        <element api="T:System.ServiceModel.EndpointAddressAugust2004" />
        <element api="T:System.ServiceModel.EnvelopeVersion" />
        <element api="T:System.ServiceModel.FaultCode" />
        <element api="T:System.ServiceModel.FaultReason" />
        <element api="T:System.ServiceModel.FaultReasonText" />
        <element api="T:System.ServiceModel.HttpBindingBase" />
        <element api="T:System.ServiceModel.BasicHttpBinding" />
        <element api="T:System.ServiceModel.BasicHttpsBinding" />
        <element api="T:System.ServiceModel.BasicHttpsSecurity" />
        <element api="T:System.ServiceModel.BasicHttpsSecurityMode" />
        <element api="T:System.ServiceModel.BasicHttpMessageCredentialType" />
        <element api="T:System.ServiceModel.BasicHttpMessageSecurity" />
        <element api="T:System.ServiceModel.BasicHttpSecurity" />
        <element api="T:System.ServiceModel.BasicHttpSecurityMode" />
        <element api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" />
        <element api="T:System.ServiceModel.HttpClientCredentialType" />
        <element api="T:System.ServiceModel.HttpProxyCredentialType" />
        <element api="T:System.ServiceModel.HttpTransportSecurity" />
        <element api="T:System.ServiceModel.MessageCredentialType" />
        <element api="T:System.ServiceModel.MessageSecurityOverTcp" />
        <element api="T:System.ServiceModel.MessageSecurityOverHttp" />
        <element api="T:System.ServiceModel.MessageSecurityOverMsmq" />
        <element api="T:System.ServiceModel.MsmqTransportSecurity" />
        <element api="T:System.ServiceModel.NamedPipeTransportSecurity" />
        <element api="T:System.ServiceModel.NetHttpBinding" />
        <element api="T:System.ServiceModel.NetHttpMessageEncoding" />
        <element api="T:System.ServiceModel.NetHttpsBinding" />
        <element api="T:System.ServiceModel.NetMsmqBinding" />
        <element api="T:System.ServiceModel.NetMsmqSecurity" />
        <element api="T:System.ServiceModel.NetMsmqSecurityMode" />
        <element api="T:System.ServiceModel.NetNamedPipeBinding" />
        <element api="T:System.ServiceModel.NetNamedPipeSecurity" />
        <element api="T:System.ServiceModel.NetNamedPipeSecurityMode" />
        <element api="T:System.ServiceModel.NetPeerTcpBinding" />
        <element api="T:System.ServiceModel.NetTcpBinding" />
        <element api="T:System.ServiceModel.NetTcpSecurity" />
        <element api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" />
        <element api="T:System.ServiceModel.SecurityMode" />
        <element api="T:System.ServiceModel.TcpClientCredentialType" />
        <element api="T:System.ServiceModel.TcpTransportSecurity" />
        <element api="T:System.ServiceModel.ReliableSession" />
        <element api="T:System.ServiceModel.OptionalReliableSession" />
        <element api="T:System.ServiceModel.WSMessageEncoding" />
        <element api="T:System.ServiceModel.WSFederationHttpBinding" />
        <element api="T:System.ServiceModel.WS2007FederationHttpBinding" />
        <element api="T:System.ServiceModel.WSFederationHttpSecurity" />
        <element api="T:System.ServiceModel.WSFederationHttpSecurityMode" />
        <element api="T:System.ServiceModel.WSHttpBinding" />
        <element api="T:System.ServiceModel.WS2007HttpBinding" />
        <element api="T:System.ServiceModel.WSHttpBindingBase" />
        <element api="T:System.ServiceModel.WSDualHttpBinding" />
        <element api="T:System.ServiceModel.WSDualHttpSecurity" />
        <element api="T:System.ServiceModel.WSDualHttpSecurityMode" />
        <element api="T:System.ServiceModel.WSHttpSecurity" />
        <element api="T:System.ServiceModel.IOnlineStatus" />
        <element api="T:System.ServiceModel.PeerHopCountAttribute" />
        <element api="T:System.ServiceModel.PeerMessageOrigination" />
        <element api="T:System.ServiceModel.PeerMessagePropagation" />
        <element api="T:System.ServiceModel.PeerMessagePropagationFilter" />
        <element api="T:System.ServiceModel.PeerNode" />
        <element api="T:System.ServiceModel.PeerNodeAddress" />
        <element api="T:System.ServiceModel.PeerResolver" />
        <element api="T:System.ServiceModel.PeerSecuritySettings" />
        <element api="T:System.ServiceModel.PeerTransportCredentialType" />
        <element api="T:System.ServiceModel.PeerTransportSecuritySettings" />
        <element api="T:System.ServiceModel.TransactionFlowOption" />
        <element api="T:System.ServiceModel.TransactionFlowAttribute" />
        <element api="T:System.ServiceModel.TransactionProtocol" />
        <element api="T:System.ServiceModel.ExceptionMapper" />
        <element api="T:System.ServiceModel.ServiceHostingEnvironment" />
        <element api="T:System.ServiceModel.Endpoint" />
        <element api="T:System.ServiceModel.EndpointIdentityExtension" />
        <element api="T:System.ServiceModel.MessageQuerySet" />
        <element api="T:System.ServiceModel.CorrelationActionMessageFilter" />
        <element api="T:System.ServiceModel.CorrelationQuery" />
        <element api="T:System.ServiceModel.UdpBinding" />
        <element api="T:System.ServiceModel.WebHttpBinding" />
        <element api="T:System.ServiceModel.WebHttpSecurity" />
        <element api="T:System.ServiceModel.WebHttpSecurityMode" />
        <element api="T:System.ServiceModel.WorkflowServiceHost" />
      </elements>
    </api>
    <api id="T:System.ServiceModel.ActionNotSupportedException">
      <topicdata group="api" />
      <apidata name="ActionNotSupportedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.ActionNotSupportedException.#ctor">
          <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
          <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ActionNotSupportedException">
      <topicdata name="ActionNotSupportedException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ActionNotSupportedException" />
      <apidata name="ActionNotSupportedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ActionNotSupportedException">
      <topicdata name="ActionNotSupportedException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ActionNotSupportedException" />
      <apidata name="ActionNotSupportedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ActionNotSupportedException">
      <topicdata name="ActionNotSupportedException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ActionNotSupportedException" />
      <apidata name="ActionNotSupportedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ActionNotSupportedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor" />
        <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ActionNotSupportedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ActionNotSupportedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.AddressAccessDeniedException">
      <topicdata group="api" />
      <apidata name="AddressAccessDeniedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor">
          <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
          <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.AddressAccessDeniedException">
      <topicdata name="AddressAccessDeniedException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.AddressAccessDeniedException" />
      <apidata name="AddressAccessDeniedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.AddressAccessDeniedException">
      <topicdata name="AddressAccessDeniedException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.AddressAccessDeniedException" />
      <apidata name="AddressAccessDeniedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.AddressAccessDeniedException">
      <topicdata name="AddressAccessDeniedException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.AddressAccessDeniedException" />
      <apidata name="AddressAccessDeniedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor" />
        <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAccessDeniedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAccessDeniedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.AddressAlreadyInUseException">
      <topicdata group="api" />
      <apidata name="AddressAlreadyInUseException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor">
          <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
          <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.AddressAlreadyInUseException">
      <topicdata name="AddressAlreadyInUseException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.AddressAlreadyInUseException" />
      <apidata name="AddressAlreadyInUseException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.AddressAlreadyInUseException">
      <topicdata name="AddressAlreadyInUseException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.AddressAlreadyInUseException" />
      <apidata name="AddressAlreadyInUseException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.AddressAlreadyInUseException">
      <topicdata name="AddressAlreadyInUseException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.AddressAlreadyInUseException" />
      <apidata name="AddressAlreadyInUseException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
        <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAlreadyInUseException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.AddressAlreadyInUseException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.AddressFilterMode">
      <topicdata group="api" />
      <apidata name="AddressFilterMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.AddressFilterMode.Exact" />
        <element api="F:System.ServiceModel.AddressFilterMode.Prefix" />
        <element api="F:System.ServiceModel.AddressFilterMode.Any" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AddressFilterMode.Any">
      <topicdata group="api" notopic="" />
      <apidata name="Any" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AddressFilterMode.Exact">
      <topicdata group="api" notopic="" />
      <apidata name="Exact" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AddressFilterMode.Prefix">
      <topicdata group="api" notopic="" />
      <apidata name="Prefix" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.AuditLevel">
      <topicdata group="api" />
      <apidata name="AuditLevel" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.AuditLevel.None" />
        <element api="F:System.ServiceModel.AuditLevel.Success" />
        <element api="F:System.ServiceModel.AuditLevel.Failure" />
        <element api="F:System.ServiceModel.AuditLevel.SuccessOrFailure" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLevel.Failure">
      <topicdata group="api" notopic="" />
      <apidata name="Failure" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLevel.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLevel.Success">
      <topicdata group="api" notopic="" />
      <apidata name="Success" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLevel.SuccessOrFailure">
      <topicdata group="api" notopic="" />
      <apidata name="SuccessOrFailure" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLevel" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.AuditLogLocation">
      <topicdata group="api" />
      <apidata name="AuditLogLocation" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.AuditLogLocation.Default" />
        <element api="F:System.ServiceModel.AuditLogLocation.Application" />
        <element api="F:System.ServiceModel.AuditLogLocation.Security" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLogLocation.Application">
      <topicdata group="api" notopic="" />
      <apidata name="Application" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLogLocation.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.AuditLogLocation.Security">
      <topicdata group="api" notopic="" />
      <apidata name="Security" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.AuditLogLocation" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpBinding">
      <topicdata group="api" />
      <apidata name="BasicHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpBinding.#ctor">
          <element api="M:System.ServiceModel.BasicHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
          <element api="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpBinding.Security" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpBinding">
      <topicdata name="BasicHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpBinding" />
      <apidata name="BasicHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpBinding">
      <topicdata name="BasicHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpBinding" />
      <apidata name="BasicHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpBinding.Security" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.BasicHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.BasicHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
        <element api="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.BasicHttpBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpBinding.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.BasicHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpContextBinding">
      <topicdata group="api" />
      <apidata name="BasicHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.#ctor">
          <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor" />
          <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
          <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpContextBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpBinding.Security" />
        <element api="P:System.ServiceModel.BasicHttpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpContextBinding">
      <topicdata name="BasicHttpContextBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpContextBinding" />
      <apidata name="BasicHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpContextBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpContextBinding">
      <topicdata name="BasicHttpContextBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpContextBinding" />
      <apidata name="BasicHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpBinding.Security" />
        <element api="P:System.ServiceModel.BasicHttpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.BasicHttpContextBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor" />
        <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
        <element api="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpContextBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpContextBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpContextBinding.ContextManagementEnabled">
      <topicdata group="api" />
      <apidata name="ContextManagementEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContextManagementEnabled" />
      <setter name="set_ContextManagementEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.BasicHttpContextBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
          <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <topicdata group="api" />
      <apidata name="BasicHttpMessageCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName" />
        <element api="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpMessageCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <topicdata group="api" notopic="" />
      <apidata name="UserName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpMessageCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpMessageSecurity">
      <topicdata group="api" />
      <apidata name="BasicHttpMessageSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor" />
        <element api="P:System.ServiceModel.BasicHttpMessageSecurity.AlgorithmSuite" />
        <element api="P:System.ServiceModel.BasicHttpMessageSecurity.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpMessageSecurity">
      <topicdata name="BasicHttpMessageSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpMessageSecurity" />
      <apidata name="BasicHttpMessageSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpMessageSecurity">
      <topicdata name="BasicHttpMessageSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpMessageSecurity" />
      <apidata name="BasicHttpMessageSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpMessageSecurity.AlgorithmSuite" />
        <element api="P:System.ServiceModel.BasicHttpMessageSecurity.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpMessageSecurity.AlgorithmSuite">
      <topicdata group="api" />
      <apidata name="AlgorithmSuite" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AlgorithmSuite" />
      <setter name="set_AlgorithmSuite" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpMessageSecurity.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpMessageCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpsBinding">
      <topicdata group="api" />
      <apidata name="BasicHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.#ctor">
          <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor" />
          <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)" />
          <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpsBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="P:System.ServiceModel.BasicHttpsBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpsBinding.Security" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpsBinding">
      <topicdata name="BasicHttpsBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpsBinding" />
      <apidata name="BasicHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.BasicHttpsBinding.CreateBindingElements" />
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.BasicHttpsBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpsBinding">
      <topicdata name="BasicHttpsBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpsBinding" />
      <apidata name="BasicHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpsBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.BasicHttpsBinding.Security" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.BasicHttpsBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor" />
        <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)" />
        <element api="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.BasicHttpsBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpsBinding.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.BasicHttpsBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpSecurity">
      <topicdata group="api" />
      <apidata name="BasicHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.BasicHttpSecurity.#ctor" />
        <element api="P:System.ServiceModel.BasicHttpSecurity.Message" />
        <element api="P:System.ServiceModel.BasicHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.BasicHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpSecurity">
      <topicdata name="BasicHttpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpSecurity" />
      <apidata name="BasicHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpSecurity">
      <topicdata name="BasicHttpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpSecurity" />
      <apidata name="BasicHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpSecurity.Message" />
        <element api="P:System.ServiceModel.BasicHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.BasicHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpSecurityMode">
      <topicdata group="api" />
      <apidata name="BasicHttpSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.BasicHttpSecurityMode.None" />
        <element api="F:System.ServiceModel.BasicHttpSecurityMode.Transport" />
        <element api="F:System.ServiceModel.BasicHttpSecurityMode.Message" />
        <element api="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />
        <element api="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpSecurityMode.Message">
      <topicdata group="api" notopic="" />
      <apidata name="Message" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <topicdata group="api" notopic="" />
      <apidata name="TransportCredentialOnly" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <topicdata group="api" notopic="" />
      <apidata name="TransportWithMessageCredential" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpsSecurity">
      <topicdata group="api" />
      <apidata name="BasicHttpsSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.BasicHttpsSecurity.#ctor" />
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Message" />
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Mode" />
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.BasicHttpsSecurity">
      <topicdata name="BasicHttpsSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.BasicHttpsSecurity" />
      <apidata name="BasicHttpsSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.BasicHttpsSecurity">
      <topicdata name="BasicHttpsSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.BasicHttpsSecurity" />
      <apidata name="BasicHttpsSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.BasicHttpsSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Message" />
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Mode" />
        <element api="P:System.ServiceModel.BasicHttpsSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.BasicHttpsSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpsSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpMessageSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpsSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.BasicHttpsSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.BasicHttpsSecurityMode">
      <topicdata group="api" />
      <apidata name="BasicHttpsSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.BasicHttpsSecurityMode.Transport" />
        <element api="F:System.ServiceModel.BasicHttpsSecurityMode.TransportWithMessageCredential" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpsSecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.BasicHttpsSecurityMode.TransportWithMessageCredential">
      <topicdata group="api" notopic="" />
      <apidata name="TransportWithMessageCredential" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CacheSetting">
      <topicdata group="api" />
      <apidata name="CacheSetting" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.CacheSetting.Default" />
        <element api="F:System.ServiceModel.CacheSetting.AlwaysOn" />
        <element api="F:System.ServiceModel.CacheSetting.AlwaysOff" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CacheSetting.AlwaysOff">
      <topicdata group="api" notopic="" />
      <apidata name="AlwaysOff" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CacheSetting.AlwaysOn">
      <topicdata group="api" notopic="" />
      <apidata name="AlwaysOn" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CacheSetting.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CallbackBehaviorAttribute">
      <topicdata group="api" />
      <apidata name="CallbackBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IEndpointBehavior" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.MaxItemsInObjectGraph" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionIsolationLevel" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionTimeout" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.CallbackBehaviorAttribute">
      <topicdata name="CallbackBehaviorAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CallbackBehaviorAttribute" />
      <apidata name="CallbackBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
        <element api="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CallbackBehaviorAttribute">
      <topicdata name="CallbackBehaviorAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CallbackBehaviorAttribute" />
      <apidata name="CallbackBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.MaxItemsInObjectGraph" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionIsolationLevel" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionTimeout" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext" />
        <element api="P:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown">
      <topicdata group="api" />
      <apidata name="AutomaticSessionShutdown" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AutomaticSessionShutdown" />
      <setter name="set_AutomaticSessionShutdown" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode">
      <topicdata group="api" />
      <apidata name="ConcurrencyMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConcurrencyMode" />
      <setter name="set_ConcurrencyMode" />
      <returns>
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject">
      <topicdata group="api" />
      <apidata name="IgnoreExtensionDataObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IgnoreExtensionDataObject" />
      <setter name="set_IgnoreExtensionDataObject" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults">
      <topicdata group="api" />
      <apidata name="IncludeExceptionDetailInFaults" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IncludeExceptionDetailInFaults" />
      <setter name="set_IncludeExceptionDetailInFaults" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.MaxItemsInObjectGraph">
      <topicdata group="api" />
      <apidata name="MaxItemsInObjectGraph" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxItemsInObjectGraph" />
      <setter name="set_MaxItemsInObjectGraph" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" eiiName="IEndpointBehavior.AddBindingParameters" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="serviceEndpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IEndpointBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <topicdata group="api" eiiName="IEndpointBehavior.ApplyClientBehavior" />
      <apidata name="ApplyClientBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="serviceEndpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="clientRuntime">
          <type api="T:System.ServiceModel.Dispatcher.ClientRuntime" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
          <type api="T:System.ServiceModel.Description.IEndpointBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <topicdata group="api" eiiName="IEndpointBehavior.ApplyDispatchBehavior" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="serviceEndpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="endpointDispatcher">
          <type api="T:System.ServiceModel.Dispatcher.EndpointDispatcher" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
          <type api="T:System.ServiceModel.Description.IEndpointBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" eiiName="IEndpointBehavior.Validate" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="serviceEndpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
          <type api="T:System.ServiceModel.Description.IEndpointBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionIsolationLevel">
      <topicdata group="api" />
      <apidata name="TransactionIsolationLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionIsolationLevel" />
      <setter name="set_TransactionIsolationLevel" />
      <returns>
        <type api="T:System.Transactions.IsolationLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionTimeout">
      <topicdata group="api" />
      <apidata name="TransactionTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionTimeout" />
      <setter name="set_TransactionTimeout" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext">
      <topicdata group="api" />
      <apidata name="UseSynchronizationContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseSynchronizationContext" />
      <setter name="set_UseSynchronizationContext" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand">
      <topicdata group="api" />
      <apidata name="ValidateMustUnderstand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ValidateMustUnderstand" />
      <setter name="set_ValidateMustUnderstand" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CallbackBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ChannelFactory">
      <topicdata group="api" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IChannelFactory" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.#ctor" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateDescription" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ChannelFactory.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.ChannelFactory.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ChannelFactory">
      <topicdata name="ChannelFactory" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ChannelFactory" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateDescription" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ChannelFactory.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.ChannelFactory.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ChannelFactory">
      <topicdata name="ChannelFactory" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ChannelFactory" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ChannelFactory">
      <topicdata name="ChannelFactory" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ChannelFactory" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint">
      <topicdata name="InitializeEndpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="InitializeEndpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <topicdata group="api" />
      <apidata name="ApplyConfiguration" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <topicdata group="api" />
      <apidata name="CreateDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <topicdata group="api" />
      <apidata name="CreateFactory" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ChannelFactory.Credentials">
      <topicdata group="api" />
      <apidata name="Credentials" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Credentials" />
      <returns>
        <type api="T:System.ServiceModel.Description.ClientCredentials" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <topicdata group="api" />
      <apidata name="DefaultCloseTimeout" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_DefaultCloseTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <topicdata group="api" />
      <apidata name="DefaultOpenTimeout" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_DefaultOpenTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ChannelFactory.Endpoint">
      <topicdata group="api" />
      <apidata name="Endpoint" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Endpoint" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <topicdata group="api" />
      <apidata name="EnsureOpened" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <topicdata group="api" />
      <apidata name="GetProperty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <template name="T" index="0" api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
          <type api="T:System.ServiceModel.Channels.IChannelFactory" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="InitializeEndpoint" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name="InitializeEndpoint" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="InitializeEndpoint" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ChannelFactory.InitializeEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnAbort">
      <topicdata group="api" />
      <apidata name="OnAbort" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="OnBeginClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="OnBeginOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="OnClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="OnEndClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="OnEndOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="OnOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnOpened">
      <topicdata group="api" />
      <apidata name="OnOpened" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.OnOpening">
      <topicdata group="api" />
      <apidata name="OnOpening" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <topicdata group="api" eiiName="IDisposable.Dispose" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ChannelFactory`1">
      <topicdata group="api" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ChannelFactory`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.Security.WSTrustChannelFactory" ref="true" />
          <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
          <type api="T:System.ServiceModel.Configuration.ConfigurationChannelFactory`1" ref="true" />
          <type api="T:System.ServiceModel.Web.WebChannelFactory`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TChannel" />
      </templates>
      <implements>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
          </specialization>
        </type>
        <type api="T:System.ServiceModel.Channels.IChannelFactory" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.#ctor">
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.String)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateDescription" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ChannelFactory`1">
      <topicdata name="ChannelFactory" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ChannelFactory`1" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ChannelFactory`1.#ctor" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.String)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateDescription" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ChannelFactory`1.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.ChannelFactory`1.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ChannelFactory`1">
      <topicdata name="ChannelFactory" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ChannelFactory`1" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ChannelFactory`1.#ctor" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ChannelFactory`1">
      <topicdata name="ChannelFactory" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ChannelFactory`1" />
      <apidata name="ChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ChannelFactory`1.#ctor" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <topicdata name="CreateChannel" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken">
      <topicdata name="CreateChannelWithActAsToken" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateChannelWithActAsToken" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken">
      <topicdata name="CreateChannelWithIssuedToken" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateChannelWithIssuedToken" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken">
      <topicdata name="CreateChannelWithOnBehalfOfToken" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateChannelWithOnBehalfOfToken" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="channelType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
          <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
          <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.String)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="family" static="true" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithActAsToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="actAsToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithActAsToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="actAsToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithActAsToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="actAsToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithIssuedToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="issuedToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithIssuedToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="issuedToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithIssuedToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="issuedToken">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithOnBehalfOfToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="onBehalfOf">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithOnBehalfOfToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="onBehalfOf">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannelWithOnBehalfOfToken" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="onBehalfOf">
          <type api="T:System.IdentityModel.Tokens.SecurityToken" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <topicdata group="api" />
      <apidata name="CreateDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ChannelFactory.CreateDescription">
          <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ChannelTerminatedException">
      <topicdata group="api" />
      <apidata name="ChannelTerminatedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.ChannelTerminatedException.#ctor">
          <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
          <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ChannelTerminatedException">
      <topicdata name="ChannelTerminatedException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ChannelTerminatedException" />
      <apidata name="ChannelTerminatedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ChannelTerminatedException">
      <topicdata name="ChannelTerminatedException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ChannelTerminatedException" />
      <apidata name="ChannelTerminatedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ChannelTerminatedException">
      <topicdata name="ChannelTerminatedException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ChannelTerminatedException" />
      <apidata name="ChannelTerminatedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ChannelTerminatedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor" />
        <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelTerminatedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ChannelTerminatedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientBase`1">
      <topicdata group="api" />
      <apidata name="ClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
          <type api="T:System.ServiceModel.Activities.WorkflowControlClient" ref="true" />
          <type api="T:System.ServiceModel.Activities.WorkflowUpdateableControlClient" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <implements>
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ClientBase`1.#ctor">
          <element api="M:System.ServiceModel.ClientBase`1.#ctor" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.Abort" />
        <element api="M:System.ServiceModel.ClientBase`1.Close" />
        <element api="M:System.ServiceModel.ClientBase`1.CreateChannel" />
        <element api="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1" />
        <element api="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.Open" />
        <element api="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
        <element api="P:System.ServiceModel.ClientBase`1.CacheSetting" />
        <element api="P:System.ServiceModel.ClientBase`1.Channel" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelFactory" />
        <element api="P:System.ServiceModel.ClientBase`1.ClientCredentials" />
        <element api="P:System.ServiceModel.ClientBase`1.Endpoint" />
        <element api="P:System.ServiceModel.ClientBase`1.InnerChannel" />
        <element api="P:System.ServiceModel.ClientBase`1.State" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ClientBase`1">
      <topicdata name="ClientBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ClientBase`1" />
      <apidata name="ClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientBase`1.Abort" />
        <element api="M:System.ServiceModel.ClientBase`1.Close" />
        <element api="M:System.ServiceModel.ClientBase`1.CreateChannel" />
        <element api="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1" />
        <element api="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.Open" />
        <element api="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ClientBase`1">
      <topicdata name="ClientBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ClientBase`1" />
      <apidata name="ClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:System.ServiceModel.ClientBase`1.CacheSetting" />
        <element api="P:System.ServiceModel.ClientBase`1.Channel" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelFactory" />
        <element api="P:System.ServiceModel.ClientBase`1.ClientCredentials" />
        <element api="P:System.ServiceModel.ClientBase`1.Endpoint" />
        <element api="P:System.ServiceModel.ClientBase`1.InnerChannel" />
        <element api="P:System.ServiceModel.ClientBase`1.State" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ClientBase`1">
      <topicdata name="ClientBase" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ClientBase`1" />
      <apidata name="ClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.#ctor" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
      <topicdata name="BeginClose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
      <topicdata name="BeginOpen" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ClientBase`1.#ctor" />
      <parameters>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.Abort">
      <topicdata group="api" />
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Abort">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.CacheSetting">
      <topicdata group="api" />
      <apidata name="CacheSetting" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CacheSetting" />
      <setter name="set_CacheSetting" />
      <returns>
        <type api="T:System.ServiceModel.CacheSetting" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.Channel">
      <topicdata group="api" />
      <apidata name="Channel" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Channel" />
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ClientBase`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <topicdata group="api" />
      <apidata name="ChannelFactory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ChannelFactory" />
      <returns>
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="T:System.ServiceModel.ClientBase`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <topicdata group="api" />
      <apidata name="ClientCredentials" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ClientCredentials" />
      <returns>
        <type api="T:System.ServiceModel.Description.ClientCredentials" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.Close">
      <topicdata group="api" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Close">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.ClientBase`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI">
      <topicdata group="api" />
      <apidata name="DisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.Endpoint">
      <topicdata group="api" />
      <apidata name="Endpoint" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Endpoint" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <topicdata group="api" />
      <apidata name="GetDefaultValueForInitialization" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <template name="T" index="0" api="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <topicdata group="api" />
      <apidata name="InnerChannel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InnerChannel" />
      <returns>
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="InvokeAsync" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="beginOperationDelegate">
          <type api="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" ref="true">
            <type api="T:System.ServiceModel.ClientBase`1" ref="true">
              <specialization>
                <template name="TChannel" index="0" api="T:System.ServiceModel.ClientBase`1" />
              </specialization>
            </type>
          </type>
        </parameter>
        <parameter name="inValues">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="endOperationDelegate">
          <type api="T:System.ServiceModel.ClientBase`1.EndOperationDelegate" ref="true">
            <type api="T:System.ServiceModel.ClientBase`1" ref="true">
              <specialization>
                <template name="TChannel" index="0" api="T:System.ServiceModel.ClientBase`1" />
              </specialization>
            </type>
          </type>
        </parameter>
        <parameter name="operationCompletedCallback">
          <type api="T:System.Threading.SendOrPostCallback" ref="true" />
        </parameter>
        <parameter name="userState">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.Open">
      <topicdata group="api" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Open">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_State" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.ICommunicationObject.State">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose">
      <topicdata group="api" eiiName="IDisposable.Dispose" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginClose" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginClose" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginOpen" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginOpen" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <topicdata group="api" eiiName="ICommunicationObject.Close" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <topicdata group="api" eiiName="ICommunicationObject.Closed" />
      <apidata name="Closed" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Closed" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Closed" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Closed">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <topicdata group="api" eiiName="ICommunicationObject.Closing" />
      <apidata name="Closing" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Closing" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Closing" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Closing">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <topicdata group="api" eiiName="ICommunicationObject.EndClose" />
      <apidata name="EndClose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <topicdata group="api" eiiName="ICommunicationObject.EndOpen" />
      <apidata name="EndOpen" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <topicdata group="api" eiiName="ICommunicationObject.Faulted" />
      <apidata name="Faulted" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Faulted" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Faulted" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Faulted">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <topicdata group="api" eiiName="ICommunicationObject.Open" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <topicdata group="api" eiiName="ICommunicationObject.Opened" />
      <apidata name="Opened" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Opened" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Opened" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Opened">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <topicdata group="api" eiiName="ICommunicationObject.Opening" />
      <apidata name="Opening" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Opening" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Opening" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Opening">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <topicdata group="api" />
      <apidata name="BeginOperationDelegate" group="type" subgroup="delegate" />
      <typedata visibility="family" sealed="true" serializable="false" />
      <parameters>
        <parameter name="inValues">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="asyncCallback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <topicdata group="api" />
      <apidata name="ChannelBase" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <implements>
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
        </element>
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{System#ServiceModel#IContextChannel}#Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <topicdata name="ChannelBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      <apidata name="ChannelBase" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open" />
          <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <topicdata name="ChannelBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      <apidata name="ChannelBase" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{System#ServiceModel#IContextChannel}#Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <topicdata name="ChannelBase" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      <apidata name="ChannelBase" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend">
      <topicdata name="BeginSend" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginSend" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send">
      <topicdata name="Send" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Send" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest">
      <topicdata name="BeginRequest" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginRequest" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request">
      <topicdata name="Request" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Request" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
      <topicdata name="BeginClose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
      <topicdata name="BeginOpen" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <topicdata name="Close" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Close" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <topicdata name="Open" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Open" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open" />
        <element api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <parameters>
        <parameter name="client">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true">
            <specialization>
              <template name="T" index="1" api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginInvoke" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="EndInvoke" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <topicdata group="api" eiiName="IDisposable.Dispose" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <topicdata group="api" eiiName="IChannel.GetProperty" />
      <apidata name="GetProperty" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <templates>
        <template name="TProperty">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <template name="TProperty" index="0" api="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
          <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="IOutputChannel.BeginSend" />
      <apidata name="BeginSend" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="IOutputChannel.BeginSend" />
      <apidata name="BeginSend" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <topicdata group="api" eiiName="IOutputChannel.EndSend" />
      <apidata name="EndSend" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <topicdata group="api" eiiName="IOutputChannel.RemoteAddress" />
      <apidata name="RemoteAddress" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IOutputChannel.RemoteAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <topicdata group="api" eiiName="IOutputChannel.Send" />
      <apidata name="Send" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <topicdata group="api" eiiName="IOutputChannel.Send" />
      <apidata name="Send" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <topicdata group="api" eiiName="IOutputChannel.Via" />
      <apidata name="Via" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IOutputChannel.Via" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IOutputChannel.Via">
          <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="IRequestChannel.BeginRequest" />
      <apidata name="BeginRequest" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="IRequestChannel.BeginRequest" />
      <apidata name="BeginRequest" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <topicdata group="api" eiiName="IRequestChannel.EndRequest" />
      <apidata name="EndRequest" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.Message" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <topicdata group="api" eiiName="IRequestChannel.RemoteAddress" />
      <apidata name="RemoteAddress" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <topicdata group="api" eiiName="IRequestChannel.Request" />
      <apidata name="Request" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.Message" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <topicdata group="api" eiiName="IRequestChannel.Request" />
      <apidata name="Request" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.Message" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <topicdata group="api" eiiName="IRequestChannel.Via" />
      <apidata name="Via" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IRequestChannel.Via" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IRequestChannel.Via">
          <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <topicdata group="api" eiiName="IClientChannel.AllowInitializationUI" />
      <apidata name="AllowInitializationUI" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" set="true" />
      <getter name="get_System.ServiceModel.IClientChannel.AllowInitializationUI" />
      <setter name="set_System.ServiceModel.IClientChannel.AllowInitializationUI" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="IClientChannel.BeginDisplayInitializationUI" />
      <apidata name="BeginDisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <topicdata group="api" eiiName="IClientChannel.DidInteractiveInitialization" />
      <apidata name="DidInteractiveInitialization" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IClientChannel.DidInteractiveInitialization" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <topicdata group="api" eiiName="IClientChannel.DisplayInitializationUI" />
      <apidata name="DisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <topicdata group="api" eiiName="IClientChannel.EndDisplayInitializationUI" />
      <apidata name="EndDisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <topicdata group="api" eiiName="IClientChannel.UnknownMessageReceived" />
      <apidata name="UnknownMessageReceived" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.IClientChannel.UnknownMessageReceived" />
      <remover name="remove_System.ServiceModel.IClientChannel.UnknownMessageReceived" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <topicdata group="api" eiiName="IClientChannel.Via" />
      <apidata name="Via" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IClientChannel.Via" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IClientChannel.Via">
          <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <topicdata group="api" eiiName="ICommunicationObject.Abort" />
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Abort">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginClose" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginClose" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginOpen" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" eiiName="ICommunicationObject.BeginOpen" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <topicdata group="api" eiiName="ICommunicationObject.Close" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Close">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <topicdata group="api" eiiName="ICommunicationObject.Close" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <topicdata group="api" eiiName="ICommunicationObject.Closed" />
      <apidata name="Closed" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Closed" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Closed" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Closed">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <topicdata group="api" eiiName="ICommunicationObject.Closing" />
      <apidata name="Closing" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Closing" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Closing" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Closing">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <topicdata group="api" eiiName="ICommunicationObject.EndClose" />
      <apidata name="EndClose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <topicdata group="api" eiiName="ICommunicationObject.EndOpen" />
      <apidata name="EndOpen" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <topicdata group="api" eiiName="ICommunicationObject.Faulted" />
      <apidata name="Faulted" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Faulted" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Faulted" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Faulted">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <topicdata group="api" eiiName="ICommunicationObject.Open" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Open">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <topicdata group="api" eiiName="ICommunicationObject.Open" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <topicdata group="api" eiiName="ICommunicationObject.Opened" />
      <apidata name="Opened" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Opened" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Opened" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Opened">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <topicdata group="api" eiiName="ICommunicationObject.Opening" />
      <apidata name="Opening" group="member" subgroup="event" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_System.ServiceModel.ICommunicationObject.Opening" />
      <remover name="remove_System.ServiceModel.ICommunicationObject.Opening" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.ICommunicationObject.Opening">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <topicdata group="api" eiiName="ICommunicationObject.State" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.ICommunicationObject.State" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.ICommunicationObject.State">
          <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <topicdata group="api" eiiName="IContextChannel.AllowOutputBatching" />
      <apidata name="AllowOutputBatching" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" set="true" />
      <getter name="get_System.ServiceModel.IContextChannel.AllowOutputBatching" />
      <setter name="set_System.ServiceModel.IContextChannel.AllowOutputBatching" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <topicdata group="api" eiiName="IContextChannel.InputSession" />
      <apidata name="InputSession" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IContextChannel.InputSession" />
      <returns>
        <type api="T:System.ServiceModel.Channels.IInputSession" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.InputSession">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <topicdata group="api" eiiName="IContextChannel.LocalAddress" />
      <apidata name="LocalAddress" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IContextChannel.LocalAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.LocalAddress">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <topicdata group="api" eiiName="IContextChannel.OperationTimeout" />
      <apidata name="OperationTimeout" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" set="true" />
      <getter name="get_System.ServiceModel.IContextChannel.OperationTimeout" />
      <setter name="set_System.ServiceModel.IContextChannel.OperationTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.OperationTimeout">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <topicdata group="api" eiiName="IContextChannel.OutputSession" />
      <apidata name="OutputSession" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IContextChannel.OutputSession" />
      <returns>
        <type api="T:System.ServiceModel.Channels.IOutputSession" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.OutputSession">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <topicdata group="api" eiiName="IContextChannel.RemoteAddress" />
      <apidata name="RemoteAddress" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IContextChannel.RemoteAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.RemoteAddress">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <topicdata group="api" eiiName="IContextChannel.SessionId" />
      <apidata name="SessionId" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IContextChannel.SessionId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IContextChannel.SessionId">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{System#ServiceModel#IContextChannel}#Extensions">
      <topicdata group="api" eiiName="IExtensibleObject`1.Extensions" />
      <apidata name="Extensions" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.IContextChannel&gt;.Extensions" />
      <returns>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IExtensibleObject`1.Extensions">
          <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.IContextChannel" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <topicdata group="api" />
      <apidata name="EndOperationDelegate" group="type" subgroup="delegate" />
      <typedata visibility="family" sealed="true" serializable="false" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <topicdata group="api" />
      <apidata name="InvokeAsyncCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ComponentModel.AsyncCompletedEventArgs" ref="true" />
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <topicdata name="InvokeAsyncCompletedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" />
      <apidata name="InvokeAsyncCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <elements>
        <element api="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <topicdata name="InvokeAsyncCompletedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" />
      <apidata name="InvokeAsyncCompletedEventArgs" group="type" subgroup="class" />
      <typedata visibility="family" serializable="false" />
      <elements>
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
        <element api="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
        <element api="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <topicdata group="api" />
      <apidata name="Results" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Results" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:System.ServiceModel.ClientCredentialsSecurityTokenManager">
      <topicdata group="api" />
      <apidata name="ClientCredentialsSecurityTokenManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.IdentityModel.Selectors.SecurityTokenManager" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.#ctor(System.ServiceModel.Description.ClientCredentials)" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)" />
        <element api="Overload:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer">
          <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)" />
          <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion)" />
        </element>
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)" />
        <element api="P:System.ServiceModel.ClientCredentialsSecurityTokenManager.ClientCredentials" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ClientCredentialsSecurityTokenManager">
      <topicdata name="ClientCredentialsSecurityTokenManager" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />
      <apidata name="ClientCredentialsSecurityTokenManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)" />
        <element api="Overload:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer">
          <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)" />
          <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion)" />
        </element>
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ClientCredentialsSecurityTokenManager">
      <topicdata name="ClientCredentialsSecurityTokenManager" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />
      <apidata name="ClientCredentialsSecurityTokenManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ClientCredentialsSecurityTokenManager.ClientCredentials" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer">
      <topicdata name="CreateSecurityTokenSerializer" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateSecurityTokenSerializer" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)" />
        <element api="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="clientCredentials">
          <type api="T:System.ServiceModel.Description.ClientCredentials" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ClientCredentialsSecurityTokenManager.ClientCredentials">
      <topicdata group="api" />
      <apidata name="ClientCredentials" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ClientCredentials" />
      <returns>
        <type api="T:System.ServiceModel.Description.ClientCredentials" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <topicdata group="api" />
      <apidata name="CreateSecurityTokenAuthenticator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenManager" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="tokenRequirement">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenRequirement" ref="true" />
        </parameter>
        <parameter name="outOfBandTokenResolver" out="true">
          <referenceTo>
            <type api="T:System.IdentityModel.Selectors.SecurityTokenResolver" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <topicdata group="api" />
      <apidata name="CreateSecurityTokenProvider" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenManager" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="tokenRequirement">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenRequirement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IdentityModel.Selectors.SecurityTokenProvider" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <topicdata group="api" />
      <apidata name="CreateSecurityTokenSerializer" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenManager" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="version">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenVersion" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IdentityModel.Selectors.SecurityTokenSerializer" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion)">
      <topicdata group="api" />
      <apidata name="CreateSecurityTokenSerializer" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="version">
          <type api="T:System.ServiceModel.Security.SecurityVersion" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IdentityModel.Selectors.SecurityTokenSerializer" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <topicdata group="api" />
      <apidata name="IsIssuedSecurityTokenRequirement" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requirement">
          <type api="T:System.IdentityModel.Selectors.SecurityTokenRequirement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CommunicationException">
      <topicdata group="api" />
      <apidata name="CommunicationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.Security.MessageSecurityException" ref="true" />
          <type api="T:System.ServiceModel.Security.SecurityAccessDeniedException" ref="true" />
          <type api="T:System.ServiceModel.Security.SecurityNegotiationException" ref="true" />
          <type api="T:System.ServiceModel.ActionNotSupportedException" ref="true" />
          <type api="T:System.ServiceModel.AddressAlreadyInUseException" ref="true" />
          <type api="T:System.ServiceModel.AddressAccessDeniedException" ref="true" />
          <type api="T:System.ServiceModel.ChannelTerminatedException" ref="true" />
          <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
          <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
          <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
          <type api="T:System.ServiceModel.ProtocolException" ref="true" />
          <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
          <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
          <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
          <type api="T:System.ServiceModel.FaultException" ref="true" />
          <type api="T:System.ServiceModel.Dispatcher.MessageFilterException" ref="true" />
          <type api="T:System.ServiceModel.Channels.RedirectionException" ref="true" />
          <type api="T:System.ServiceModel.Channels.RetryException" ref="true" />
          <type api="T:System.ServiceModel.Persistence.PersistenceException" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.CommunicationException.#ctor">
          <element api="M:System.ServiceModel.CommunicationException.#ctor" />
          <element api="M:System.ServiceModel.CommunicationException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.CommunicationException">
      <topicdata name="CommunicationException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CommunicationException" />
      <apidata name="CommunicationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CommunicationException">
      <topicdata name="CommunicationException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CommunicationException" />
      <apidata name="CommunicationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.CommunicationException">
      <topicdata name="CommunicationException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.CommunicationException" />
      <apidata name="CommunicationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.CommunicationException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.CommunicationException.#ctor" />
        <element api="M:System.ServiceModel.CommunicationException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.CommunicationException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CommunicationObjectAbortedException">
      <topicdata group="api" />
      <apidata name="CommunicationObjectAbortedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
          <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
          <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.CommunicationObjectAbortedException">
      <topicdata name="CommunicationObjectAbortedException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CommunicationObjectAbortedException" />
      <apidata name="CommunicationObjectAbortedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CommunicationObjectAbortedException">
      <topicdata name="CommunicationObjectAbortedException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CommunicationObjectAbortedException" />
      <apidata name="CommunicationObjectAbortedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.CommunicationObjectAbortedException">
      <topicdata name="CommunicationObjectAbortedException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.CommunicationObjectAbortedException" />
      <apidata name="CommunicationObjectAbortedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
        <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectAbortedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectAbortedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CommunicationObjectFaultedException">
      <topicdata group="api" />
      <apidata name="CommunicationObjectFaultedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
          <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
          <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.CommunicationObjectFaultedException">
      <topicdata name="CommunicationObjectFaultedException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CommunicationObjectFaultedException" />
      <apidata name="CommunicationObjectFaultedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CommunicationObjectFaultedException">
      <topicdata name="CommunicationObjectFaultedException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CommunicationObjectFaultedException" />
      <apidata name="CommunicationObjectFaultedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.CommunicationObjectFaultedException">
      <topicdata name="CommunicationObjectFaultedException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.CommunicationObjectFaultedException" />
      <apidata name="CommunicationObjectFaultedException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
        <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.CommunicationObjectFaultedException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationObjectFaultedException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CommunicationState">
      <topicdata group="api" />
      <apidata name="CommunicationState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.CommunicationState.Created" />
        <element api="F:System.ServiceModel.CommunicationState.Opening" />
        <element api="F:System.ServiceModel.CommunicationState.Opened" />
        <element api="F:System.ServiceModel.CommunicationState.Closing" />
        <element api="F:System.ServiceModel.CommunicationState.Closed" />
        <element api="F:System.ServiceModel.CommunicationState.Faulted" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Closed">
      <topicdata group="api" notopic="" />
      <apidata name="Closed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Closing">
      <topicdata group="api" notopic="" />
      <apidata name="Closing" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Created">
      <topicdata group="api" notopic="" />
      <apidata name="Created" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Faulted">
      <topicdata group="api" notopic="" />
      <apidata name="Faulted" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Opened">
      <topicdata group="api" notopic="" />
      <apidata name="Opened" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.CommunicationState.Opening">
      <topicdata group="api" notopic="" />
      <apidata name="Opening" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ConcurrencyMode">
      <topicdata group="api" />
      <apidata name="ConcurrencyMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.ConcurrencyMode.Single" />
        <element api="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
        <element api="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ConcurrencyMode.Multiple">
      <topicdata group="api" notopic="" />
      <apidata name="Multiple" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ConcurrencyMode.Reentrant">
      <topicdata group="api" notopic="" />
      <apidata name="Reentrant" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ConcurrencyMode.Single">
      <topicdata group="api" notopic="" />
      <apidata name="Single" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CorrelationActionMessageFilter">
      <topicdata group="api" />
      <apidata name="CorrelationActionMessageFilter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Dispatcher.MessageFilter" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Equals(System.Object)" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.GetHashCode" />
        <element api="Overload:System.ServiceModel.CorrelationActionMessageFilter.Match">
          <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
        </element>
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.ToString" />
        <element api="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
        <element api="P:System.ServiceModel.CorrelationActionMessageFilter.Action" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.CorrelationActionMessageFilter">
      <topicdata name="CorrelationActionMessageFilter" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CorrelationActionMessageFilter" />
      <apidata name="CorrelationActionMessageFilter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Equals(System.Object)" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.GetHashCode" />
        <element api="Overload:System.ServiceModel.CorrelationActionMessageFilter.Match">
          <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
        </element>
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.ToString" />
        <element api="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CorrelationActionMessageFilter">
      <topicdata name="CorrelationActionMessageFilter" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CorrelationActionMessageFilter" />
      <apidata name="CorrelationActionMessageFilter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.CorrelationActionMessageFilter.Action" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.CorrelationActionMessageFilter.Match">
      <topicdata name="Match" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Match" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CorrelationActionMessageFilter.Action">
      <topicdata group="api" />
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Action" />
      <setter name="set_Action" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="other">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <topicdata group="api" />
      <apidata name="Match" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.CorrelationActionMessageFilter.Match" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)">
          <type api="T:System.ServiceModel.Dispatcher.MessageFilter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <topicdata group="api" />
      <apidata name="Match" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.CorrelationActionMessageFilter.Match" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
          <type api="T:System.ServiceModel.Dispatcher.MessageFilter" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="messageBuffer">
          <type api="T:System.ServiceModel.Channels.MessageBuffer" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationActionMessageFilter.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationActionMessageFilter" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.CorrelationQuery">
      <topicdata group="api" />
      <apidata name="CorrelationQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationQuery.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.CorrelationQuery.#ctor" />
        <element api="M:System.ServiceModel.CorrelationQuery.Equals(System.Object)" />
        <element api="M:System.ServiceModel.CorrelationQuery.GetHashCode" />
        <element api="P:System.ServiceModel.CorrelationQuery.Select" />
        <element api="P:System.ServiceModel.CorrelationQuery.SelectAdditional" />
        <element api="P:System.ServiceModel.CorrelationQuery.Where" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.CorrelationQuery">
      <topicdata name="CorrelationQuery" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.CorrelationQuery" />
      <apidata name="CorrelationQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationQuery.#ctor" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.CorrelationQuery.Equals(System.Object)" />
        <element api="M:System.ServiceModel.CorrelationQuery.GetHashCode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.CorrelationQuery">
      <topicdata name="CorrelationQuery" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.CorrelationQuery" />
      <apidata name="CorrelationQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.CorrelationQuery.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.CorrelationQuery.Select" />
        <element api="P:System.ServiceModel.CorrelationQuery.SelectAdditional" />
        <element api="P:System.ServiceModel.CorrelationQuery.Where" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationQuery.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationQuery.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="other">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.CorrelationQuery.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CorrelationQuery.Select">
      <topicdata group="api" />
      <apidata name="Select" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Select" />
      <setter name="set_Select" />
      <returns>
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.CorrelationQuery.SelectAdditional">
      <topicdata group="api" />
      <apidata name="SelectAdditional" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SelectAdditional" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.CorrelationQuery.Where">
      <topicdata group="api" />
      <apidata name="Where" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Where" />
      <setter name="set_Where" />
      <returns>
        <type api="T:System.ServiceModel.Dispatcher.MessageFilter" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.CorrelationQuery" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.DataContractFormatAttribute">
      <topicdata group="api" />
      <apidata name="DataContractFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DataContractFormatAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.DataContractFormatAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.DataContractFormatAttribute.Style" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Method" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.DataContractFormatAttribute">
      <topicdata name="DataContractFormatAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.DataContractFormatAttribute" />
      <apidata name="DataContractFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DataContractFormatAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DataContractFormatAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.DataContractFormatAttribute">
      <topicdata name="DataContractFormatAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.DataContractFormatAttribute" />
      <apidata name="DataContractFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DataContractFormatAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.DataContractFormatAttribute.Style" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DataContractFormatAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DataContractFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <topicdata group="api" />
      <apidata name="Style" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Style" />
      <setter name="set_Style" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DataContractFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.DeadLetterQueue">
      <topicdata group="api" />
      <apidata name="DeadLetterQueue" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.DeadLetterQueue.None" />
        <element api="F:System.ServiceModel.DeadLetterQueue.System" />
        <element api="F:System.ServiceModel.DeadLetterQueue.Custom" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.DeadLetterQueue.Custom">
      <topicdata group="api" notopic="" />
      <apidata name="Custom" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.DeadLetterQueue.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.DeadLetterQueue.System">
      <topicdata group="api" notopic="" />
      <apidata name="System" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.DeliveryRequirementsAttribute">
      <topicdata group="api" />
      <apidata name="DeliveryRequirementsAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IContractBehavior" ref="true" />
        <type api="T:System.ServiceModel.Description.IContractBehaviorAttribute" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.QueuedDeliveryRequirements" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.RequireOrderedDelivery" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.TargetContract" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.DeliveryRequirementsAttribute">
      <topicdata name="DeliveryRequirementsAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.DeliveryRequirementsAttribute" />
      <apidata name="DeliveryRequirementsAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
        <element api="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.DeliveryRequirementsAttribute">
      <topicdata name="DeliveryRequirementsAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.DeliveryRequirementsAttribute" />
      <apidata name="DeliveryRequirementsAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.QueuedDeliveryRequirements" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.RequireOrderedDelivery" />
        <element api="P:System.ServiceModel.DeliveryRequirementsAttribute.TargetContract" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.DeliveryRequirementsAttribute.QueuedDeliveryRequirements">
      <topicdata group="api" />
      <apidata name="QueuedDeliveryRequirements" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_QueuedDeliveryRequirements" />
      <setter name="set_QueuedDeliveryRequirements" />
      <returns>
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.DeliveryRequirementsAttribute.RequireOrderedDelivery">
      <topicdata group="api" />
      <apidata name="RequireOrderedDelivery" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RequireOrderedDelivery" />
      <setter name="set_RequireOrderedDelivery" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" eiiName="IContractBehavior.AddBindingParameters" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IContractBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <topicdata group="api" eiiName="IContractBehavior.ApplyClientBehavior" />
      <apidata name="ApplyClientBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="proxy">
          <type api="T:System.ServiceModel.Dispatcher.ClientRuntime" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
          <type api="T:System.ServiceModel.Description.IContractBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <topicdata group="api" eiiName="IContractBehavior.ApplyDispatchBehavior" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="dispatch">
          <type api="T:System.ServiceModel.Dispatcher.DispatchRuntime" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
          <type api="T:System.ServiceModel.Description.IContractBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" eiiName="IContractBehavior.Validate" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
          <type api="T:System.ServiceModel.Description.IContractBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.DeliveryRequirementsAttribute.TargetContract">
      <topicdata group="api" />
      <apidata name="TargetContract" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_TargetContract" />
      <setter name="set_TargetContract" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract">
          <type api="T:System.ServiceModel.Description.IContractBehaviorAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DeliveryRequirementsAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.DnsEndpointIdentity">
      <topicdata group="api" />
      <apidata name="DnsEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.DnsEndpointIdentity.#ctor">
          <element api="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.DnsEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.DnsEndpointIdentity">
      <topicdata name="DnsEndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.DnsEndpointIdentity" />
      <apidata name="DnsEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.DnsEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DnsEndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.DnsEndpointIdentity">
      <topicdata name="DnsEndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.DnsEndpointIdentity" />
      <apidata name="DnsEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DnsEndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.DnsEndpointIdentity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
        <element api="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DnsEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DnsEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DnsEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DnsEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="dnsName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DnsEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.DuplexChannelFactory`1">
      <topicdata group="api" />
      <apidata name="DuplexChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ChannelFactory`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
            </specialization>
          </type>
          <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.Configuration.ConfigurationDuplexChannelFactory`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithActAsToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithIssuedToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithOnBehalfOfToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateDescription" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor">
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.DuplexChannelFactory`1">
      <topicdata name="DuplexChannelFactory" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.DuplexChannelFactory`1" />
      <apidata name="DuplexChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)" />
        <element api="M:System.ServiceModel.ChannelFactory.CreateFactory" />
        <element api="M:System.ServiceModel.ChannelFactory.EnsureOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.GetProperty``1" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.InitializeEndpoint">
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory.OnAbort" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpened" />
        <element api="M:System.ServiceModel.ChannelFactory.OnOpening" />
        <element api="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithActAsToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithIssuedToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannelWithOnBehalfOfToken">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateDescription" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel">
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
          <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.String)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
          <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.DuplexChannelFactory`1">
      <topicdata name="DuplexChannelFactory" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.DuplexChannelFactory`1" />
      <apidata name="DuplexChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="P:System.ServiceModel.ChannelFactory.Credentials" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ChannelFactory.Endpoint" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.DuplexChannelFactory`1">
      <topicdata name="DuplexChannelFactory" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.DuplexChannelFactory`1" />
      <apidata name="DuplexChannelFactory" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TChannel" />
      </templates>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String,System.ServiceModel.EndpointAddress)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel">
      <topicdata name="CreateChannel" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel" />
        <element api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.String)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
        <element api="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.#ctor" />
      <parameters>
        <parameter name="callbackInstanceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.String)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackObject">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
          <type api="T:System.ServiceModel.ChannelFactory`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <implements>
        <member api="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
          <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.ChannelFactory`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="via">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.String)">
      <topicdata group="api" />
      <apidata name="CreateChannel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.DuplexChannelFactory`1.CreateChannel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexChannelFactory`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexChannelFactory`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.DuplexClientBase`1">
      <topicdata group="api" />
      <apidata name="DuplexClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ClientBase`1" ref="true">
            <specialization>
              <template name="TChannel" index="0" api="T:System.ServiceModel.DuplexClientBase`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientBase`1.Abort" />
        <element api="M:System.ServiceModel.ClientBase`1.Close" />
        <element api="M:System.ServiceModel.ClientBase`1.CreateChannel" />
        <element api="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1" />
        <element api="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.Open" />
        <element api="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.DuplexClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
        <element api="Overload:System.ServiceModel.DuplexClientBase`1.#ctor">
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)" />
          <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.String)" />
        </element>
        <element api="P:System.ServiceModel.ClientBase`1.Channel" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelFactory" />
        <element api="P:System.ServiceModel.ClientBase`1.ClientCredentials" />
        <element api="P:System.ServiceModel.ClientBase`1.Endpoint" />
        <element api="P:System.ServiceModel.ClientBase`1.InnerChannel" />
        <element api="P:System.ServiceModel.ClientBase`1.State" />
        <element api="P:System.ServiceModel.DuplexClientBase`1.InnerDuplexChannel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.DuplexClientBase`1">
      <topicdata name="DuplexClientBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.DuplexClientBase`1" />
      <apidata name="DuplexClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ClientBase`1.Abort" />
        <element api="M:System.ServiceModel.ClientBase`1.Close" />
        <element api="M:System.ServiceModel.ClientBase`1.CreateChannel" />
        <element api="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1" />
        <element api="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />
        <element api="M:System.ServiceModel.ClientBase`1.Open" />
        <element api="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.DuplexClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.DuplexClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen">
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.DuplexClientBase`1">
      <topicdata name="DuplexClientBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.DuplexClientBase`1" />
      <apidata name="DuplexClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:System.ServiceModel.ClientBase`1.Channel" />
        <element api="P:System.ServiceModel.ClientBase`1.ChannelFactory" />
        <element api="P:System.ServiceModel.ClientBase`1.ClientCredentials" />
        <element api="P:System.ServiceModel.ClientBase`1.Endpoint" />
        <element api="P:System.ServiceModel.ClientBase`1.InnerChannel" />
        <element api="P:System.ServiceModel.ClientBase`1.State" />
        <element api="P:System.ServiceModel.DuplexClientBase`1.InnerDuplexChannel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.DuplexClientBase`1">
      <topicdata name="DuplexClientBase" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.DuplexClientBase`1" />
      <apidata name="DuplexClientBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TChannel">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened" />
        <element api="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.DuplexClientBase`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.DuplexClientBase`1.#ctor" />
      <parameters>
        <parameter name="callbackInstance">
          <type api="T:System.ServiceModel.InstanceContext" ref="true" />
        </parameter>
        <parameter name="endpointConfigurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="remoteAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.DuplexClientBase`1.InnerDuplexChannel">
      <topicdata group="api" />
      <apidata name="InnerDuplexChannel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InnerDuplexChannel" />
      <returns>
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.DuplexClientBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.Endpoint">
      <topicdata group="api" />
      <apidata name="Endpoint" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.Endpoint.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Endpoint.#ctor" />
        <element api="Overload:System.ServiceModel.Endpoint.GetAddress">
          <element api="M:System.ServiceModel.Endpoint.GetAddress" />
          <element api="M:System.ServiceModel.Endpoint.GetAddress(System.ServiceModel.ServiceHostBase)" />
        </element>
        <element api="P:System.ServiceModel.Endpoint.AddressUri" />
        <element api="P:System.ServiceModel.Endpoint.BehaviorConfigurationName" />
        <element api="P:System.ServiceModel.Endpoint.Binding" />
        <element api="P:System.ServiceModel.Endpoint.Headers" />
        <element api="P:System.ServiceModel.Endpoint.Identity" />
        <element api="P:System.ServiceModel.Endpoint.ListenUri" />
        <element api="P:System.ServiceModel.Endpoint.Name" />
        <element api="P:System.ServiceModel.Endpoint.ServiceContractName" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.Endpoint">
      <topicdata name="Endpoint" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.Endpoint" />
      <apidata name="Endpoint" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.Endpoint.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.Endpoint.GetAddress">
          <element api="M:System.ServiceModel.Endpoint.GetAddress" />
          <element api="M:System.ServiceModel.Endpoint.GetAddress(System.ServiceModel.ServiceHostBase)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.Endpoint">
      <topicdata name="Endpoint" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.Endpoint" />
      <apidata name="Endpoint" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.Endpoint.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Endpoint.AddressUri" />
        <element api="P:System.ServiceModel.Endpoint.BehaviorConfigurationName" />
        <element api="P:System.ServiceModel.Endpoint.Binding" />
        <element api="P:System.ServiceModel.Endpoint.Headers" />
        <element api="P:System.ServiceModel.Endpoint.Identity" />
        <element api="P:System.ServiceModel.Endpoint.ListenUri" />
        <element api="P:System.ServiceModel.Endpoint.Name" />
        <element api="P:System.ServiceModel.Endpoint.ServiceContractName" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.Endpoint.GetAddress">
      <topicdata name="GetAddress" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetAddress" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.Endpoint.GetAddress" />
        <element api="M:System.ServiceModel.Endpoint.GetAddress(System.ServiceModel.ServiceHostBase)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.Endpoint.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.Endpoint.AddressUri">
      <topicdata group="api" />
      <apidata name="AddressUri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AddressUri" />
      <setter name="set_AddressUri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.Endpoint.BehaviorConfigurationName">
      <topicdata group="api" />
      <apidata name="BehaviorConfigurationName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BehaviorConfigurationName" />
      <setter name="set_BehaviorConfigurationName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.Endpoint.Binding">
      <topicdata group="api" />
      <apidata name="Binding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Binding" />
      <setter name="set_Binding" />
      <returns>
        <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.Endpoint.GetAddress">
      <topicdata group="api" />
      <apidata name="GetAddress" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.Endpoint.GetAddress" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.Endpoint.GetAddress(System.ServiceModel.ServiceHostBase)">
      <topicdata group="api" />
      <apidata name="GetAddress" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.Endpoint.GetAddress" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="host">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.Endpoint.Headers">
      <topicdata group="api" />
      <apidata name="Headers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Headers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Channels.AddressHeader" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.Endpoint.Identity">
      <topicdata group="api" />
      <apidata name="Identity" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Identity" />
      <setter name="set_Identity" />
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.ServiceModel.XamlIntegration.EndpointIdentityConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.Endpoint.ListenUri">
      <topicdata group="api" />
      <apidata name="ListenUri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ListenUri" />
      <setter name="set_ListenUri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.Endpoint.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.Endpoint.ServiceContractName">
      <topicdata group="api" />
      <apidata name="ServiceContractName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ServiceContractName" />
      <setter name="set_ServiceContractName" />
      <returns>
        <type api="T:System.Xml.Linq.XName" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.Endpoint" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.EndpointAddress">
      <topicdata group="api" />
      <apidata name="EndpointAddress" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.EndpointAddress.#ctor">
          <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.String)" />
          <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])" />
          <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeader[])" />
          <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection)" />
          <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryReader)" />
        </element>
        <element api="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.EndpointAddress.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointAddress.GetHashCode" />
        <element api="M:System.ServiceModel.EndpointAddress.GetReaderAtExtensions" />
        <element api="M:System.ServiceModel.EndpointAddress.GetReaderAtMetadata" />
        <element api="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)" />
        <element api="Overload:System.ServiceModel.EndpointAddress.ReadFrom">
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader,System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.EndpointAddress.ToString" />
        <element api="Overload:System.ServiceModel.EndpointAddress.WriteContentsTo">
          <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
        </element>
        <element api="Overload:System.ServiceModel.EndpointAddress.WriteTo">
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter,System.String,System.String)" />
        </element>
        <element api="P:System.ServiceModel.EndpointAddress.AnonymousUri" />
        <element api="P:System.ServiceModel.EndpointAddress.Headers" />
        <element api="P:System.ServiceModel.EndpointAddress.Identity" />
        <element api="P:System.ServiceModel.EndpointAddress.IsAnonymous" />
        <element api="P:System.ServiceModel.EndpointAddress.IsNone" />
        <element api="P:System.ServiceModel.EndpointAddress.NoneUri" />
        <element api="P:System.ServiceModel.EndpointAddress.Uri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointAddress">
      <topicdata name="EndpointAddress" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointAddress" />
      <apidata name="EndpointAddress" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.EndpointAddress.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointAddress.GetHashCode" />
        <element api="M:System.ServiceModel.EndpointAddress.GetReaderAtExtensions" />
        <element api="M:System.ServiceModel.EndpointAddress.GetReaderAtMetadata" />
        <element api="Overload:System.ServiceModel.EndpointAddress.ReadFrom">
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader,System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.EndpointAddress.ToString" />
        <element api="Overload:System.ServiceModel.EndpointAddress.WriteContentsTo">
          <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
        </element>
        <element api="Overload:System.ServiceModel.EndpointAddress.WriteTo">
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
          <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter,System.String,System.String)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" />
      </containers>
    </api>
    <api id="Operators.T:System.ServiceModel.EndpointAddress">
      <topicdata name="EndpointAddress" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:System.ServiceModel.EndpointAddress" />
      <apidata name="EndpointAddress" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EndpointAddress">
      <topicdata name="EndpointAddress" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EndpointAddress" />
      <apidata name="EndpointAddress" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointAddress.AnonymousUri" />
        <element api="P:System.ServiceModel.EndpointAddress.Headers" />
        <element api="P:System.ServiceModel.EndpointAddress.Identity" />
        <element api="P:System.ServiceModel.EndpointAddress.IsAnonymous" />
        <element api="P:System.ServiceModel.EndpointAddress.IsNone" />
        <element api="P:System.ServiceModel.EndpointAddress.NoneUri" />
        <element api="P:System.ServiceModel.EndpointAddress.Uri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointAddress.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.String)" />
        <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])" />
        <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeader[])" />
        <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection)" />
        <element api="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryReader)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointAddress.ReadFrom">
      <topicdata name="ReadFrom" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader)" />
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
        <element api="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointAddress.WriteContentsTo">
      <topicdata name="WriteContentsTo" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="WriteContentsTo" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
        <element api="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointAddress.WriteTo">
      <topicdata name="WriteTo" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="WriteTo" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)" />
        <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)" />
        <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" />
        <element api="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddress.#ctor" />
      <parameters>
        <parameter name="uri">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddress.#ctor" />
      <parameters>
        <parameter name="uri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="addressHeaders" params="true">
          <arrayOf rank="1">
            <type api="T:System.ServiceModel.Channels.AddressHeader" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeader[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddress.#ctor" />
      <parameters>
        <parameter name="uri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="identity">
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
        </parameter>
        <parameter name="addressHeaders" params="true">
          <arrayOf rank="1">
            <type api="T:System.ServiceModel.Channels.AddressHeader" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddress.#ctor" />
      <parameters>
        <parameter name="uri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="identity">
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
        </parameter>
        <parameter name="headers">
          <type api="T:System.ServiceModel.Channels.AddressHeaderCollection" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryReader)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddress.#ctor" />
      <parameters>
        <parameter name="uri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="identity">
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
        </parameter>
        <parameter name="headers">
          <type api="T:System.ServiceModel.Channels.AddressHeaderCollection" ref="true" />
        </parameter>
        <parameter name="metadataReader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
        <parameter name="extensionReader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <topicdata group="api" />
      <apidata name="AnonymousUri" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AnonymousUri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <topicdata group="api" />
      <apidata name="ApplyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.GetReaderAtExtensions">
      <topicdata group="api" />
      <apidata name="GetReaderAtExtensions" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.GetReaderAtMetadata">
      <topicdata group="api" />
      <apidata name="GetReaderAtMetadata" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.Headers">
      <topicdata group="api" />
      <apidata name="Headers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Headers" />
      <returns>
        <type api="T:System.ServiceModel.Channels.AddressHeaderCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.Identity">
      <topicdata group="api" />
      <apidata name="Identity" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Identity" />
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <topicdata group="api" />
      <apidata name="IsAnonymous" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsAnonymous" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.IsNone">
      <topicdata group="api" />
      <apidata name="IsNone" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsNone" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.NoneUri">
      <topicdata group="api" />
      <apidata name="NoneUri" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NoneUri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address1">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="address2">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address1">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="address2">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
        <parameter name="localName">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="reader">
          <type api="T:System.Xml.XmlReader" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="reader">
          <type api="T:System.Xml.XmlReader" ref="true" />
        </parameter>
        <parameter name="localName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <topicdata group="api" />
      <apidata name="ReadFrom" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointAddress.ReadFrom" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
        <parameter name="localName">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddress.Uri">
      <topicdata group="api" />
      <apidata name="Uri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Uri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.UriTypeConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <topicdata group="api" />
      <apidata name="WriteContentsTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteContentsTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlDictionaryWriter" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)">
      <topicdata group="api" />
      <apidata name="WriteContentsTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteContentsTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlWriter" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <topicdata group="api" />
      <apidata name="WriteTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlDictionaryWriter" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <topicdata group="api" />
      <apidata name="WriteTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlDictionaryWriter" ref="true" />
        </parameter>
        <parameter name="localName">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.Xml.XmlDictionaryString" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)">
      <topicdata group="api" />
      <apidata name="WriteTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlWriter" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="WriteTo" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.EndpointAddress.WriteTo" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="addressingVersion">
          <type api="T:System.ServiceModel.Channels.AddressingVersion" ref="true" />
        </parameter>
        <parameter name="writer">
          <type api="T:System.Xml.XmlWriter" ref="true" />
        </parameter>
        <parameter name="localName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointAddress10">
      <topicdata group="api" />
      <apidata name="EndpointAddress10" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointAddress10.FromEndpointAddress(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddress10.GetSchema(System.Xml.Schema.XmlSchemaSet)" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#GetSchema" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
        <element api="M:System.ServiceModel.EndpointAddress10.ToEndpointAddress" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Xml.Serialization.XmlSchemaProviderAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>GetSchema</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Xml.Serialization.XmlRootAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>EndpointReference</value>
          </argument>
          <assignment name="Namespace">
            <type api="T:System.String" ref="true" />
            <value>http://www.w3.org/2005/08/addressing</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointAddress10">
      <topicdata name="EndpointAddress10" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointAddress10" />
      <apidata name="EndpointAddress10" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointAddress10.FromEndpointAddress(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddress10.GetSchema(System.Xml.Schema.XmlSchemaSet)" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#GetSchema" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
        <element api="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
        <element api="M:System.ServiceModel.EndpointAddress10.ToEndpointAddress" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.FromEndpointAddress(System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="FromEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <topicdata group="api" />
      <apidata name="GetSchema" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="xmlSchemaSet">
          <type api="T:System.Xml.Schema.XmlSchemaSet" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Xml.XmlQualifiedName" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <topicdata group="api" eiiName="IXmlSerializable.GetSchema" />
      <apidata name="GetSchema" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <returns>
        <type api="T:System.Xml.Schema.XmlSchema" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <topicdata group="api" eiiName="IXmlSerializable.ReadXml" />
      <apidata name="ReadXml" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlReader" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <topicdata group="api" eiiName="IXmlSerializable.WriteXml" />
      <apidata name="WriteXml" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="writer">
          <type api="T:System.Xml.XmlWriter" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddress10.ToEndpointAddress">
      <topicdata group="api" />
      <apidata name="ToEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddress10" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointAddressAugust2004">
      <topicdata group="api" />
      <apidata name="EndpointAddressAugust2004" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.FromEndpointAddress(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.GetSchema(System.Xml.Schema.XmlSchemaSet)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#GetSchema" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.ToEndpointAddress" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Xml.Serialization.XmlSchemaProviderAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>GetSchema</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Xml.Serialization.XmlRootAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>EndpointReference</value>
          </argument>
          <assignment name="Namespace">
            <type api="T:System.String" ref="true" />
            <value>http://schemas.xmlsoap.org/ws/2004/08/addressing</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointAddressAugust2004">
      <topicdata name="EndpointAddressAugust2004" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointAddressAugust2004" />
      <apidata name="EndpointAddressAugust2004" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.FromEndpointAddress(System.ServiceModel.EndpointAddress)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.GetSchema(System.Xml.Schema.XmlSchemaSet)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#GetSchema" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
        <element api="M:System.ServiceModel.EndpointAddressAugust2004.ToEndpointAddress" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.FromEndpointAddress(System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name="FromEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <topicdata group="api" />
      <apidata name="GetSchema" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="xmlSchemaSet">
          <type api="T:System.Xml.Schema.XmlSchemaSet" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Xml.XmlQualifiedName" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <topicdata group="api" eiiName="IXmlSerializable.GetSchema" />
      <apidata name="GetSchema" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <returns>
        <type api="T:System.Xml.Schema.XmlSchema" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <topicdata group="api" eiiName="IXmlSerializable.ReadXml" />
      <apidata name="ReadXml" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlReader" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <topicdata group="api" eiiName="IXmlSerializable.WriteXml" />
      <apidata name="WriteXml" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="writer">
          <type api="T:System.Xml.XmlWriter" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
          <type api="T:System.Xml.Serialization.IXmlSerializable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressAugust2004.ToEndpointAddress">
      <topicdata group="api" />
      <apidata name="ToEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressAugust2004" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointAddressBuilder">
      <topicdata group="api" />
      <apidata name="EndpointAddressBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointAddressBuilder.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.EndpointAddressBuilder.#ctor">
          <element api="M:System.ServiceModel.EndpointAddressBuilder.#ctor" />
          <element api="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)" />
        </element>
        <element api="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtExtensions" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtMetadata" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.SetExtensionReader(System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.SetMetadataReader(System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress" />
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Headers" />
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Identity" />
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Uri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointAddressBuilder">
      <topicdata name="EndpointAddressBuilder" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointAddressBuilder" />
      <apidata name="EndpointAddressBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointAddressBuilder.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtExtensions" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtMetadata" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.SetExtensionReader(System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.SetMetadataReader(System.Xml.XmlDictionaryReader)" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EndpointAddressBuilder">
      <topicdata name="EndpointAddressBuilder" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EndpointAddressBuilder" />
      <apidata name="EndpointAddressBuilder" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointAddressBuilder.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Headers" />
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Identity" />
        <element api="P:System.ServiceModel.EndpointAddressBuilder.Uri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.EndpointAddressBuilder.#ctor" />
        <element api="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddressBuilder.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointAddressBuilder.#ctor" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtExtensions">
      <topicdata group="api" />
      <apidata name="GetReaderAtExtensions" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtMetadata">
      <topicdata group="api" />
      <apidata name="GetReaderAtMetadata" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <topicdata group="api" />
      <apidata name="Headers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Headers" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Channels.AddressHeader" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddressBuilder.Identity">
      <topicdata group="api" />
      <apidata name="Identity" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Identity" />
      <setter name="set_Identity" />
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.SetExtensionReader(System.Xml.XmlDictionaryReader)">
      <topicdata group="api" />
      <apidata name="SetExtensionReader" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.SetMetadataReader(System.Xml.XmlDictionaryReader)">
      <topicdata group="api" />
      <apidata name="SetMetadataReader" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="reader">
          <type api="T:System.Xml.XmlDictionaryReader" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <topicdata group="api" />
      <apidata name="ToEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <topicdata group="api" />
      <apidata name="Uri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Uri" />
      <setter name="set_Uri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointAddressBuilder" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointIdentity">
      <topicdata group="api" />
      <apidata name="EndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.SpnEndpointIdentity" ref="true" />
          <type api="T:System.ServiceModel.UpnEndpointIdentity" ref="true" />
          <type api="T:System.ServiceModel.DnsEndpointIdentity" ref="true" />
          <type api="T:System.ServiceModel.RsaEndpointIdentity" ref="true" />
          <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.#ctor" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateDnsIdentity(System.String)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateIdentity(System.IdentityModel.Claims.Claim)" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.CreateRsaIdentity">
          <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.String)" />
          <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.CreateSpnIdentity(System.String)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateUpnIdentity(System.String)" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity">
          <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
          <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointIdentity">
      <topicdata name="EndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointIdentity" />
      <apidata name="EndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateDnsIdentity(System.String)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateIdentity(System.IdentityModel.Claims.Claim)" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.CreateRsaIdentity">
          <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.String)" />
          <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.CreateSpnIdentity(System.String)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateUpnIdentity(System.String)" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity">
          <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
          <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.EndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EndpointIdentity">
      <topicdata name="EndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EndpointIdentity" />
      <apidata name="EndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointIdentity.CreateRsaIdentity">
      <topicdata name="CreateRsaIdentity" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateRsaIdentity" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.String)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity">
      <topicdata name="CreateX509CertificateIdentity" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateX509CertificateIdentity" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <element api="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointIdentity.Initialize">
      <topicdata name="Initialize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
        <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateDnsIdentity(System.String)">
      <topicdata group="api" />
      <apidata name="CreateDnsIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dnsName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateIdentity(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name="CreateIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <topicdata group="api" />
      <apidata name="CreateRsaIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointIdentity.CreateRsaIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="certificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.String)">
      <topicdata group="api" />
      <apidata name="CreateRsaIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointIdentity.CreateRsaIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="publicKey">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateSpnIdentity(System.String)">
      <topicdata group="api" />
      <apidata name="CreateSpnIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="spnName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateUpnIdentity(System.String)">
      <topicdata group="api" />
      <apidata name="CreateUpnIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="upnName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <topicdata group="api" />
      <apidata name="CreateX509CertificateIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="certificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <topicdata group="api" />
      <apidata name="CreateX509CertificateIdentity" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="primaryCertificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
        <parameter name="supportingCertificates">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointIdentity.IdentityClaim">
      <topicdata group="api" />
      <apidata name="IdentityClaim" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IdentityClaim" />
      <returns>
        <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.EndpointIdentity.Initialize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="identityClaim">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.EndpointIdentity.Initialize" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="identityClaim">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
        <parameter name="claimComparer">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentity.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointIdentityExtension">
      <topicdata group="api" />
      <apidata name="EndpointIdentityExtension" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointIdentityExtension.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Windows.Markup.MarkupExtension" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.EndpointIdentityExtension.#ctor">
          <element api="M:System.ServiceModel.EndpointIdentityExtension.#ctor" />
          <element api="M:System.ServiceModel.EndpointIdentityExtension.#ctor(System.ServiceModel.EndpointIdentity)" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentityExtension.ProvideValue(System.IServiceProvider)" />
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimResource" />
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimRight" />
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointIdentityExtension">
      <topicdata name="EndpointIdentityExtension" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointIdentityExtension" />
      <apidata name="EndpointIdentityExtension" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointIdentityExtension.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.EndpointIdentityExtension.ProvideValue(System.IServiceProvider)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EndpointIdentityExtension">
      <topicdata name="EndpointIdentityExtension" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EndpointIdentityExtension" />
      <apidata name="EndpointIdentityExtension" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.EndpointIdentityExtension.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimResource" />
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimRight" />
        <element api="P:System.ServiceModel.EndpointIdentityExtension.ClaimType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointIdentityExtension.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.EndpointIdentityExtension.#ctor" />
        <element api="M:System.ServiceModel.EndpointIdentityExtension.#ctor(System.ServiceModel.EndpointIdentity)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentityExtension.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointIdentityExtension.#ctor" />
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentityExtension.#ctor(System.ServiceModel.EndpointIdentity)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointIdentityExtension.#ctor" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointIdentityExtension.ClaimResource">
      <topicdata group="api" />
      <apidata name="ClaimResource" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClaimResource" />
      <setter name="set_ClaimResource" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointIdentityExtension.ClaimRight">
      <topicdata group="api" />
      <apidata name="ClaimRight" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClaimRight" />
      <setter name="set_ClaimRight" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EndpointIdentityExtension.ClaimType">
      <topicdata group="api" />
      <apidata name="ClaimType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClaimType" />
      <setter name="set_ClaimType" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointIdentityExtension.ProvideValue(System.IServiceProvider)">
      <topicdata group="api" />
      <apidata name="ProvideValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <type api="T:System.Windows.Markup.MarkupExtension" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="serviceProvider">
          <type api="T:System.IServiceProvider" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointIdentityExtension" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EndpointNotFoundException">
      <topicdata group="api" />
      <apidata name="EndpointNotFoundException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.EndpointNotFoundException.#ctor">
          <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
          <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.EndpointNotFoundException">
      <topicdata name="EndpointNotFoundException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EndpointNotFoundException" />
      <apidata name="EndpointNotFoundException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EndpointNotFoundException">
      <topicdata name="EndpointNotFoundException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EndpointNotFoundException" />
      <apidata name="EndpointNotFoundException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.EndpointNotFoundException">
      <topicdata name="EndpointNotFoundException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.EndpointNotFoundException" />
      <apidata name="EndpointNotFoundException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.EndpointNotFoundException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor" />
        <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointNotFoundException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.EndpointNotFoundException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EndpointNotFoundException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues" />
        <element api="M:System.ServiceModel.EnvelopeVersion.ToString" />
        <element api="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue" />
        <element api="P:System.ServiceModel.EnvelopeVersion.None" />
        <element api="P:System.ServiceModel.EnvelopeVersion.Soap11" />
        <element api="P:System.ServiceModel.EnvelopeVersion.Soap12" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.EnvelopeVersion">
      <topicdata name="EnvelopeVersion" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.EnvelopeVersion" />
      <apidata name="EnvelopeVersion" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues" />
        <element api="M:System.ServiceModel.EnvelopeVersion.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.EnvelopeVersion">
      <topicdata name="EnvelopeVersion" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.EnvelopeVersion" />
      <apidata name="EnvelopeVersion" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue" />
        <element api="P:System.ServiceModel.EnvelopeVersion.None" />
        <element api="P:System.ServiceModel.EnvelopeVersion.Soap11" />
        <element api="P:System.ServiceModel.EnvelopeVersion.Soap12" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <topicdata group="api" />
      <apidata name="GetUltimateDestinationActorValues" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <topicdata group="api" />
      <apidata name="NextDestinationActorValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NextDestinationActorValue" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EnvelopeVersion.None">
      <topicdata group="api" />
      <apidata name="None" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_None" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <topicdata group="api" />
      <apidata name="Soap11" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Soap11" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <topicdata group="api" />
      <apidata name="Soap12" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Soap12" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.EnvelopeVersion.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ExceptionDetail">
      <topicdata group="api" />
      <apidata name="ExceptionDetail" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)" />
        <element api="M:System.ServiceModel.ExceptionDetail.ToString" />
        <element api="P:System.ServiceModel.ExceptionDetail.HelpLink" />
        <element api="P:System.ServiceModel.ExceptionDetail.InnerException" />
        <element api="P:System.ServiceModel.ExceptionDetail.Message" />
        <element api="P:System.ServiceModel.ExceptionDetail.StackTrace" />
        <element api="P:System.ServiceModel.ExceptionDetail.Type" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataContractAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.ExceptionDetail">
      <topicdata name="ExceptionDetail" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ExceptionDetail" />
      <apidata name="ExceptionDetail" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.ExceptionDetail.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ExceptionDetail">
      <topicdata name="ExceptionDetail" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ExceptionDetail" />
      <apidata name="ExceptionDetail" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ExceptionDetail.HelpLink" />
        <element api="P:System.ServiceModel.ExceptionDetail.InnerException" />
        <element api="P:System.ServiceModel.ExceptionDetail.Message" />
        <element api="P:System.ServiceModel.ExceptionDetail.StackTrace" />
        <element api="P:System.ServiceModel.ExceptionDetail.Type" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ExceptionDetail.HelpLink">
      <topicdata group="api" />
      <apidata name="HelpLink" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HelpLink" />
      <setter name="set_HelpLink" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataMemberAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ExceptionDetail.InnerException">
      <topicdata group="api" />
      <apidata name="InnerException" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InnerException" />
      <setter name="set_InnerException" />
      <returns>
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataMemberAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ExceptionDetail.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataMemberAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <topicdata group="api" />
      <apidata name="StackTrace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StackTrace" />
      <setter name="set_StackTrace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataMemberAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.ExceptionDetail.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ExceptionDetail.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Type" />
      <setter name="set_Type" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionDetail" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataMemberAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.ExceptionMapper">
      <topicdata group="api" />
      <apidata name="ExceptionMapper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ExceptionMapper.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ExceptionMapper.#ctor" />
        <element api="Overload:System.ServiceModel.ExceptionMapper.FromException">
          <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception)" />
          <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception,System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.ExceptionMapper.HandleSecurityTokenProcessingException(System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ExceptionMapper">
      <topicdata name="ExceptionMapper" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ExceptionMapper" />
      <apidata name="ExceptionMapper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ExceptionMapper.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ExceptionMapper.FromException">
          <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception)" />
          <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception,System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.ExceptionMapper.HandleSecurityTokenProcessingException(System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ExceptionMapper.FromException">
      <topicdata name="FromException" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="FromException" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception)" />
        <element api="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExceptionMapper.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception)">
      <topicdata group="api" />
      <apidata name="FromException" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ExceptionMapper.FromException" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ex">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="FromException" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ExceptionMapper.FromException" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ex">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="soapNamespace">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="trustNamespace">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExceptionMapper.HandleSecurityTokenProcessingException(System.Exception)">
      <topicdata group="api" />
      <apidata name="HandleSecurityTokenProcessingException" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ex">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExceptionMapper" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ExtensionCollection`1">
      <topicdata group="api" />
      <apidata name="ExtensionCollection" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Collections.Generic.SynchronizedCollection`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Clear" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ExtensionCollection`1.#ctor">
          <element api="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0)" />
          <element api="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0,System.Object)" />
        </element>
        <element api="M:System.ServiceModel.ExtensionCollection`1.Find``1" />
        <element api="M:System.ServiceModel.ExtensionCollection`1.FindAll``1" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Count" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)" />
        <element api="Overload:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly">
          <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly" />
          <element api="P:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ExtensionCollection`1">
      <topicdata name="ExtensionCollection" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ExtensionCollection`1" />
      <apidata name="ExtensionCollection" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Clear" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ExtensionCollection`1.Find``1" />
        <element api="M:System.ServiceModel.ExtensionCollection`1.FindAll``1" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ExtensionCollection`1">
      <topicdata name="ExtensionCollection" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ExtensionCollection`1" />
      <apidata name="ExtensionCollection" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Count" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)" />
        <element api="Overload:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly">
          <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly" />
          <element api="P:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ExtensionCollection`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0)" />
        <element api="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly">
      <topicdata name="IsReadOnly" group="list" subgroup="overload" memberSubgroup="property" pseudo="true" />
      <apidata name="IsReadOnly" group="member" subgroup="property" />
      <elements>
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly" />
        <element api="P:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ExtensionCollection`1.#ctor" />
      <parameters>
        <parameter name="owner">
          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ExtensionCollection`1.#ctor" />
      <parameters>
        <parameter name="owner">
          <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
        </parameter>
        <parameter name="syncRoot">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExtensionCollection`1.Find``1">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="E" />
      </templates>
      <returns>
        <template name="E" index="0" api="M:System.ServiceModel.ExtensionCollection`1.Find``1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ExtensionCollection`1.FindAll``1">
      <topicdata group="api" />
      <apidata name="FindAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="E" />
      </templates>
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <template name="E" index="0" api="M:System.ServiceModel.ExtensionCollection`1.FindAll``1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
          <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly">
      <topicdata group="api" eiiName="ICollection`1.IsReadOnly" />
      <apidata name="IsReadOnly" group="member" subgroup="property" />
      <memberdata visibility="private" overload="Overload:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{System#ServiceModel#IExtension{T}}#IsReadOnly" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.Collections.Generic.ICollection&lt;System.ServiceModel.IExtension&lt;T&gt;&gt;.IsReadOnly" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.ICollection`1.IsReadOnly">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.ExtensionCollection`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultCode">
      <topicdata group="api" />
      <apidata name="FaultCode" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.FaultCode.#ctor">
          <element api="M:System.ServiceModel.FaultCode.#ctor(System.String)" />
          <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)" />
          <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)" />
        </element>
        <element api="Overload:System.ServiceModel.FaultCode.CreateReceiverFaultCode">
          <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.String,System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.FaultCode.CreateSenderFaultCode">
          <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.String,System.String)" />
        </element>
        <element api="P:System.ServiceModel.FaultCode.IsPredefinedFault" />
        <element api="P:System.ServiceModel.FaultCode.IsReceiverFault" />
        <element api="P:System.ServiceModel.FaultCode.IsSenderFault" />
        <element api="P:System.ServiceModel.FaultCode.Name" />
        <element api="P:System.ServiceModel.FaultCode.Namespace" />
        <element api="P:System.ServiceModel.FaultCode.SubCode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultCode">
      <topicdata name="FaultCode" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultCode" />
      <apidata name="FaultCode" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.FaultCode.CreateReceiverFaultCode">
          <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.String,System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.FaultCode.CreateSenderFaultCode">
          <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.String,System.String)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultCode">
      <topicdata name="FaultCode" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultCode" />
      <apidata name="FaultCode" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.FaultCode.IsPredefinedFault" />
        <element api="P:System.ServiceModel.FaultCode.IsReceiverFault" />
        <element api="P:System.ServiceModel.FaultCode.IsSenderFault" />
        <element api="P:System.ServiceModel.FaultCode.Name" />
        <element api="P:System.ServiceModel.FaultCode.Namespace" />
        <element api="P:System.ServiceModel.FaultCode.SubCode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultCode.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.FaultCode.#ctor(System.String)" />
        <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)" />
        <element api="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultCode.CreateReceiverFaultCode">
      <topicdata name="CreateReceiverFaultCode" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateReceiverFaultCode" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultCode.CreateSenderFaultCode">
      <topicdata name="CreateSenderFaultCode" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateSenderFaultCode" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultCode.#ctor" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultCode.#ctor" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="subCode">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultCode.#ctor" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultCode.#ctor" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="subCode">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name="CreateReceiverFaultCode" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultCode.CreateReceiverFaultCode" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="subCode">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="CreateReceiverFaultCode" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultCode.CreateReceiverFaultCode" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name="CreateSenderFaultCode" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultCode.CreateSenderFaultCode" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="subCode">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="CreateSenderFaultCode" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultCode.CreateSenderFaultCode" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <topicdata group="api" />
      <apidata name="IsPredefinedFault" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsPredefinedFault" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <topicdata group="api" />
      <apidata name="IsReceiverFault" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsReceiverFault" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.IsSenderFault">
      <topicdata group="api" />
      <apidata name="IsSenderFault" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsSenderFault" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultCode.SubCode">
      <topicdata group="api" />
      <apidata name="SubCode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SubCode" />
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultContractAttribute">
      <topicdata group="api" />
      <apidata name="FaultContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Action" />
        <element api="P:System.ServiceModel.FaultContractAttribute.DetailType" />
        <element api="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Name" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Namespace" />
        <element api="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Method" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultContractAttribute">
      <topicdata name="FaultContractAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultContractAttribute" />
      <apidata name="FaultContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultContractAttribute">
      <topicdata name="FaultContractAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultContractAttribute" />
      <apidata name="FaultContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Action" />
        <element api="P:System.ServiceModel.FaultContractAttribute.DetailType" />
        <element api="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Name" />
        <element api="P:System.ServiceModel.FaultContractAttribute.Namespace" />
        <element api="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="detailType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.Action">
      <topicdata group="api" />
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Action" />
      <setter name="set_Action" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <topicdata group="api" />
      <apidata name="DetailType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DetailType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
      <topicdata group="api" />
      <apidata name="HasProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasProtectionLevel" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Namespace" />
      <setter name="set_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultException">
      <topicdata group="api" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.FaultException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.FaultException`1" ref="true" />
          <type api="T:System.ServiceModel.Web.WebFaultException" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.FaultException.#ctor">
          <element api="M:System.ServiceModel.FaultException.#ctor" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)" />
          <element api="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode,System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.FaultException.CreateFault">
          <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])" />
          <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])" />
        </element>
        <element api="M:System.ServiceModel.FaultException.CreateMessageFault" />
        <element api="M:System.ServiceModel.FaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.FaultException.Action" />
        <element api="P:System.ServiceModel.FaultException.Code" />
        <element api="P:System.ServiceModel.FaultException.Message" />
        <element api="P:System.ServiceModel.FaultException.Reason" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultException">
      <topicdata name="FaultException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultException" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.FaultException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.FaultException.CreateFault">
          <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])" />
          <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])" />
        </element>
        <element api="M:System.ServiceModel.FaultException.CreateMessageFault" />
        <element api="M:System.ServiceModel.FaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultException">
      <topicdata name="FaultException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultException" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.FaultException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.FaultException.Action" />
        <element api="P:System.ServiceModel.FaultException.Code" />
        <element api="P:System.ServiceModel.FaultException.Message" />
        <element api="P:System.ServiceModel.FaultException.Reason" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.FaultException">
      <topicdata name="FaultException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.FaultException" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.FaultException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.FaultException.#ctor" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)" />
        <element api="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultException.CreateFault">
      <topicdata name="CreateFault" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CreateFault" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])" />
        <element api="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="fault">
          <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="fault">
          <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException.#ctor" />
      <parameters>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultException.Action">
      <topicdata group="api" />
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Action" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultException.Code">
      <topicdata group="api" />
      <apidata name="Code" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Code" />
      <returns>
        <type api="T:System.ServiceModel.FaultCode" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <topicdata group="api" />
      <apidata name="CreateFault" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultException.CreateFault" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="messageFault">
          <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="faultDetailTypes" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <topicdata group="api" />
      <apidata name="CreateFault" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:System.ServiceModel.FaultException.CreateFault" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="messageFault">
          <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
        </parameter>
        <parameter name="faultDetailTypes" params="true">
          <arrayOf rank="1">
            <type api="T:System.Type" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.CreateMessageFault">
      <topicdata group="api" />
      <apidata name="CreateMessageFault" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name="GetObjectData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Exception" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
        </member>
        <member api="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.FaultException.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.Exception.Message">
          <type api="T:System.Exception" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Runtime.InteropServices._Exception.Message">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultException.Reason">
      <topicdata group="api" />
      <apidata name="Reason" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Reason" />
      <returns>
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultException`1">
      <topicdata group="api" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.FaultException" ref="true" />
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.Web.WebFaultException`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TDetail" />
      </templates>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.FaultException`1.#ctor">
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)" />
          <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode,System.String)" />
        </element>
        <element api="M:System.ServiceModel.FaultException`1.CreateMessageFault" />
        <element api="M:System.ServiceModel.FaultException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.FaultException`1.ToString" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.FaultException.Action" />
        <element api="P:System.ServiceModel.FaultException.Code" />
        <element api="P:System.ServiceModel.FaultException.Message" />
        <element api="P:System.ServiceModel.FaultException.Reason" />
        <element api="P:System.ServiceModel.FaultException`1.Detail" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultException`1">
      <topicdata name="FaultException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultException`1" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <templates>
        <template name="TDetail" />
      </templates>
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.FaultException`1.CreateMessageFault" />
        <element api="M:System.ServiceModel.FaultException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.FaultException`1.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultException`1">
      <topicdata name="FaultException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultException`1" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <templates>
        <template name="TDetail" />
      </templates>
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.FaultException.Action" />
        <element api="P:System.ServiceModel.FaultException.Code" />
        <element api="P:System.ServiceModel.FaultException.Message" />
        <element api="P:System.ServiceModel.FaultException.Reason" />
        <element api="P:System.ServiceModel.FaultException`1.Detail" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.FaultException`1">
      <topicdata name="FaultException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.FaultException`1" />
      <apidata name="FaultException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" />
      <templates>
        <template name="TDetail" />
      </templates>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultException`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)" />
        <element api="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.ServiceModel.FaultReason" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultException`1.#ctor" />
      <parameters>
        <parameter name="detail">
          <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
        </parameter>
        <parameter name="reason">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="code">
          <type api="T:System.ServiceModel.FaultCode" ref="true" />
        </parameter>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.CreateMessageFault">
      <topicdata group="api" />
      <apidata name="CreateMessageFault" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.FaultException.CreateMessageFault">
          <type api="T:System.ServiceModel.FaultException" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageFault" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultException`1.Detail">
      <topicdata group="api" />
      <apidata name="Detail" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Detail" />
      <returns>
        <template name="TDetail" index="0" api="T:System.ServiceModel.FaultException`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name="GetObjectData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.FaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.ServiceModel.FaultException" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
        </member>
        <member api="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.FaultException`1.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Exception.ToString">
          <type api="T:System.Exception" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Runtime.InteropServices._Exception.ToString">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultException`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultImportOptions">
      <topicdata group="api" />
      <apidata name="FaultImportOptions" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.FaultImportOptions.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.FaultImportOptions.#ctor" />
        <element api="P:System.ServiceModel.FaultImportOptions.UseMessageFormat" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultImportOptions">
      <topicdata name="FaultImportOptions" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultImportOptions" />
      <apidata name="FaultImportOptions" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.FaultImportOptions.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultImportOptions" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultImportOptions">
      <topicdata name="FaultImportOptions" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultImportOptions" />
      <apidata name="FaultImportOptions" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.FaultImportOptions.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.FaultImportOptions.UseMessageFormat" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultImportOptions" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultImportOptions.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultImportOptions" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultImportOptions.UseMessageFormat">
      <topicdata group="api" />
      <apidata name="UseMessageFormat" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseMessageFormat" />
      <setter name="set_UseMessageFormat" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultImportOptions" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultReason">
      <topicdata group="api" />
      <apidata name="FaultReason" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.FaultReason.#ctor">
          <element api="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)" />
          <element api="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})" />
          <element api="M:System.ServiceModel.FaultReason.#ctor(System.String)" />
        </element>
        <element api="Overload:System.ServiceModel.FaultReason.GetMatchingTranslation">
          <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation" />
          <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)" />
        </element>
        <element api="M:System.ServiceModel.FaultReason.ToString" />
        <element api="P:System.ServiceModel.FaultReason.Translations" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultReason">
      <topicdata name="FaultReason" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultReason" />
      <apidata name="FaultReason" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.FaultReason.GetMatchingTranslation">
          <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation" />
          <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)" />
        </element>
        <element api="M:System.ServiceModel.FaultReason.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultReason">
      <topicdata name="FaultReason" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultReason" />
      <apidata name="FaultReason" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.FaultReason.Translations" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultReason.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)" />
        <element api="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})" />
        <element api="M:System.ServiceModel.FaultReason.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <topicdata name="GetMatchingTranslation" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetMatchingTranslation" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation" />
        <element api="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReason.#ctor" />
      <parameters>
        <parameter name="translations">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReason.#ctor" />
      <parameters>
        <parameter name="translation">
          <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReason.#ctor" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <topicdata group="api" />
      <apidata name="GetMatchingTranslation" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.FaultReason.GetMatchingTranslation" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <topicdata group="api" />
      <apidata name="GetMatchingTranslation" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.FaultReason.GetMatchingTranslation" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cultureInfo">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReason.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultReason.Translations">
      <topicdata group="api" />
      <apidata name="Translations" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Translations" />
      <returns>
        <type api="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReason" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FaultReasonText">
      <topicdata group="api" />
      <apidata name="FaultReasonText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.FaultReasonText.#ctor">
          <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String)" />
          <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.Globalization.CultureInfo)" />
          <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)" />
        </element>
        <element api="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)" />
        <element api="P:System.ServiceModel.FaultReasonText.Text" />
        <element api="P:System.ServiceModel.FaultReasonText.XmlLang" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FaultReasonText">
      <topicdata name="FaultReasonText" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FaultReasonText" />
      <apidata name="FaultReasonText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FaultReasonText">
      <topicdata name="FaultReasonText" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FaultReasonText" />
      <apidata name="FaultReasonText" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.FaultReasonText.Text" />
        <element api="P:System.ServiceModel.FaultReasonText.XmlLang" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.FaultReasonText.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String)" />
        <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.Globalization.CultureInfo)" />
        <element api="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReasonText.#ctor" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.Globalization.CultureInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReasonText.#ctor" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="cultureInfo">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.FaultReasonText.#ctor" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="xmlLang">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <topicdata group="api" />
      <apidata name="Matches" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cultureInfo">
          <type api="T:System.Globalization.CultureInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultReasonText.Text">
      <topicdata group="api" />
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FaultReasonText.XmlLang">
      <topicdata group="api" />
      <apidata name="XmlLang" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_XmlLang" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FaultReasonText" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.FederatedMessageSecurityOverHttp">
      <topicdata group="api" />
      <apidata name="FederatedMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.ClaimTypeRequirements" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.EstablishSecurityContext" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedKeyType" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedTokenType" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerAddress" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerBinding" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerMetadataAddress" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.NegotiateServiceCredential" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.TokenRequestParameters" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.FederatedMessageSecurityOverHttp">
      <topicdata name="FederatedMessageSecurityOverHttp" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.FederatedMessageSecurityOverHttp" />
      <apidata name="FederatedMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.FederatedMessageSecurityOverHttp">
      <topicdata name="FederatedMessageSecurityOverHttp" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.FederatedMessageSecurityOverHttp" />
      <apidata name="FederatedMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.ClaimTypeRequirements" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.EstablishSecurityContext" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedKeyType" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedTokenType" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerAddress" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerBinding" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerMetadataAddress" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.NegotiateServiceCredential" />
        <element api="P:System.ServiceModel.FederatedMessageSecurityOverHttp.TokenRequestParameters" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.AlgorithmSuite">
      <topicdata group="api" />
      <apidata name="AlgorithmSuite" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AlgorithmSuite" />
      <setter name="set_AlgorithmSuite" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.ClaimTypeRequirements">
      <topicdata group="api" />
      <apidata name="ClaimTypeRequirements" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ClaimTypeRequirements" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.EstablishSecurityContext">
      <topicdata group="api" />
      <apidata name="EstablishSecurityContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EstablishSecurityContext" />
      <setter name="set_EstablishSecurityContext" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedKeyType">
      <topicdata group="api" />
      <apidata name="IssuedKeyType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IssuedKeyType" />
      <setter name="set_IssuedKeyType" />
      <returns>
        <type api="T:System.IdentityModel.Tokens.SecurityKeyType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedTokenType">
      <topicdata group="api" />
      <apidata name="IssuedTokenType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IssuedTokenType" />
      <setter name="set_IssuedTokenType" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerAddress">
      <topicdata group="api" />
      <apidata name="IssuerAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IssuerAddress" />
      <setter name="set_IssuerAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerBinding">
      <topicdata group="api" />
      <apidata name="IssuerBinding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IssuerBinding" />
      <setter name="set_IssuerBinding" />
      <returns>
        <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerMetadataAddress">
      <topicdata group="api" />
      <apidata name="IssuerMetadataAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IssuerMetadataAddress" />
      <setter name="set_IssuerMetadataAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.NegotiateServiceCredential">
      <topicdata group="api" />
      <apidata name="NegotiateServiceCredential" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NegotiateServiceCredential" />
      <setter name="set_NegotiateServiceCredential" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.FederatedMessageSecurityOverHttp.TokenRequestParameters">
      <topicdata group="api" />
      <apidata name="TokenRequestParameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TokenRequestParameters" />
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.Xml.XmlElement" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />
        <element api="F:System.ServiceModel.HostNameComparisonMode.Exact" />
        <element api="F:System.ServiceModel.HostNameComparisonMode.WeakWildcard" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HostNameComparisonMode.Exact">
      <topicdata group="api" notopic="" />
      <apidata name="Exact" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard">
      <topicdata group="api" notopic="" />
      <apidata name="StrongWildcard" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HostNameComparisonMode.WeakWildcard">
      <topicdata group="api" notopic="" />
      <apidata name="WeakWildcard" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.HttpBindingBase">
      <topicdata group="api" />
      <apidata name="HttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.BasicHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.BasicHttpsBinding" ref="true" />
          <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.HttpBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.CreateBindingElements" />
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.HttpBindingBase">
      <topicdata name="HttpBindingBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.HttpBindingBase" />
      <apidata name="HttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.HttpBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.HttpBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.CreateBindingElements" />
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.HttpBindingBase">
      <topicdata name="HttpBindingBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.HttpBindingBase" />
      <apidata name="HttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.AllowCookies">
      <topicdata group="api" />
      <apidata name="AllowCookies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowCookies" />
      <setter name="set_AllowCookies" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal">
      <topicdata group="api" />
      <apidata name="BypassProxyOnLocal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BypassProxyOnLocal" />
      <setter name="set_BypassProxyOnLocal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.MaxBufferSize">
      <topicdata group="api" />
      <apidata name="MaxBufferSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferSize" />
      <setter name="set_MaxBufferSize" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.ProxyAddress">
      <topicdata group="api" />
      <apidata name="ProxyAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProxyAddress" />
      <setter name="set_ProxyAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.UriTypeConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.TextEncoding">
      <topicdata group="api" />
      <apidata name="TextEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TextEncoding" />
      <setter name="set_TextEncoding" />
      <returns>
        <type api="T:System.Text.Encoding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.TransferMode">
      <topicdata group="api" />
      <apidata name="TransferMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransferMode" />
      <setter name="set_TransferMode" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.TransferMode" ref="false" />
            <enumValue>
              <field name="Buffered" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy">
      <topicdata group="api" />
      <apidata name="UseDefaultWebProxy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseDefaultWebProxy" />
      <setter name="set_UseDefaultWebProxy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.HttpClientCredentialType">
      <topicdata group="api" />
      <apidata name="HttpClientCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.HttpClientCredentialType.None" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.Basic" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.Digest" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.Ntlm" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.Windows" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.Certificate" />
        <element api="F:System.ServiceModel.HttpClientCredentialType.InheritedFromHost" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.Basic">
      <topicdata group="api" notopic="" />
      <apidata name="Basic" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.Digest">
      <topicdata group="api" notopic="" />
      <apidata name="Digest" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.InheritedFromHost">
      <topicdata group="api" notopic="" />
      <apidata name="InheritedFromHost" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>6</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.Ntlm">
      <topicdata group="api" notopic="" />
      <apidata name="Ntlm" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpClientCredentialType.Windows">
      <topicdata group="api" notopic="" />
      <apidata name="Windows" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.HttpProxyCredentialType">
      <topicdata group="api" />
      <apidata name="HttpProxyCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.HttpProxyCredentialType.None" />
        <element api="F:System.ServiceModel.HttpProxyCredentialType.Basic" />
        <element api="F:System.ServiceModel.HttpProxyCredentialType.Digest" />
        <element api="F:System.ServiceModel.HttpProxyCredentialType.Ntlm" />
        <element api="F:System.ServiceModel.HttpProxyCredentialType.Windows" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpProxyCredentialType.Basic">
      <topicdata group="api" notopic="" />
      <apidata name="Basic" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpProxyCredentialType.Digest">
      <topicdata group="api" notopic="" />
      <apidata name="Digest" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpProxyCredentialType.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpProxyCredentialType.Ntlm">
      <topicdata group="api" notopic="" />
      <apidata name="Ntlm" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.HttpProxyCredentialType.Windows">
      <topicdata group="api" notopic="" />
      <apidata name="Windows" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.HttpTransportSecurity">
      <topicdata group="api" />
      <apidata name="HttpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.HttpTransportSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.HttpTransportSecurity.#ctor" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.Realm" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.HttpTransportSecurity">
      <topicdata name="HttpTransportSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.HttpTransportSecurity" />
      <apidata name="HttpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.HttpTransportSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.HttpTransportSecurity">
      <topicdata name="HttpTransportSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.HttpTransportSecurity" />
      <apidata name="HttpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.HttpTransportSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType" />
        <element api="P:System.ServiceModel.HttpTransportSecurity.Realm" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.HttpTransportSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.HttpClientCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy">
      <topicdata group="api" />
      <apidata name="ExtendedProtectionPolicy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ExtendedProtectionPolicy" />
      <setter name="set_ExtendedProtectionPolicy" />
      <returns>
        <type api="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType">
      <topicdata group="api" />
      <apidata name="ProxyCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProxyCredentialType" />
      <setter name="set_ProxyCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.HttpProxyCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.HttpTransportSecurity.Realm">
      <topicdata group="api" />
      <apidata name="Realm" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Realm" />
      <setter name="set_Realm" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IClientChannel">
      <topicdata group="api" />
      <apidata name="IClientChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </implementors>
      <elements>
        <element api="E:System.ServiceModel.IClientChannel.UnknownMessageReceived" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
        <element api="M:System.IDisposable.Dispose" />
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IClientChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IClientChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IClientChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IClientChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="P:System.ServiceModel.IClientChannel.AllowInitializationUI" />
        <element api="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization" />
        <element api="P:System.ServiceModel.IClientChannel.Via" />
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IClientChannel">
      <topicdata name="IClientChannel" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IClientChannel" />
      <apidata name="IClientChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.IDisposable.Dispose" />
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" />
        <element api="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IClientChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IClientChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IClientChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IClientChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IClientChannel">
      <topicdata name="IClientChannel" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IClientChannel" />
      <apidata name="IClientChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.IClientChannel.AllowInitializationUI" />
        <element api="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization" />
        <element api="P:System.ServiceModel.IClientChannel.Via" />
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.IClientChannel">
      <topicdata name="IClientChannel" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.IClientChannel" />
      <apidata name="IClientChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.IClientChannel.UnknownMessageReceived" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <topicdata group="api" />
      <apidata name="AllowInitializationUI" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowInitializationUI" />
      <setter name="set_AllowInitializationUI" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginDisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <topicdata group="api" />
      <apidata name="DidInteractiveInitialization" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_DidInteractiveInitialization" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <topicdata group="api" />
      <apidata name="DisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="EndDisplayInitializationUI" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <topicdata group="api" />
      <apidata name="UnknownMessageReceived" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_UnknownMessageReceived" />
      <remover name="remove_UnknownMessageReceived" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IClientChannel.Via">
      <topicdata group="api" />
      <apidata name="Via" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Via" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ICommunicationObject">
      <topicdata group="api" />
      <apidata name="ICommunicationObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.ServiceModel.Security.WSTrustChannel" ref="true" />
        <type api="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider" ref="true" />
        <type api="T:System.ServiceModel.ChannelFactory" ref="true" />
        <type api="T:System.ServiceModel.ChannelFactory`1" ref="true" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.IServiceChannel" ref="true" />
        <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannelFactory" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannelListener" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannelListener`1" ref="true" />
        <type api="T:System.ServiceModel.Channels.IDuplexChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IDuplexSessionChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IInputChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IInputSessionChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IOutputChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IOutputSessionChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IReplyChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IReplySessionChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IRequestChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IRequestSessionChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelBase" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelFactoryBase" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelFactoryBase`1" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelListenerBase" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelListenerBase`1" ref="true" />
        <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.Discovery.AnnouncementClient" ref="true" />
        <type api="T:System.ServiceModel.Discovery.DiscoveryClient" ref="true" />
      </implementors>
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ICommunicationObject.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ICommunicationObject.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ICommunicationObject.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ICommunicationObject.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ICommunicationObject">
      <topicdata name="ICommunicationObject" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ICommunicationObject" />
      <apidata name="ICommunicationObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ICommunicationObject.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ICommunicationObject.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ICommunicationObject.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.ICommunicationObject.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ICommunicationObject">
      <topicdata name="ICommunicationObject" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ICommunicationObject" />
      <apidata name="ICommunicationObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ICommunicationObject">
      <topicdata name="ICommunicationObject" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ICommunicationObject" />
      <apidata name="ICommunicationObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ICommunicationObject.BeginClose">
      <topicdata name="BeginClose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ICommunicationObject.BeginOpen">
      <topicdata name="BeginOpen" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ICommunicationObject.Close">
      <topicdata name="Close" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Close" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ICommunicationObject.Close" />
        <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ICommunicationObject.Open">
      <topicdata name="Open" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Open" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ICommunicationObject.Open" />
        <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.Abort">
      <topicdata group="api" />
      <apidata name="Abort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.BeginClose" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginClose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.BeginClose" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginOpen" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.Close">
      <topicdata group="api" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.Close" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Close" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.Close" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ICommunicationObject.Closed">
      <topicdata group="api" />
      <apidata name="Closed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Closed" />
      <remover name="remove_Closed" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ICommunicationObject.Closing">
      <topicdata group="api" />
      <apidata name="Closing" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Closing" />
      <remover name="remove_Closing" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="EndClose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="EndOpen" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ICommunicationObject.Faulted">
      <topicdata group="api" />
      <apidata name="Faulted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Faulted" />
      <remover name="remove_Faulted" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.Open">
      <topicdata group="api" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.Open" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Open" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ICommunicationObject.Open" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ICommunicationObject.Opened">
      <topicdata group="api" />
      <apidata name="Opened" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Opened" />
      <remover name="remove_Opened" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ICommunicationObject.Opening">
      <topicdata group="api" />
      <apidata name="Opening" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Opening" />
      <remover name="remove_Opening" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ICommunicationObject.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_State" />
      <returns>
        <type api="T:System.ServiceModel.CommunicationState" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IContextChannel">
      <topicdata group="api" />
      <apidata name="IContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        <type api="T:System.ServiceModel.IServiceChannel" ref="true" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
      </implementors>
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IContextChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IContextChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IContextChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IContextChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IContextChannel">
      <topicdata name="IContextChannel" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IContextChannel" />
      <apidata name="IContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IContextChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IContextChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IContextChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IContextChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IContextChannel">
      <topicdata name="IContextChannel" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IContextChannel" />
      <apidata name="IContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.IContextChannel">
      <topicdata name="IContextChannel" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.IContextChannel" />
      <apidata name="IContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <topicdata group="api" />
      <apidata name="AllowOutputBatching" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowOutputBatching" />
      <setter name="set_AllowOutputBatching" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.InputSession">
      <topicdata group="api" />
      <apidata name="InputSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_InputSession" />
      <returns>
        <type api="T:System.ServiceModel.Channels.IInputSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.LocalAddress">
      <topicdata group="api" />
      <apidata name="LocalAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_LocalAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <topicdata group="api" />
      <apidata name="OperationTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_OperationTimeout" />
      <setter name="set_OperationTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.OutputSession">
      <topicdata group="api" />
      <apidata name="OutputSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_OutputSession" />
      <returns>
        <type api="T:System.ServiceModel.Channels.IOutputSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <topicdata group="api" />
      <apidata name="RemoteAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_RemoteAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IContextChannel.SessionId">
      <topicdata group="api" />
      <apidata name="SessionId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_SessionId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <topicdata group="api" />
      <apidata name="IDefaultCommunicationTimeouts" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelBase" ref="true" />
        <type api="T:System.ServiceModel.Channels.ChannelManagerBase" ref="true" />
      </implementors>
      <elements>
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <topicdata name="IDefaultCommunicationTimeouts" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IDefaultCommunicationTimeouts" />
      <apidata name="IDefaultCommunicationTimeouts" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout" />
        <element api="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDefaultCommunicationTimeouts" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <topicdata group="api" />
      <apidata name="CloseTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_CloseTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDefaultCommunicationTimeouts" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <topicdata group="api" />
      <apidata name="OpenTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_OpenTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDefaultCommunicationTimeouts" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <topicdata group="api" />
      <apidata name="ReceiveTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_ReceiveTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDefaultCommunicationTimeouts" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <topicdata group="api" />
      <apidata name="SendTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_SendTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDefaultCommunicationTimeouts" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IDuplexContextChannel">
      <topicdata group="api" />
      <apidata name="IDuplexContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.IDuplexContextChannel.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.IDuplexContextChannel.CloseOutputSession(System.TimeSpan)" />
        <element api="M:System.ServiceModel.IDuplexContextChannel.EndCloseOutputSession(System.IAsyncResult)" />
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IDuplexContextChannel.AutomaticInputSessionShutdown" />
        <element api="P:System.ServiceModel.IDuplexContextChannel.CallbackInstance" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IDuplexContextChannel">
      <topicdata name="IDuplexContextChannel" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IDuplexContextChannel" />
      <apidata name="IDuplexContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IDuplexContextChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.IDuplexContextChannel.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.IDuplexContextChannel.CloseOutputSession(System.TimeSpan)" />
        <element api="M:System.ServiceModel.IDuplexContextChannel.EndCloseOutputSession(System.IAsyncResult)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IDuplexContextChannel">
      <topicdata name="IDuplexContextChannel" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IDuplexContextChannel" />
      <apidata name="IDuplexContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IDuplexContextChannel.AutomaticInputSessionShutdown" />
        <element api="P:System.ServiceModel.IDuplexContextChannel.CallbackInstance" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.IDuplexContextChannel">
      <topicdata name="IDuplexContextChannel" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.IDuplexContextChannel" />
      <apidata name="IDuplexContextChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDuplexContextChannel.AutomaticInputSessionShutdown">
      <topicdata group="api" />
      <apidata name="AutomaticInputSessionShutdown" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_AutomaticInputSessionShutdown" />
      <setter name="set_AutomaticInputSessionShutdown" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IDuplexContextChannel.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="BeginCloseOutputSession" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IDuplexContextChannel.CallbackInstance">
      <topicdata group="api" />
      <apidata name="CallbackInstance" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_CallbackInstance" />
      <setter name="set_CallbackInstance" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IDuplexContextChannel.CloseOutputSession(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="CloseOutputSession" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IDuplexContextChannel.EndCloseOutputSession(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="EndCloseOutputSession" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IExtensibleObject`1">
      <topicdata group="api" />
      <apidata name="IExtensibleObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensibleObject`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <implementors>
        <type api="T:System.ServiceModel.IDuplexContextChannel" ref="true" />
        <type api="T:System.ServiceModel.IClientChannel" ref="true" />
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.IServiceChannel" ref="true" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
        <type api="T:System.ServiceModel.ClientBase`1.ChannelBase`1" ref="true">
          <type api="T:System.ServiceModel.ClientBase`1" ref="true" />
        </type>
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </implementors>
      <elements>
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IExtensibleObject`1">
      <topicdata name="IExtensibleObject" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IExtensibleObject`1" />
      <apidata name="IExtensibleObject" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensibleObject`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <topicdata group="api" />
      <apidata name="Extensions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Extensions" />
      <returns>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:System.ServiceModel.IExtensibleObject`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IExtension`1">
      <topicdata group="api" />
      <apidata name="IExtension" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtension`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <implementors>
        <type api="T:System.ServiceModel.Description.ServiceMetadataExtension" ref="true" />
        <type api="T:System.ServiceModel.Activation.VirtualPathExtension" ref="true" />
        <type api="T:System.ServiceModel.Discovery.DiscoveryOperationContextExtension" ref="true" />
        <type api="T:System.ServiceModel.Discovery.DiscoveryServiceExtension" ref="true" />
        <type api="T:System.ServiceModel.Routing.RoutingExtension" ref="true" />
        <type api="T:System.ServiceModel.Web.WebOperationContext" ref="true" />
      </implementors>
      <elements>
        <element api="M:System.ServiceModel.IExtension`1.Attach(`0)" />
        <element api="M:System.ServiceModel.IExtension`1.Detach(`0)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IExtension`1">
      <topicdata name="IExtension" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IExtension`1" />
      <apidata name="IExtension" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtension`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="M:System.ServiceModel.IExtension`1.Attach(`0)" />
        <element api="M:System.ServiceModel.IExtension`1.Detach(`0)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtension`1" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <topicdata group="api" />
      <apidata name="Attach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="owner">
          <template name="T" index="0" api="T:System.ServiceModel.IExtension`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtension`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <topicdata group="api" />
      <apidata name="Detach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="owner">
          <template name="T" index="0" api="T:System.ServiceModel.IExtension`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtension`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IExtensionCollection`1">
      <topicdata group="api" />
      <apidata name="IExtensionCollection" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <implementors>
        <type api="T:System.ServiceModel.ExtensionCollection`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Collections.Generic.ICollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.ICollection`1.Clear" />
        <element api="M:System.Collections.Generic.ICollection`1.Contains(`0)" />
        <element api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.ICollection`1.Remove(`0)" />
        <element api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <element api="M:System.ServiceModel.IExtensionCollection`1.Find``1" />
        <element api="M:System.ServiceModel.IExtensionCollection`1.FindAll``1" />
        <element api="P:System.Collections.Generic.ICollection`1.Count" />
        <element api="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IExtensionCollection`1">
      <topicdata name="IExtensionCollection" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IExtensionCollection`1" />
      <apidata name="IExtensionCollection" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Append" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.ServiceModel.IExtension`1" ref="true">
                      <specialization>
                        <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.ServiceModel.IExtension`1" ref="true">
                        <specialization>
                          <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension">
          <apidata name="Prepend" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="element">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.ServiceModel.IExtension`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="ToHashSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.HashSet`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.ServiceModel.IExtension`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.ParallelQuery`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.ServiceModel.IExtension`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.ServiceModel.IExtension`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Collections.Generic.ICollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.ICollection`1.Clear" />
        <element api="M:System.Collections.Generic.ICollection`1.Contains(`0)" />
        <element api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.ICollection`1.Remove(`0)" />
        <element api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <element api="M:System.ServiceModel.IExtensionCollection`1.Find``1" />
        <element api="M:System.ServiceModel.IExtensionCollection`1.FindAll``1" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensionCollection`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IExtensionCollection`1">
      <topicdata name="IExtensionCollection" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IExtensionCollection`1" />
      <apidata name="IExtensionCollection" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:System.ServiceModel.IExtensionCollection`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <elements>
        <element api="P:System.Collections.Generic.ICollection`1.Count" />
        <element api="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensionCollection`1" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="E" />
      </templates>
      <returns>
        <template name="E" index="0" api="M:System.ServiceModel.IExtensionCollection`1.Find``1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <topicdata group="api" />
      <apidata name="FindAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="E" />
      </templates>
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <template name="E" index="0" api="M:System.ServiceModel.IExtensionCollection`1.FindAll``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ImpersonationOption">
      <topicdata group="api" />
      <apidata name="ImpersonationOption" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.ImpersonationOption.NotAllowed" />
        <element api="F:System.ServiceModel.ImpersonationOption.Allowed" />
        <element api="F:System.ServiceModel.ImpersonationOption.Required" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ImpersonationOption.Allowed">
      <topicdata group="api" notopic="" />
      <apidata name="Allowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ImpersonationOption.NotAllowed">
      <topicdata group="api" notopic="" />
      <apidata name="NotAllowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ImpersonationOption.Required">
      <topicdata group="api" notopic="" />
      <apidata name="Required" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.InstanceContext">
      <topicdata group="api" />
      <apidata name="InstanceContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.InstanceContext" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.InstanceContext.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.InstanceContext.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.#ctor">
          <element api="M:System.ServiceModel.InstanceContext.#ctor(System.Object)" />
          <element api="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase)" />
          <element api="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.GetServiceInstance">
          <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance" />
          <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)" />
        </element>
        <element api="M:System.ServiceModel.InstanceContext.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.InstanceContext.ReleaseServiceInstance" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.InstanceContext.Extensions" />
        <element api="P:System.ServiceModel.InstanceContext.Host" />
        <element api="P:System.ServiceModel.InstanceContext.IncomingChannels" />
        <element api="P:System.ServiceModel.InstanceContext.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.InstanceContext.OutgoingChannels" />
        <element api="P:System.ServiceModel.InstanceContext.SynchronizationContext" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.InstanceContext">
      <topicdata name="InstanceContext" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.InstanceContext" />
      <apidata name="InstanceContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.InstanceContext.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.InstanceContext.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="Overload:System.ServiceModel.InstanceContext.GetServiceInstance">
          <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance" />
          <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)" />
        </element>
        <element api="M:System.ServiceModel.InstanceContext.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.InstanceContext.ReleaseServiceInstance" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.InstanceContext">
      <topicdata name="InstanceContext" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.InstanceContext" />
      <apidata name="InstanceContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.InstanceContext.Extensions" />
        <element api="P:System.ServiceModel.InstanceContext.Host" />
        <element api="P:System.ServiceModel.InstanceContext.IncomingChannels" />
        <element api="P:System.ServiceModel.InstanceContext.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.InstanceContext.OutgoingChannels" />
        <element api="P:System.ServiceModel.InstanceContext.SynchronizationContext" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.InstanceContext">
      <topicdata name="InstanceContext" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.InstanceContext" />
      <apidata name="InstanceContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.InstanceContext.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.InstanceContext.#ctor(System.Object)" />
        <element api="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase)" />
        <element api="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase,System.Object)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.InstanceContext.GetServiceInstance">
      <topicdata name="GetServiceInstance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="GetServiceInstance" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance" />
        <element api="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InstanceContext.#ctor" />
      <parameters>
        <parameter name="implementation">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InstanceContext.#ctor" />
      <parameters>
        <parameter name="host">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InstanceContext.#ctor" />
      <parameters>
        <parameter name="host">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
        <parameter name="implementation">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.Extensions">
      <topicdata group="api" />
      <apidata name="Extensions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Extensions" />
      <returns>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.InstanceContext" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IExtensibleObject`1.Extensions">
          <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.InstanceContext" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.GetServiceInstance">
      <topicdata group="api" />
      <apidata name="GetServiceInstance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.InstanceContext.GetServiceInstance" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)">
      <topicdata group="api" />
      <apidata name="GetServiceInstance" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.InstanceContext.GetServiceInstance" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.Host">
      <topicdata group="api" />
      <apidata name="Host" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Host" />
      <returns>
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.IncomingChannels">
      <topicdata group="api" />
      <apidata name="IncomingChannels" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IncomingChannels" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.IncrementManualFlowControlLimit(System.Int32)">
      <topicdata group="api" />
      <apidata name="IncrementManualFlowControlLimit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="incrementBy">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.ManualFlowControlLimit">
      <topicdata group="api" />
      <apidata name="ManualFlowControlLimit" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ManualFlowControlLimit" />
      <setter name="set_ManualFlowControlLimit" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.OutgoingChannels">
      <topicdata group="api" />
      <apidata name="OutgoingChannels" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OutgoingChannels" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InstanceContext.ReleaseServiceInstance">
      <topicdata group="api" />
      <apidata name="ReleaseServiceInstance" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.InstanceContext.SynchronizationContext">
      <topicdata group="api" />
      <apidata name="SynchronizationContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SynchronizationContext" />
      <setter name="set_SynchronizationContext" />
      <returns>
        <type api="T:System.Threading.SynchronizationContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.InstanceContextMode">
      <topicdata group="api" />
      <apidata name="InstanceContextMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.InstanceContextMode.PerSession" />
        <element api="F:System.ServiceModel.InstanceContextMode.PerCall" />
        <element api="F:System.ServiceModel.InstanceContextMode.Single" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.InstanceContextMode.PerCall">
      <topicdata group="api" notopic="" />
      <apidata name="PerCall" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.InstanceContextMode.PerSession">
      <topicdata group="api" notopic="" />
      <apidata name="PerSession" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.InstanceContextMode.Single">
      <topicdata group="api" notopic="" />
      <apidata name="Single" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.InvalidMessageContractException">
      <topicdata group="api" />
      <apidata name="InvalidMessageContractException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.InvalidMessageContractException.#ctor">
          <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
          <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.InvalidMessageContractException">
      <topicdata name="InvalidMessageContractException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.InvalidMessageContractException" />
      <apidata name="InvalidMessageContractException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.InvalidMessageContractException">
      <topicdata name="InvalidMessageContractException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.InvalidMessageContractException" />
      <apidata name="InvalidMessageContractException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.InvalidMessageContractException">
      <topicdata name="InvalidMessageContractException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.InvalidMessageContractException" />
      <apidata name="InvalidMessageContractException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.InvalidMessageContractException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor" />
        <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.InvalidMessageContractException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.InvalidMessageContractException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IOnlineStatus">
      <topicdata group="api" />
      <apidata name="IOnlineStatus" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </implementors>
      <elements>
        <element api="E:System.ServiceModel.IOnlineStatus.Offline" />
        <element api="E:System.ServiceModel.IOnlineStatus.Online" />
        <element api="P:System.ServiceModel.IOnlineStatus.IsOnline" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IOnlineStatus">
      <topicdata name="IOnlineStatus" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IOnlineStatus" />
      <apidata name="IOnlineStatus" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.IOnlineStatus.IsOnline" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IOnlineStatus" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.IOnlineStatus">
      <topicdata name="IOnlineStatus" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.IOnlineStatus" />
      <apidata name="IOnlineStatus" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.IOnlineStatus.Offline" />
        <element api="E:System.ServiceModel.IOnlineStatus.Online" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IOnlineStatus" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IOnlineStatus.IsOnline">
      <topicdata group="api" />
      <apidata name="IsOnline" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsOnline" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.IOnlineStatus.Offline">
      <topicdata group="api" />
      <apidata name="Offline" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Offline" />
      <remover name="remove_Offline" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.IOnlineStatus.Online">
      <topicdata group="api" />
      <apidata name="Online" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Online" />
      <remover name="remove_Online" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.IServiceChannel">
      <topicdata group="api" />
      <apidata name="IServiceChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        <type api="T:System.ServiceModel.Channels.IChannel" ref="true" />
        <type api="T:System.ServiceModel.ICommunicationObject" ref="true" />
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.IContextChannel" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IServiceChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IServiceChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IServiceChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IServiceChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
        <element api="P:System.ServiceModel.IServiceChannel.ListenUri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.IServiceChannel">
      <topicdata name="IServiceChannel" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.IServiceChannel" />
      <apidata name="IServiceChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.Channels.IChannel.GetProperty``1" />
        <element api="M:System.ServiceModel.ICommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.IServiceChannel.BeginClose">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IServiceChannel.BeginOpen">
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.IServiceChannel.Close">
          <element api="M:System.ServiceModel.ICommunicationObject.Close" />
          <element api="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="Overload:System.ServiceModel.IServiceChannel.Open">
          <element api="M:System.ServiceModel.ICommunicationObject.Open" />
          <element api="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IServiceChannel" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.IServiceChannel">
      <topicdata name="IServiceChannel" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.IServiceChannel" />
      <apidata name="IServiceChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ICommunicationObject.State" />
        <element api="P:System.ServiceModel.IContextChannel.AllowOutputBatching" />
        <element api="P:System.ServiceModel.IContextChannel.InputSession" />
        <element api="P:System.ServiceModel.IContextChannel.LocalAddress" />
        <element api="P:System.ServiceModel.IContextChannel.OperationTimeout" />
        <element api="P:System.ServiceModel.IContextChannel.OutputSession" />
        <element api="P:System.ServiceModel.IContextChannel.RemoteAddress" />
        <element api="P:System.ServiceModel.IContextChannel.SessionId" />
        <element api="P:System.ServiceModel.IExtensibleObject`1.Extensions" />
        <element api="P:System.ServiceModel.IServiceChannel.ListenUri" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IServiceChannel" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.IServiceChannel">
      <topicdata name="IServiceChannel" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.IServiceChannel" />
      <apidata name="IServiceChannel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.ICommunicationObject.Closed" />
        <element api="E:System.ServiceModel.ICommunicationObject.Closing" />
        <element api="E:System.ServiceModel.ICommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opened" />
        <element api="E:System.ServiceModel.ICommunicationObject.Opening" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IServiceChannel" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.IServiceChannel.ListenUri">
      <topicdata group="api" />
      <apidata name="ListenUri" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_ListenUri" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.IServiceChannel" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageBodyMemberAttribute">
      <topicdata group="api" />
      <apidata name="MessageBodyMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageBodyMemberAttribute.Order" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageBodyMemberAttribute">
      <topicdata name="MessageBodyMemberAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageBodyMemberAttribute" />
      <apidata name="MessageBodyMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageBodyMemberAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageBodyMemberAttribute">
      <topicdata name="MessageBodyMemberAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageBodyMemberAttribute" />
      <apidata name="MessageBodyMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageBodyMemberAttribute.Order" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageBodyMemberAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageBodyMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <topicdata group="api" />
      <apidata name="Order" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Order" />
      <setter name="set_Order" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageBodyMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageContractAttribute">
      <topicdata group="api" />
      <apidata name="MessageContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageContractAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageContractAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractAttribute.IsWrapped" />
        <element api="P:System.ServiceModel.MessageContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractAttribute.WrapperName" />
        <element api="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Struct" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageContractAttribute">
      <topicdata name="MessageContractAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageContractAttribute" />
      <apidata name="MessageContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageContractAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageContractAttribute">
      <topicdata name="MessageContractAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageContractAttribute" />
      <apidata name="MessageContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageContractAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractAttribute.IsWrapped" />
        <element api="P:System.ServiceModel.MessageContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractAttribute.WrapperName" />
        <element api="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractAttribute.HasProtectionLevel">
      <topicdata group="api" />
      <apidata name="HasProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasProtectionLevel" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <topicdata group="api" />
      <apidata name="IsWrapped" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsWrapped" />
      <setter name="set_IsWrapped" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <topicdata group="api" />
      <apidata name="WrapperName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WrapperName" />
      <setter name="set_WrapperName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <topicdata group="api" />
      <apidata name="WrapperNamespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WrapperNamespace" />
      <setter name="set_WrapperNamespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageContractMemberAttribute">
      <topicdata group="api" />
      <apidata name="MessageContractMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.MessageBodyMemberAttribute" ref="true" />
          <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageContractMemberAttribute">
      <topicdata name="MessageContractMemberAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageContractMemberAttribute" />
      <apidata name="MessageContractMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageContractMemberAttribute">
      <topicdata name="MessageContractMemberAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageContractMemberAttribute" />
      <apidata name="MessageContractMemberAttribute" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel">
      <topicdata group="api" />
      <apidata name="HasProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasProtectionLevel" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Namespace" />
      <setter name="set_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageCredentialType">
      <topicdata group="api" />
      <apidata name="MessageCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.MessageCredentialType.None" />
        <element api="F:System.ServiceModel.MessageCredentialType.Windows" />
        <element api="F:System.ServiceModel.MessageCredentialType.UserName" />
        <element api="F:System.ServiceModel.MessageCredentialType.Certificate" />
        <element api="F:System.ServiceModel.MessageCredentialType.IssuedToken" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MessageCredentialType.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MessageCredentialType.IssuedToken">
      <topicdata group="api" notopic="" />
      <apidata name="IssuedToken" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MessageCredentialType.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MessageCredentialType.UserName">
      <topicdata group="api" notopic="" />
      <apidata name="UserName" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MessageCredentialType.Windows">
      <topicdata group="api" notopic="" />
      <apidata name="Windows" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageHeader`1">
      <topicdata group="api" />
      <apidata name="MessageHeader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeader`1.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.MessageHeader`1.#ctor">
          <element api="M:System.ServiceModel.MessageHeader`1.#ctor" />
          <element api="M:System.ServiceModel.MessageHeader`1.#ctor(`0)" />
          <element api="M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)" />
        <element api="P:System.ServiceModel.MessageHeader`1.Actor" />
        <element api="P:System.ServiceModel.MessageHeader`1.Content" />
        <element api="P:System.ServiceModel.MessageHeader`1.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeader`1.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageHeader`1">
      <topicdata name="MessageHeader" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageHeader`1" />
      <apidata name="MessageHeader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeader`1.#ctor" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageHeader`1">
      <topicdata name="MessageHeader" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageHeader`1" />
      <apidata name="MessageHeader" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeader`1.#ctor" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:System.ServiceModel.MessageHeader`1.Actor" />
        <element api="P:System.ServiceModel.MessageHeader`1.Content" />
        <element api="P:System.ServiceModel.MessageHeader`1.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeader`1.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MessageHeader`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MessageHeader`1.#ctor" />
        <element api="M:System.ServiceModel.MessageHeader`1.#ctor(`0)" />
        <element api="M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeader`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeader`1.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeader`1.#ctor(`0)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeader`1.#ctor" />
      <parameters>
        <parameter name="content">
          <template name="T" index="0" api="T:System.ServiceModel.MessageHeader`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeader`1.#ctor" />
      <parameters>
        <parameter name="content">
          <template name="T" index="0" api="T:System.ServiceModel.MessageHeader`1" />
        </parameter>
        <parameter name="mustUnderstand">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="actor">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="relay">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeader`1.Actor">
      <topicdata group="api" />
      <apidata name="Actor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Actor" />
      <setter name="set_Actor" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeader`1.Content">
      <topicdata group="api" />
      <apidata name="Content" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Content" />
      <setter name="set_Content" />
      <returns>
        <template name="T" index="0" api="T:System.ServiceModel.MessageHeader`1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="GetUntypedHeader" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageHeader" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeader`1.MustUnderstand">
      <topicdata group="api" />
      <apidata name="MustUnderstand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MustUnderstand" />
      <setter name="set_MustUnderstand" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeader`1.Relay">
      <topicdata group="api" />
      <apidata name="Relay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Relay" />
      <setter name="set_Relay" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeader`1" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageHeaderArrayAttribute">
      <topicdata group="api" />
      <apidata name="MessageHeaderArrayAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
          <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Actor" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageHeaderArrayAttribute">
      <topicdata name="MessageHeaderArrayAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageHeaderArrayAttribute" />
      <apidata name="MessageHeaderArrayAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderArrayAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageHeaderArrayAttribute">
      <topicdata name="MessageHeaderArrayAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageHeaderArrayAttribute" />
      <apidata name="MessageHeaderArrayAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Actor" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderArrayAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderArrayAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageHeaderAttribute">
      <topicdata group="api" />
      <apidata name="MessageHeaderAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.MessageHeaderArrayAttribute" ref="true" />
          <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageHeaderAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Actor" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageHeaderAttribute">
      <topicdata name="MessageHeaderAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageHeaderAttribute" />
      <apidata name="MessageHeaderAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageHeaderAttribute">
      <topicdata name="MessageHeaderAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageHeaderAttribute" />
      <apidata name="MessageHeaderAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageHeaderAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Actor" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.MessageHeaderAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderAttribute.Actor">
      <topicdata group="api" />
      <apidata name="Actor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Actor" />
      <setter name="set_Actor" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand">
      <topicdata group="api" />
      <apidata name="MustUnderstand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MustUnderstand" />
      <setter name="set_MustUnderstand" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderAttribute.Relay">
      <topicdata group="api" />
      <apidata name="Relay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Relay" />
      <setter name="set_Relay" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageHeaderException">
      <topicdata group="api" />
      <apidata name="MessageHeaderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MessageHeaderException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ProtocolException" ref="true" />
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.MessageHeaderException.#ctor">
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)" />
          <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.MessageHeaderException.HeaderName" />
        <element api="P:System.ServiceModel.MessageHeaderException.HeaderNamespace" />
        <element api="P:System.ServiceModel.MessageHeaderException.IsDuplicate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageHeaderException">
      <topicdata name="MessageHeaderException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageHeaderException" />
      <apidata name="MessageHeaderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MessageHeaderException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageHeaderException">
      <topicdata name="MessageHeaderException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageHeaderException" />
      <apidata name="MessageHeaderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MessageHeaderException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.MessageHeaderException.HeaderName" />
        <element api="P:System.ServiceModel.MessageHeaderException.HeaderNamespace" />
        <element api="P:System.ServiceModel.MessageHeaderException.IsDuplicate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.MessageHeaderException">
      <topicdata name="MessageHeaderException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.MessageHeaderException" />
      <apidata name="MessageHeaderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MessageHeaderException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MessageHeaderException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)" />
        <element api="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isDuplicate">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="headerName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="headerName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isDuplicate">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="headerName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isDuplicate">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageHeaderException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="headerName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ns">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <topicdata group="api" />
      <apidata name="HeaderName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HeaderName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <topicdata group="api" />
      <apidata name="HeaderNamespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HeaderNamespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <topicdata group="api" />
      <apidata name="IsDuplicate" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsDuplicate" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageParameterAttribute">
      <topicdata group="api" />
      <apidata name="MessageParameterAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageParameterAttribute.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Parameter" />
              <field name="ReturnValue" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageParameterAttribute">
      <topicdata name="MessageParameterAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageParameterAttribute" />
      <apidata name="MessageParameterAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageParameterAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageParameterAttribute">
      <topicdata name="MessageParameterAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageParameterAttribute" />
      <apidata name="MessageParameterAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageParameterAttribute.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageParameterAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageParameterAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageParameterAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageParameterAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessagePropertyAttribute">
      <topicdata group="api" />
      <apidata name="MessagePropertyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessagePropertyAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessagePropertyAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessagePropertyAttribute.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.MessagePropertyAttribute">
      <topicdata name="MessagePropertyAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessagePropertyAttribute" />
      <apidata name="MessagePropertyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessagePropertyAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessagePropertyAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessagePropertyAttribute">
      <topicdata name="MessagePropertyAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessagePropertyAttribute" />
      <apidata name="MessagePropertyAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessagePropertyAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessagePropertyAttribute.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessagePropertyAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessagePropertyAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessagePropertyAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessagePropertyAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessagePropertyAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageQuerySet">
      <topicdata group="api" />
      <apidata name="MessageQuerySet" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageQuerySet.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.ServiceModel.Dispatcher.MessageQuery" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
        <element api="M:System.Collections.Generic.Dictionary`2.Clear" />
        <element api="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
        <element api="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
        <element api="M:System.Collections.Generic.Dictionary`2.GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.MessageQuerySet.#ctor">
          <element api="M:System.ServiceModel.MessageQuerySet.#ctor" />
          <element api="M:System.ServiceModel.MessageQuerySet.#ctor(System.ServiceModel.Dispatcher.MessageQueryTable{System.String})" />
        </element>
        <element api="M:System.ServiceModel.MessageQuerySet.GetMessageQueryTable" />
        <element api="P:System.Collections.Generic.Dictionary`2.Comparer" />
        <element api="P:System.Collections.Generic.Dictionary`2.Count" />
        <element api="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
        <element api="P:System.Collections.Generic.Dictionary`2.Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.Values" />
        <element api="P:System.ServiceModel.MessageQuerySet.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageQuerySet">
      <topicdata name="MessageQuerySet" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageQuerySet" />
      <apidata name="MessageQuerySet" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageQuerySet.#ctor" />
      <elements>
        <element api="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
        <element api="M:System.Collections.Generic.Dictionary`2.Clear" />
        <element api="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
        <element api="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
        <element api="M:System.Collections.Generic.Dictionary`2.GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)" />
        <element api="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageQuerySet.GetMessageQueryTable" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageQuerySet">
      <topicdata name="MessageQuerySet" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageQuerySet" />
      <apidata name="MessageQuerySet" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageQuerySet.#ctor" />
      <elements>
        <element api="P:System.Collections.Generic.Dictionary`2.Comparer" />
        <element api="P:System.Collections.Generic.Dictionary`2.Count" />
        <element api="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
        <element api="P:System.Collections.Generic.Dictionary`2.Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys" />
        <element api="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values" />
        <element api="P:System.Collections.Generic.Dictionary`2.Values" />
        <element api="P:System.ServiceModel.MessageQuerySet.Name" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MessageQuerySet.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MessageQuerySet.#ctor" />
        <element api="M:System.ServiceModel.MessageQuerySet.#ctor(System.ServiceModel.Dispatcher.MessageQueryTable{System.String})" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageQuerySet.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageQuerySet.#ctor" />
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageQuerySet.#ctor(System.ServiceModel.Dispatcher.MessageQueryTable{System.String})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MessageQuerySet.#ctor" />
      <parameters>
        <parameter name="queryTable">
          <type api="T:System.ServiceModel.Dispatcher.MessageQueryTable`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageQuerySet.GetMessageQueryTable">
      <topicdata group="api" />
      <apidata name="GetMessageQueryTable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.ServiceModel.Dispatcher.MessageQueryTable`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageQuerySet.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activities" module="System.ServiceModel.Activities" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageQuerySet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.MessageSecurityOverHttp">
      <topicdata group="api" />
      <apidata name="MessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverHttp.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageSecurityOverHttp.#ctor" />
        <element api="M:System.ServiceModel.MessageSecurityOverHttp.IsSecureConversationEnabled" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageSecurityOverHttp">
      <topicdata name="MessageSecurityOverHttp" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageSecurityOverHttp" />
      <apidata name="MessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageSecurityOverHttp.IsSecureConversationEnabled" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageSecurityOverHttp">
      <topicdata name="MessageSecurityOverHttp" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageSecurityOverHttp" />
      <apidata name="MessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageSecurityOverHttp.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite">
      <topicdata group="api" />
      <apidata name="AlgorithmSuite" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AlgorithmSuite" />
      <setter name="set_AlgorithmSuite" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageSecurityOverHttp.IsSecureConversationEnabled">
      <topicdata group="api" />
      <apidata name="IsSecureConversationEnabled" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential">
      <topicdata group="api" />
      <apidata name="NegotiateServiceCredential" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_NegotiateServiceCredential" />
      <setter name="set_NegotiateServiceCredential" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MessageSecurityOverMsmq">
      <topicdata group="api" />
      <apidata name="MessageSecurityOverMsmq" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
        <element api="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageSecurityOverMsmq">
      <topicdata name="MessageSecurityOverMsmq" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageSecurityOverMsmq" />
      <apidata name="MessageSecurityOverMsmq" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageSecurityOverMsmq">
      <topicdata name="MessageSecurityOverMsmq" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageSecurityOverMsmq" />
      <apidata name="MessageSecurityOverMsmq" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite">
      <topicdata group="api" />
      <apidata name="AlgorithmSuite" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AlgorithmSuite" />
      <setter name="set_AlgorithmSuite" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
            </typeValue>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Default</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
            <enumValue>
              <field name="Windows" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.MessageSecurityOverTcp">
      <topicdata group="api" />
      <apidata name="MessageSecurityOverTcp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverTcp.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.MessageSecurityOverTcp.#ctor" />
        <element api="P:System.ServiceModel.MessageSecurityOverTcp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverTcp.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageSecurityOverTcp">
      <topicdata name="MessageSecurityOverTcp" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageSecurityOverTcp" />
      <apidata name="MessageSecurityOverTcp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverTcp.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageSecurityOverTcp">
      <topicdata name="MessageSecurityOverTcp" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageSecurityOverTcp" />
      <apidata name="MessageSecurityOverTcp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MessageSecurityOverTcp.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.MessageSecurityOverTcp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverTcp.ClientCredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MessageSecurityOverTcp.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverTcp.AlgorithmSuite">
      <topicdata group="api" />
      <apidata name="AlgorithmSuite" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AlgorithmSuite" />
      <setter name="set_AlgorithmSuite" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.ServiceModel.Security.SecurityAlgorithmSuite" ref="true" />
            </typeValue>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Default</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityOverTcp.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.MessageCredentialType" ref="false" />
            <enumValue>
              <field name="Windows" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.MessageSecurityVersion">
      <topicdata group="api" />
      <apidata name="MessageSecurityVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.BasicSecurityProfileVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.Default" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecureConversationVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityPolicyVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityTokenVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.TrustVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MessageSecurityVersion">
      <topicdata name="MessageSecurityVersion" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MessageSecurityVersion" />
      <apidata name="MessageSecurityVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MessageSecurityVersion">
      <topicdata name="MessageSecurityVersion" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MessageSecurityVersion" />
      <apidata name="MessageSecurityVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.MessageSecurityVersion.BasicSecurityProfileVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.Default" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecureConversationVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityPolicyVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityTokenVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.SecurityVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.TrustVersion" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11" />
        <element api="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.BasicSecurityProfileVersion">
      <topicdata group="api" />
      <apidata name="BasicSecurityProfileVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_BasicSecurityProfileVersion" />
      <returns>
        <type api="T:System.ServiceModel.Security.BasicSecurityProfileVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.Default">
      <topicdata group="api" />
      <apidata name="Default" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Default" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.SecureConversationVersion">
      <topicdata group="api" />
      <apidata name="SecureConversationVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SecureConversationVersion" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecureConversationVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.SecurityPolicyVersion">
      <topicdata group="api" />
      <apidata name="SecurityPolicyVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_SecurityPolicyVersion" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityPolicyVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.SecurityTokenVersion">
      <topicdata group="api" />
      <apidata name="SecurityTokenVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SecurityTokenVersion" />
      <returns>
        <type api="T:System.IdentityModel.Selectors.SecurityTokenVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.SecurityVersion">
      <topicdata group="api" />
      <apidata name="SecurityVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SecurityVersion" />
      <returns>
        <type api="T:System.ServiceModel.Security.SecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.TrustVersion">
      <topicdata group="api" />
      <apidata name="TrustVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TrustVersion" />
      <returns>
        <type api="T:System.ServiceModel.Security.TrustVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
      <topicdata group="api" />
      <apidata name="WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10">
      <topicdata group="api" />
      <apidata name="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12">
      <topicdata group="api" />
      <apidata name="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
      <topicdata group="api" />
      <apidata name="WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11">
      <topicdata group="api" />
      <apidata name="WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10">
      <topicdata group="api" />
      <apidata name="WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MessageSecurityVersion" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqAuthenticationMode">
      <topicdata group="api" />
      <apidata name="MsmqAuthenticationMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.MsmqAuthenticationMode.None" />
        <element api="F:System.ServiceModel.MsmqAuthenticationMode.WindowsDomain" />
        <element api="F:System.ServiceModel.MsmqAuthenticationMode.Certificate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqAuthenticationMode.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqAuthenticationMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqAuthenticationMode.WindowsDomain">
      <topicdata group="api" notopic="" />
      <apidata name="WindowsDomain" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqBindingBase">
      <topicdata group="api" />
      <apidata name="MsmqBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
          <type api="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.MsmqBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.CreateBindingElements" />
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.MsmqBindingBase.#ctor" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Durable" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
        <element api="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Scheme" />
        <element api="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.MsmqBindingBase.TimeToLive" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ValidityDuration" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MsmqBindingBase">
      <topicdata name="MsmqBindingBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MsmqBindingBase" />
      <apidata name="MsmqBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.MsmqBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.MsmqBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.CreateBindingElements" />
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MsmqBindingBase">
      <topicdata name="MsmqBindingBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MsmqBindingBase" />
      <apidata name="MsmqBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Durable" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
        <element api="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Scheme" />
        <element api="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.MsmqBindingBase.TimeToLive" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ValidityDuration" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqBindingBase.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue">
      <topicdata group="api" />
      <apidata name="CustomDeadLetterQueue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CustomDeadLetterQueue" />
      <setter name="set_CustomDeadLetterQueue" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue">
      <topicdata group="api" />
      <apidata name="DeadLetterQueue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DeadLetterQueue" />
      <setter name="set_DeadLetterQueue" />
      <returns>
        <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.DeadLetterQueue" ref="false" />
            <enumValue>
              <field name="System" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.Durable">
      <topicdata group="api" />
      <apidata name="Durable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Durable" />
      <setter name="set_Durable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce">
      <topicdata group="api" />
      <apidata name="ExactlyOnce" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ExactlyOnce" />
      <setter name="set_ExactlyOnce" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles">
      <topicdata group="api" />
      <apidata name="MaxRetryCycles" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxRetryCycles" />
      <setter name="set_MaxRetryCycles" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>2</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled">
      <topicdata group="api" />
      <apidata name="ReceiveContextEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReceiveContextEnabled" />
      <setter name="set_ReceiveContextEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling">
      <topicdata group="api" />
      <apidata name="ReceiveErrorHandling" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReceiveErrorHandling" />
      <setter name="set_ReceiveErrorHandling" />
      <returns>
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
            <enumValue>
              <field name="Fault" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount">
      <topicdata group="api" />
      <apidata name="ReceiveRetryCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReceiveRetryCount" />
      <setter name="set_ReceiveRetryCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>5</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay">
      <topicdata group="api" />
      <apidata name="RetryCycleDelay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RetryCycleDelay" />
      <setter name="set_RetryCycleDelay" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.TimeSpan" ref="false" />
            </typeValue>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>00:30:00</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.TimeToLive">
      <topicdata group="api" />
      <apidata name="TimeToLive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TimeToLive" />
      <setter name="set_TimeToLive" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.TimeSpan" ref="false" />
            </typeValue>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.00:00:00</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing">
      <topicdata group="api" />
      <apidata name="UseMsmqTracing" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseMsmqTracing" />
      <setter name="set_UseMsmqTracing" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal">
      <topicdata group="api" />
      <apidata name="UseSourceJournal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseSourceJournal" />
      <setter name="set_UseSourceJournal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqBindingBase.ValidityDuration">
      <topicdata group="api" />
      <apidata name="ValidityDuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ValidityDuration" />
      <setter name="set_ValidityDuration" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.TimeSpan" ref="false" />
            </typeValue>
          </argument>
          <argument>
            <type api="T:System.String" ref="true" />
            <value>00:05:00</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.MsmqEncryptionAlgorithm">
      <topicdata group="api" />
      <apidata name="MsmqEncryptionAlgorithm" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.MsmqEncryptionAlgorithm.RC4Stream" />
        <element api="F:System.ServiceModel.MsmqEncryptionAlgorithm.Aes" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqEncryptionAlgorithm.Aes">
      <topicdata group="api" notopic="" />
      <apidata name="Aes" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqEncryptionAlgorithm.RC4Stream">
      <topicdata group="api" notopic="" />
      <apidata name="RC4Stream" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqException">
      <topicdata group="api" />
      <apidata name="MsmqException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Runtime.InteropServices.ExternalException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Runtime.InteropServices.ExternalException.ToString" />
        <element api="Overload:System.ServiceModel.MsmqException.#ctor">
          <element api="M:System.ServiceModel.MsmqException.#ctor" />
          <element api="M:System.ServiceModel.MsmqException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.MsmqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Exception)" />
          <element api="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Int32)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.Runtime.InteropServices.ExternalException.ErrorCode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MsmqException">
      <topicdata name="MsmqException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MsmqException" />
      <apidata name="MsmqException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Runtime.InteropServices.ExternalException.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MsmqException">
      <topicdata name="MsmqException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MsmqException" />
      <apidata name="MsmqException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.Runtime.InteropServices.ExternalException.ErrorCode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.MsmqException">
      <topicdata name="MsmqException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.MsmqException" />
      <apidata name="MsmqException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MsmqException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MsmqException.#ctor" />
        <element api="M:System.ServiceModel.MsmqException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.MsmqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Exception)" />
        <element api="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.MsmqException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="inner">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="error">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqPoisonMessageException">
      <topicdata group="api" />
      <apidata name="MsmqPoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor">
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64)" />
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64,System.Exception)" />
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.MsmqPoisonMessageException.MessageLookupId" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MsmqPoisonMessageException">
      <topicdata name="MsmqPoisonMessageException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MsmqPoisonMessageException" />
      <apidata name="MsmqPoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MsmqPoisonMessageException">
      <topicdata name="MsmqPoisonMessageException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MsmqPoisonMessageException" />
      <apidata name="MsmqPoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
        <element api="P:System.ServiceModel.MsmqPoisonMessageException.MessageLookupId" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.MsmqPoisonMessageException">
      <topicdata name="MsmqPoisonMessageException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.MsmqPoisonMessageException" />
      <apidata name="MsmqPoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64)" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64,System.Exception)" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <parameters>
        <parameter name="messageLookupId">
          <type api="T:System.Int64" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <parameters>
        <parameter name="messageLookupId">
          <type api="T:System.Int64" ref="false" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqPoisonMessageException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqPoisonMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name="GetObjectData" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Exception" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
        </member>
        <member api="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqPoisonMessageException.MessageLookupId">
      <topicdata group="api" />
      <apidata name="MessageLookupId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MessageLookupId" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqSecureHashAlgorithm">
      <topicdata group="api" />
      <apidata name="MsmqSecureHashAlgorithm" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.MsmqSecureHashAlgorithm.MD5" />
        <element api="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha1" />
        <element api="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha256" />
        <element api="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha512" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqSecureHashAlgorithm.MD5">
      <topicdata group="api" notopic="" />
      <apidata name="MD5" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha1">
      <topicdata group="api" notopic="" />
      <apidata name="Sha1" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha256">
      <topicdata group="api" notopic="" />
      <apidata name="Sha256" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha512">
      <topicdata group="api" notopic="" />
      <apidata name="Sha512" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.MsmqTransportSecurity">
      <topicdata group="api" />
      <apidata name="MsmqTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MsmqTransportSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.MsmqTransportSecurity.#ctor">
          <element api="M:System.ServiceModel.MsmqTransportSecurity.#ctor" />
          <element api="M:System.ServiceModel.MsmqTransportSecurity.#ctor(System.ServiceModel.MsmqTransportSecurity)" />
        </element>
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqEncryptionAlgorithm" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqSecureHashAlgorithm" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.MsmqTransportSecurity">
      <topicdata name="MsmqTransportSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.MsmqTransportSecurity" />
      <apidata name="MsmqTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MsmqTransportSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.MsmqTransportSecurity">
      <topicdata name="MsmqTransportSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.MsmqTransportSecurity" />
      <apidata name="MsmqTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.MsmqTransportSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqEncryptionAlgorithm" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" />
        <element api="P:System.ServiceModel.MsmqTransportSecurity.MsmqSecureHashAlgorithm" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.MsmqTransportSecurity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.MsmqTransportSecurity.#ctor" />
        <element api="M:System.ServiceModel.MsmqTransportSecurity.#ctor(System.ServiceModel.MsmqTransportSecurity)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqTransportSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqTransportSecurity.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.MsmqTransportSecurity.#ctor(System.ServiceModel.MsmqTransportSecurity)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.MsmqTransportSecurity.#ctor" />
      <parameters>
        <parameter name="other">
          <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode">
      <topicdata group="api" />
      <apidata name="MsmqAuthenticationMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MsmqAuthenticationMode" />
      <setter name="set_MsmqAuthenticationMode" />
      <returns>
        <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.MsmqAuthenticationMode" ref="false" />
            <enumValue>
              <field name="WindowsDomain" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqTransportSecurity.MsmqEncryptionAlgorithm">
      <topicdata group="api" />
      <apidata name="MsmqEncryptionAlgorithm" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MsmqEncryptionAlgorithm" />
      <setter name="set_MsmqEncryptionAlgorithm" />
      <returns>
        <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.MsmqEncryptionAlgorithm" ref="false" />
            <enumValue>
              <field name="RC4Stream" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel">
      <topicdata group="api" />
      <apidata name="MsmqProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MsmqProtectionLevel" />
      <setter name="set_MsmqProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
            <enumValue>
              <field name="Sign" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.MsmqTransportSecurity.MsmqSecureHashAlgorithm">
      <topicdata group="api" />
      <apidata name="MsmqSecureHashAlgorithm" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MsmqSecureHashAlgorithm" />
      <setter name="set_MsmqSecureHashAlgorithm" />
      <returns>
        <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.MsmqSecureHashAlgorithm" ref="false" />
            <enumValue>
              <field name="Sha256" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.NamedPipeTransportSecurity">
      <topicdata group="api" />
      <apidata name="NamedPipeTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor" />
        <element api="P:System.ServiceModel.NamedPipeTransportSecurity.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NamedPipeTransportSecurity">
      <topicdata name="NamedPipeTransportSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NamedPipeTransportSecurity" />
      <apidata name="NamedPipeTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NamedPipeTransportSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NamedPipeTransportSecurity">
      <topicdata name="NamedPipeTransportSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NamedPipeTransportSecurity" />
      <apidata name="NamedPipeTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.NamedPipeTransportSecurity.ProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NamedPipeTransportSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NamedPipeTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NamedPipeTransportSecurity.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NamedPipeTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
            <enumValue>
              <field name="EncryptAndSign" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.NetHttpBinding">
      <topicdata group="api" />
      <apidata name="NetHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetHttpBinding.#ctor">
          <element api="M:System.ServiceModel.NetHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
          <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,System.Boolean)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.NetHttpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.NetHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.NetHttpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetHttpBinding.Security" />
        <element api="P:System.ServiceModel.NetHttpBinding.WebSocketSettings" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetHttpBinding">
      <topicdata name="NetHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetHttpBinding" />
      <apidata name="NetHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.NetHttpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetHttpBinding">
      <topicdata name="NetHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetHttpBinding" />
      <apidata name="NetHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.NetHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.NetHttpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetHttpBinding.Security" />
        <element api="P:System.ServiceModel.NetHttpBinding.WebSocketSettings" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
        <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetHttpBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpSecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.NetHttpBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpBinding.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
            <enumValue>
              <field name="Binary" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetHttpBinding.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReliableSession" />
      <setter name="set_ReliableSession" />
      <returns>
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpBinding.WebSocketSettings">
      <topicdata group="api" />
      <apidata name="WebSocketSettings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WebSocketSettings" />
      <returns>
        <type api="T:System.ServiceModel.Channels.WebSocketTransportSettings" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetHttpMessageEncoding">
      <topicdata group="api" />
      <apidata name="NetHttpMessageEncoding" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.NetHttpMessageEncoding.Binary" />
        <element api="F:System.ServiceModel.NetHttpMessageEncoding.Text" />
        <element api="F:System.ServiceModel.NetHttpMessageEncoding.Mtom" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetHttpMessageEncoding.Binary">
      <topicdata group="api" notopic="" />
      <apidata name="Binary" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetHttpMessageEncoding.Mtom">
      <topicdata group="api" notopic="" />
      <apidata name="Mtom" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetHttpMessageEncoding.Text">
      <topicdata group="api" notopic="" />
      <apidata name="Text" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetHttpsBinding">
      <topicdata group="api" />
      <apidata name="NetHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpsBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.HttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpsBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpsBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetHttpsBinding.#ctor">
          <element api="M:System.ServiceModel.NetHttpsBinding.#ctor" />
          <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)" />
          <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode,System.Boolean)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.NetHttpsBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.NetHttpsBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.NetHttpsBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetHttpsBinding.Security" />
        <element api="P:System.ServiceModel.NetHttpsBinding.WebSocketSettings" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetHttpsBinding">
      <topicdata name="NetHttpsBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetHttpsBinding" />
      <apidata name="NetHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpsBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpsBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetHttpsBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.NetHttpsBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetHttpsBinding">
      <topicdata name="NetHttpsBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetHttpsBinding" />
      <apidata name="NetHttpsBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetHttpsBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.HttpBindingBase.AllowCookies" />
        <element api="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxBufferSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.HttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.HttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.HttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.HttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.HttpBindingBase.TransferMode" />
        <element api="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.NetHttpsBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.NetHttpsBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetHttpsBinding.Security" />
        <element api="P:System.ServiceModel.NetHttpsBinding.WebSocketSettings" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetHttpsBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetHttpsBinding.#ctor" />
        <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)" />
        <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpsBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpsBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpsBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.BasicHttpsSecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetHttpsBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.NetHttpsBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetHttpsBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpsBinding.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.NetHttpMessageEncoding" ref="false" />
            <enumValue>
              <field name="Binary" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetHttpsBinding.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReliableSession" />
      <setter name="set_ReliableSession" />
      <returns>
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpsBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.BasicHttpsSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetHttpsBinding.WebSocketSettings">
      <topicdata group="api" />
      <apidata name="WebSocketSettings" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WebSocketSettings" />
      <returns>
        <type api="T:System.ServiceModel.Channels.WebSocketTransportSettings" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetHttpsBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetMsmqBinding">
      <topicdata group="api" />
      <apidata name="NetMsmqBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MsmqBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetMsmqBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetMsmqBinding.#ctor">
          <element api="M:System.ServiceModel.NetMsmqBinding.#ctor" />
          <element api="M:System.ServiceModel.NetMsmqBinding.#ctor(System.ServiceModel.NetMsmqSecurityMode)" />
          <element api="M:System.ServiceModel.NetMsmqBinding.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.NetMsmqBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Durable" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
        <element api="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Scheme" />
        <element api="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.MsmqBindingBase.TimeToLive" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ValidityDuration" />
        <element api="P:System.ServiceModel.NetMsmqBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetMsmqBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetMsmqBinding.QueueTransferProtocol" />
        <element api="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetMsmqBinding.Security" />
        <element api="P:System.ServiceModel.NetMsmqBinding.UseActiveDirectory" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetMsmqBinding">
      <topicdata name="NetMsmqBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetMsmqBinding" />
      <apidata name="NetMsmqBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetMsmqBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetMsmqBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.NetMsmqBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetMsmqBinding">
      <topicdata name="NetMsmqBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetMsmqBinding" />
      <apidata name="NetMsmqBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Durable" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
        <element api="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
        <element api="P:System.ServiceModel.MsmqBindingBase.Scheme" />
        <element api="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.MsmqBindingBase.TimeToLive" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
        <element api="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
        <element api="P:System.ServiceModel.MsmqBindingBase.ValidityDuration" />
        <element api="P:System.ServiceModel.NetMsmqBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetMsmqBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetMsmqBinding.QueueTransferProtocol" />
        <element api="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetMsmqBinding.Security" />
        <element api="P:System.ServiceModel.NetMsmqBinding.UseActiveDirectory" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetMsmqBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetMsmqBinding.#ctor" />
        <element api="M:System.ServiceModel.NetMsmqBinding.#ctor(System.ServiceModel.NetMsmqSecurityMode)" />
        <element api="M:System.ServiceModel.NetMsmqBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetMsmqBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetMsmqBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetMsmqBinding.#ctor(System.ServiceModel.NetMsmqSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetMsmqBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetMsmqBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetMsmqBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetMsmqBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.QueueTransferProtocol">
      <topicdata group="api" />
      <apidata name="QueueTransferProtocol" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_QueueTransferProtocol" />
      <setter name="set_QueueTransferProtocol" />
      <returns>
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
            <enumValue>
              <field name="Native" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqBinding.UseActiveDirectory">
      <topicdata group="api" />
      <apidata name="UseActiveDirectory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseActiveDirectory" />
      <setter name="set_UseActiveDirectory" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.NetMsmqSecurity">
      <topicdata group="api" />
      <apidata name="NetMsmqSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.NetMsmqSecurity.#ctor" />
        <element api="P:System.ServiceModel.NetMsmqSecurity.Message" />
        <element api="P:System.ServiceModel.NetMsmqSecurity.Mode" />
        <element api="P:System.ServiceModel.NetMsmqSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetMsmqSecurity">
      <topicdata name="NetMsmqSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetMsmqSecurity" />
      <apidata name="NetMsmqSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetMsmqSecurity">
      <topicdata name="NetMsmqSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetMsmqSecurity" />
      <apidata name="NetMsmqSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetMsmqSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.NetMsmqSecurity.Message" />
        <element api="P:System.ServiceModel.NetMsmqSecurity.Mode" />
        <element api="P:System.ServiceModel.NetMsmqSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetMsmqSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityOverMsmq" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetMsmqSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
            <enumValue>
              <field name="Transport" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetMsmqSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.MsmqTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetMsmqSecurityMode">
      <topicdata group="api" />
      <apidata name="NetMsmqSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.NetMsmqSecurityMode.None" />
        <element api="F:System.ServiceModel.NetMsmqSecurityMode.Transport" />
        <element api="F:System.ServiceModel.NetMsmqSecurityMode.Message" />
        <element api="F:System.ServiceModel.NetMsmqSecurityMode.Both" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetMsmqSecurityMode.Both">
      <topicdata group="api" notopic="" />
      <apidata name="Both" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetMsmqSecurityMode.Message">
      <topicdata group="api" notopic="" />
      <apidata name="Message" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetMsmqSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetMsmqSecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetMsmqSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetNamedPipeBinding">
      <topicdata group="api" />
      <apidata name="NetNamedPipeBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.#ctor">
          <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
          <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)" />
          <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.NetNamedPipeBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.Scheme" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.Security" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransferMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetNamedPipeBinding">
      <topicdata name="NetNamedPipeBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetNamedPipeBinding" />
      <apidata name="NetNamedPipeBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetNamedPipeBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.NetNamedPipeBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetNamedPipeBinding">
      <topicdata name="NetNamedPipeBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetNamedPipeBinding" />
      <apidata name="NetNamedPipeBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.Scheme" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.Security" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetNamedPipeBinding.TransferMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetNamedPipeBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
        <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)" />
        <element api="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetNamedPipeBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetNamedPipeBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize">
      <topicdata group="api" />
      <apidata name="MaxBufferSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferSize" />
      <setter name="set_MaxBufferSize" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections">
      <topicdata group="api" />
      <apidata name="MaxConnections" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxConnections" />
      <setter name="set_MaxConnections" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.TransactionFlow">
      <topicdata group="api" />
      <apidata name="TransactionFlow" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionFlow" />
      <setter name="set_TransactionFlow" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol">
      <topicdata group="api" />
      <apidata name="TransactionProtocol" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionProtocol" />
      <setter name="set_TransactionProtocol" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeBinding.TransferMode">
      <topicdata group="api" />
      <apidata name="TransferMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransferMode" />
      <setter name="set_TransferMode" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.TransferMode" ref="false" />
            <enumValue>
              <field name="Buffered" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.NetNamedPipeSecurity">
      <topicdata group="api" />
      <apidata name="NetNamedPipeSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.NetNamedPipeSecurity.#ctor" />
        <element api="P:System.ServiceModel.NetNamedPipeSecurity.Mode" />
        <element api="P:System.ServiceModel.NetNamedPipeSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetNamedPipeSecurity">
      <topicdata name="NetNamedPipeSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetNamedPipeSecurity" />
      <apidata name="NetNamedPipeSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetNamedPipeSecurity">
      <topicdata name="NetNamedPipeSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetNamedPipeSecurity" />
      <apidata name="NetNamedPipeSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetNamedPipeSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.NetNamedPipeSecurity.Mode" />
        <element api="P:System.ServiceModel.NetNamedPipeSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetNamedPipeSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
            <enumValue>
              <field name="Transport" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetNamedPipeSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.NamedPipeTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetNamedPipeSecurityMode">
      <topicdata group="api" />
      <apidata name="NetNamedPipeSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.NetNamedPipeSecurityMode.None" />
        <element api="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetNamedPipeSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetNamedPipeSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetPeerTcpBinding">
      <topicdata group="api" />
      <apidata name="NetPeerTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetPeerTcpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.#ctor">
          <element api="M:System.ServiceModel.NetPeerTcpBinding.#ctor" />
          <element api="M:System.ServiceModel.NetPeerTcpBinding.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.NetPeerTcpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.IsPnrpAvailable" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.ListenIPAddress" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Port" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Resolver" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>PeerChannel feature is obsolete and will be removed in the future.</value>
          </argument>
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.NetPeerTcpBinding">
      <topicdata name="NetPeerTcpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetPeerTcpBinding" />
      <apidata name="NetPeerTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetPeerTcpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetPeerTcpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.NetPeerTcpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetPeerTcpBinding">
      <topicdata name="NetPeerTcpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetPeerTcpBinding" />
      <apidata name="NetPeerTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetPeerTcpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.IsPnrpAvailable" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.ListenIPAddress" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Port" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Resolver" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetPeerTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetPeerTcpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetPeerTcpBinding.#ctor" />
        <element api="M:System.ServiceModel.NetPeerTcpBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetPeerTcpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetPeerTcpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetPeerTcpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetPeerTcpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetPeerTcpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.IsPnrpAvailable">
      <topicdata group="api" />
      <apidata name="IsPnrpAvailable" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsPnrpAvailable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.ListenIPAddress">
      <topicdata group="api" />
      <apidata name="ListenIPAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ListenIPAddress" />
      <setter name="set_ListenIPAddress" />
      <returns>
        <type api="T:System.Net.IPAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.Port">
      <topicdata group="api" />
      <apidata name="Port" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Port" />
      <setter name="set_Port" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.Resolver">
      <topicdata group="api" />
      <apidata name="Resolver" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Resolver" />
      <returns>
        <type api="T:System.ServiceModel.PeerResolvers.PeerResolverSettings" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.PeerSecuritySettings" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetPeerTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetPeerTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetTcpBinding">
      <topicdata group="api" />
      <apidata name="NetTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetTcpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetTcpBinding.#ctor">
          <element api="M:System.ServiceModel.NetTcpBinding.#ctor" />
          <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode)" />
          <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.NetTcpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetTcpBinding.ListenBacklog" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransferMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetTcpBinding">
      <topicdata name="NetTcpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetTcpBinding" />
      <apidata name="NetTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetTcpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.NetTcpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetTcpBinding">
      <topicdata name="NetTcpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetTcpBinding" />
      <apidata name="NetTcpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetTcpBinding.ListenBacklog" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransferMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetTcpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetTcpBinding.#ctor" />
        <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode)" />
        <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.ListenBacklog">
      <topicdata group="api" />
      <apidata name="ListenBacklog" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ListenBacklog" />
      <setter name="set_ListenBacklog" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.MaxBufferSize">
      <topicdata group="api" />
      <apidata name="MaxBufferSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferSize" />
      <setter name="set_MaxBufferSize" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.MaxConnections">
      <topicdata group="api" />
      <apidata name="MaxConnections" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxConnections" />
      <setter name="set_MaxConnections" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled">
      <topicdata group="api" />
      <apidata name="PortSharingEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PortSharingEnabled" />
      <setter name="set_PortSharingEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReliableSession" />
      <setter name="set_ReliableSession" />
      <returns>
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.NetTcpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.TransactionFlow">
      <topicdata group="api" />
      <apidata name="TransactionFlow" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionFlow" />
      <setter name="set_TransactionFlow" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.TransactionProtocol">
      <topicdata group="api" />
      <apidata name="TransactionProtocol" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionProtocol" />
      <setter name="set_TransactionProtocol" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpBinding.TransferMode">
      <topicdata group="api" />
      <apidata name="TransferMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransferMode" />
      <setter name="set_TransferMode" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.TransferMode" ref="false" />
            <enumValue>
              <field name="Buffered" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.NetTcpContextBinding">
      <topicdata group="api" />
      <apidata name="NetTcpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.#ctor">
          <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor" />
          <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode)" />
          <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.NetTcpContextBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetTcpBinding.ListenBacklog" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransferMode" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ClientCallbackAddress" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ContextProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetTcpContextBinding">
      <topicdata name="NetTcpContextBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetTcpContextBinding" />
      <apidata name="NetTcpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.NetTcpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.NetTcpContextBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetTcpContextBinding">
      <topicdata name="NetTcpContextBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetTcpContextBinding" />
      <apidata name="NetTcpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.NetTcpBinding.ListenBacklog" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxConnections" />
        <element api="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.NetTcpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.NetTcpBinding.Scheme" />
        <element api="P:System.ServiceModel.NetTcpBinding.Security" />
        <element api="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" />
        <element api="P:System.ServiceModel.NetTcpBinding.TransferMode" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ClientCallbackAddress" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.NetTcpContextBinding.ContextProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.NetTcpContextBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor" />
        <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode)" />
        <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpContextBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.NetTcpContextBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpContextBinding.ClientCallbackAddress">
      <topicdata group="api" />
      <apidata name="ClientCallbackAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCallbackAddress" />
      <setter name="set_ClientCallbackAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpContextBinding.ContextManagementEnabled">
      <topicdata group="api" />
      <apidata name="ContextManagementEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContextManagementEnabled" />
      <setter name="set_ContextManagementEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpContextBinding.ContextProtectionLevel">
      <topicdata group="api" />
      <apidata name="ContextProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContextProtectionLevel" />
      <setter name="set_ContextProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
            <enumValue>
              <field name="Sign" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.NetTcpContextBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.NetTcpBinding.CreateBindingElements">
          <type api="T:System.ServiceModel.NetTcpBinding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NetTcpSecurity">
      <topicdata group="api" />
      <apidata name="NetTcpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.NetTcpSecurity.#ctor" />
        <element api="P:System.ServiceModel.NetTcpSecurity.Message" />
        <element api="P:System.ServiceModel.NetTcpSecurity.Mode" />
        <element api="P:System.ServiceModel.NetTcpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NetTcpSecurity">
      <topicdata name="NetTcpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NetTcpSecurity" />
      <apidata name="NetTcpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NetTcpSecurity">
      <topicdata name="NetTcpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NetTcpSecurity" />
      <apidata name="NetTcpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NetTcpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.NetTcpSecurity.Message" />
        <element api="P:System.ServiceModel.NetTcpSecurity.Mode" />
        <element api="P:System.ServiceModel.NetTcpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NetTcpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityOverTcp" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NetTcpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.SecurityMode" ref="false" />
            <enumValue>
              <field name="Transport" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.NetTcpSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NetTcpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.NonDualMessageSecurityOverHttp">
      <topicdata group="api" />
      <apidata name="NonDualMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" />
        <element api="P:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.NonDualMessageSecurityOverHttp">
      <topicdata name="NonDualMessageSecurityOverHttp" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.NonDualMessageSecurityOverHttp" />
      <apidata name="NonDualMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.NonDualMessageSecurityOverHttp">
      <topicdata name="NonDualMessageSecurityOverHttp" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.NonDualMessageSecurityOverHttp" />
      <apidata name="NonDualMessageSecurityOverHttp" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" />
        <element api="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" />
        <element api="P:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext">
      <topicdata group="api" />
      <apidata name="EstablishSecurityContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EstablishSecurityContext" />
      <setter name="set_EstablishSecurityContext" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationBehaviorAttribute">
      <topicdata group="api" />
      <apidata name="OperationBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationBehaviorAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.#ctor" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Method" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.OperationBehaviorAttribute">
      <topicdata name="OperationBehaviorAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.OperationBehaviorAttribute" />
      <apidata name="OperationBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationBehaviorAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.OperationBehaviorAttribute">
      <topicdata name="OperationBehaviorAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.OperationBehaviorAttribute" />
      <apidata name="OperationBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationBehaviorAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete" />
        <element api="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationBehaviorAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters">
      <topicdata group="api" />
      <apidata name="AutoDisposeParameters" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AutoDisposeParameters" />
      <setter name="set_AutoDisposeParameters" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation">
      <topicdata group="api" />
      <apidata name="Impersonation" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Impersonation" />
      <setter name="set_Impersonation" />
      <returns>
        <type api="T:System.ServiceModel.ImpersonationOption" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode">
      <topicdata group="api" />
      <apidata name="ReleaseInstanceMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReleaseInstanceMode" />
      <setter name="set_ReleaseInstanceMode" />
      <returns>
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" eiiName="IOperationBehavior.AddBindingParameters" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <topicdata group="api" eiiName="IOperationBehavior.ApplyClientBehavior" />
      <apidata name="ApplyClientBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="proxy">
          <type api="T:System.ServiceModel.Dispatcher.ClientOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <topicdata group="api" eiiName="IOperationBehavior.ApplyDispatchBehavior" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="dispatch">
          <type api="T:System.ServiceModel.Dispatcher.DispatchOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <topicdata group="api" eiiName="IOperationBehavior.Validate" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete">
      <topicdata group="api" />
      <apidata name="TransactionAutoComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionAutoComplete" />
      <setter name="set_TransactionAutoComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired">
      <topicdata group="api" />
      <apidata name="TransactionScopeRequired" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionScopeRequired" />
      <setter name="set_TransactionScopeRequired" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationContext">
      <topicdata group="api" />
      <apidata name="OperationContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.OperationContext" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="E:System.ServiceModel.OperationContext.OperationCompleted" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)" />
        <element api="M:System.ServiceModel.OperationContext.GetCallbackChannel``1" />
        <element api="M:System.ServiceModel.OperationContext.SetTransactionComplete" />
        <element api="P:System.ServiceModel.OperationContext.Channel" />
        <element api="P:System.ServiceModel.OperationContext.ClaimsPrincipal" />
        <element api="P:System.ServiceModel.OperationContext.Current" />
        <element api="P:System.ServiceModel.OperationContext.EndpointDispatcher" />
        <element api="P:System.ServiceModel.OperationContext.Extensions" />
        <element api="P:System.ServiceModel.OperationContext.HasSupportingTokens" />
        <element api="P:System.ServiceModel.OperationContext.Host" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageHeaders" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageProperties" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageVersion" />
        <element api="P:System.ServiceModel.OperationContext.InstanceContext" />
        <element api="P:System.ServiceModel.OperationContext.IsUserContext" />
        <element api="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders" />
        <element api="P:System.ServiceModel.OperationContext.OutgoingMessageProperties" />
        <element api="P:System.ServiceModel.OperationContext.RequestContext" />
        <element api="P:System.ServiceModel.OperationContext.ServiceSecurityContext" />
        <element api="P:System.ServiceModel.OperationContext.SessionId" />
        <element api="P:System.ServiceModel.OperationContext.SupportingTokens" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.OperationContext">
      <topicdata name="OperationContext" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.OperationContext" />
      <apidata name="OperationContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationContext.GetCallbackChannel``1" />
        <element api="M:System.ServiceModel.OperationContext.SetTransactionComplete" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.OperationContext">
      <topicdata name="OperationContext" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.OperationContext" />
      <apidata name="OperationContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.OperationContext.Channel" />
        <element api="P:System.ServiceModel.OperationContext.ClaimsPrincipal" />
        <element api="P:System.ServiceModel.OperationContext.Current" />
        <element api="P:System.ServiceModel.OperationContext.EndpointDispatcher" />
        <element api="P:System.ServiceModel.OperationContext.Extensions" />
        <element api="P:System.ServiceModel.OperationContext.HasSupportingTokens" />
        <element api="P:System.ServiceModel.OperationContext.Host" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageHeaders" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageProperties" />
        <element api="P:System.ServiceModel.OperationContext.IncomingMessageVersion" />
        <element api="P:System.ServiceModel.OperationContext.InstanceContext" />
        <element api="P:System.ServiceModel.OperationContext.IsUserContext" />
        <element api="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders" />
        <element api="P:System.ServiceModel.OperationContext.OutgoingMessageProperties" />
        <element api="P:System.ServiceModel.OperationContext.RequestContext" />
        <element api="P:System.ServiceModel.OperationContext.ServiceSecurityContext" />
        <element api="P:System.ServiceModel.OperationContext.SessionId" />
        <element api="P:System.ServiceModel.OperationContext.SupportingTokens" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.OperationContext">
      <topicdata name="OperationContext" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.OperationContext" />
      <apidata name="OperationContext" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.OperationContext.OperationCompleted" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="channel">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.Channel">
      <topicdata group="api" />
      <apidata name="Channel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Channel" />
      <returns>
        <type api="T:System.ServiceModel.IContextChannel" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.ClaimsPrincipal">
      <topicdata group="api" />
      <apidata name="ClaimsPrincipal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ClaimsPrincipal" />
      <returns>
        <type api="T:System.Security.Claims.ClaimsPrincipal" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.EndpointDispatcher">
      <topicdata group="api" />
      <apidata name="EndpointDispatcher" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EndpointDispatcher" />
      <setter name="set_EndpointDispatcher" />
      <returns>
        <type api="T:System.ServiceModel.Dispatcher.EndpointDispatcher" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.Extensions">
      <topicdata group="api" />
      <apidata name="Extensions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Extensions" />
      <returns>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.OperationContext" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IExtensibleObject`1.Extensions">
          <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.OperationContext" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContext.GetCallbackChannel``1">
      <topicdata group="api" />
      <apidata name="GetCallbackChannel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <template name="T" index="0" api="M:System.ServiceModel.OperationContext.GetCallbackChannel``1" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.HasSupportingTokens">
      <topicdata group="api" />
      <apidata name="HasSupportingTokens" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasSupportingTokens" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.Host">
      <topicdata group="api" />
      <apidata name="Host" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Host" />
      <returns>
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <topicdata group="api" />
      <apidata name="IncomingMessageHeaders" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IncomingMessageHeaders" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageHeaders" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <topicdata group="api" />
      <apidata name="IncomingMessageProperties" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IncomingMessageProperties" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageProperties" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <topicdata group="api" />
      <apidata name="IncomingMessageVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IncomingMessageVersion" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.InstanceContext">
      <topicdata group="api" />
      <apidata name="InstanceContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InstanceContext" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.IsUserContext">
      <topicdata group="api" />
      <apidata name="IsUserContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsUserContext" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.OperationContext.OperationCompleted">
      <topicdata group="api" />
      <apidata name="OperationCompleted" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_OperationCompleted" />
      <remover name="remove_OperationCompleted" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <topicdata group="api" />
      <apidata name="OutgoingMessageHeaders" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OutgoingMessageHeaders" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageHeaders" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <topicdata group="api" />
      <apidata name="OutgoingMessageProperties" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OutgoingMessageProperties" />
      <returns>
        <type api="T:System.ServiceModel.Channels.MessageProperties" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.RequestContext">
      <topicdata group="api" />
      <apidata name="RequestContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_RequestContext" />
      <setter name="set_RequestContext" />
      <returns>
        <type api="T:System.ServiceModel.Channels.RequestContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.ServiceSecurityContext">
      <topicdata group="api" />
      <apidata name="ServiceSecurityContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ServiceSecurityContext" />
      <returns>
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.SessionId">
      <topicdata group="api" />
      <apidata name="SessionId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SessionId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContext.SetTransactionComplete">
      <topicdata group="api" />
      <apidata name="SetTransactionComplete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContext.SupportingTokens">
      <topicdata group="api" />
      <apidata name="SupportingTokens" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SupportingTokens" />
      <returns>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Security.SupportingTokenSpecification" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContext" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationContextScope">
      <topicdata group="api" />
      <apidata name="OperationContextScope" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.OperationContextScope.#ctor">
          <element api="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
          <element api="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
        </element>
        <element api="M:System.ServiceModel.OperationContextScope.Dispose" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.OperationContextScope">
      <topicdata name="OperationContextScope" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.OperationContextScope" />
      <apidata name="OperationContextScope" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationContextScope.Dispose" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContextScope" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.OperationContextScope.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
        <element api="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContextScope" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.OperationContextScope.#ctor" />
      <parameters>
        <parameter name="channel">
          <type api="T:System.ServiceModel.IContextChannel" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContextScope" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.OperationContextScope.#ctor" />
      <parameters>
        <parameter name="context">
          <type api="T:System.ServiceModel.OperationContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContextScope" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContextScope.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContextScope" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationContractAttribute">
      <topicdata group="api" />
      <apidata name="OperationContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.OperationContractAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.OperationContractAttribute.Action" />
        <element api="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
        <element api="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
        <element api="P:System.ServiceModel.OperationContractAttribute.Name" />
        <element api="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Method" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.OperationContractAttribute">
      <topicdata name="OperationContractAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.OperationContractAttribute" />
      <apidata name="OperationContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.OperationContractAttribute">
      <topicdata name="OperationContractAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.OperationContractAttribute" />
      <apidata name="OperationContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.OperationContractAttribute.Action" />
        <element api="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
        <element api="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
        <element api="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
        <element api="P:System.ServiceModel.OperationContractAttribute.Name" />
        <element api="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.Action">
      <topicdata group="api" />
      <apidata name="Action" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Action" />
      <setter name="set_Action" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <topicdata group="api" />
      <apidata name="AsyncPattern" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AsyncPattern" />
      <setter name="set_AsyncPattern" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel">
      <topicdata group="api" />
      <apidata name="HasProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasProtectionLevel" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.IsInitiating">
      <topicdata group="api" />
      <apidata name="IsInitiating" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsInitiating" />
      <setter name="set_IsInitiating" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <topicdata group="api" />
      <apidata name="IsOneWay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsOneWay" />
      <setter name="set_IsOneWay" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.IsTerminating">
      <topicdata group="api" />
      <apidata name="IsTerminating" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IsTerminating" />
      <setter name="set_IsTerminating" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <topicdata group="api" />
      <apidata name="ReplyAction" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReplyAction" />
      <setter name="set_ReplyAction" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationFormatStyle">
      <topicdata group="api" />
      <apidata name="OperationFormatStyle" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.OperationFormatStyle.Document" />
        <element api="F:System.ServiceModel.OperationFormatStyle.Rpc" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.OperationFormatStyle.Document">
      <topicdata group="api" notopic="" />
      <apidata name="Document" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <topicdata group="api" notopic="" />
      <apidata name="Rpc" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OperationFormatUse">
      <topicdata group="api" />
      <apidata name="OperationFormatUse" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.OperationFormatUse.Literal" />
        <element api="F:System.ServiceModel.OperationFormatUse.Encoded" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.OperationFormatUse.Encoded">
      <topicdata group="api" notopic="" />
      <apidata name="Encoded" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatUse" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationFormatUse" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.OperationFormatUse.Literal">
      <topicdata group="api" notopic="" />
      <apidata name="Literal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatUse" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OperationFormatUse" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.OptionalReliableSession">
      <topicdata group="api" />
      <apidata name="OptionalReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.OptionalReliableSession.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ReliableSession" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.OptionalReliableSession.#ctor">
          <element api="M:System.ServiceModel.OptionalReliableSession.#ctor" />
          <element api="M:System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)" />
        </element>
        <element api="P:System.ServiceModel.OptionalReliableSession.Enabled" />
        <element api="P:System.ServiceModel.ReliableSession.InactivityTimeout" />
        <element api="P:System.ServiceModel.ReliableSession.Ordered" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.OptionalReliableSession">
      <topicdata name="OptionalReliableSession" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.OptionalReliableSession" />
      <apidata name="OptionalReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.OptionalReliableSession.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.OptionalReliableSession">
      <topicdata name="OptionalReliableSession" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.OptionalReliableSession" />
      <apidata name="OptionalReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.OptionalReliableSession.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.OptionalReliableSession.Enabled" />
        <element api="P:System.ServiceModel.ReliableSession.InactivityTimeout" />
        <element api="P:System.ServiceModel.ReliableSession.Ordered" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.OptionalReliableSession.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.OptionalReliableSession.#ctor" />
        <element api="M:System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OptionalReliableSession.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.OptionalReliableSession.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.OptionalReliableSession.#ctor" />
      <parameters>
        <parameter name="reliableSessionBindingElement">
          <type api="T:System.ServiceModel.Channels.ReliableSessionBindingElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.OptionalReliableSession.Enabled">
      <topicdata group="api" />
      <apidata name="Enabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Enabled" />
      <setter name="set_Enabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerHopCountAttribute">
      <topicdata group="api" />
      <apidata name="PeerHopCountAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerHopCountAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.MessageHeaderAttribute" ref="true" />
          <type api="T:System.ServiceModel.MessageContractMemberAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerHopCountAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Actor" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Name" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Namespace" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
              <field name="Field" />
            </enumValue>
          </argument>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerHopCountAttribute">
      <topicdata name="PeerHopCountAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerHopCountAttribute" />
      <apidata name="PeerHopCountAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerHopCountAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerHopCountAttribute">
      <topicdata name="PeerHopCountAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerHopCountAttribute" />
      <apidata name="PeerHopCountAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerHopCountAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Actor" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.MustUnderstand" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Name" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Namespace" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.PeerHopCountAttribute.Relay" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerHopCountAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.Actor">
      <topicdata group="api" />
      <apidata name="Actor" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Actor" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.MustUnderstand">
      <topicdata group="api" />
      <apidata name="MustUnderstand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MustUnderstand" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerHopCountAttribute.Relay">
      <topicdata group="api" />
      <apidata name="Relay" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Relay" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerHopCountAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerMessageOrigination">
      <topicdata group="api" />
      <apidata name="PeerMessageOrigination" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.PeerMessageOrigination.Local" />
        <element api="F:System.ServiceModel.PeerMessageOrigination.Remote" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessageOrigination.Local">
      <topicdata group="api" notopic="" />
      <apidata name="Local" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessageOrigination" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessageOrigination" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessageOrigination.Remote">
      <topicdata group="api" notopic="" />
      <apidata name="Remote" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessageOrigination" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessageOrigination" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerMessagePropagation">
      <topicdata group="api" />
      <apidata name="PeerMessagePropagation" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.PeerMessagePropagation.None" />
        <element api="F:System.ServiceModel.PeerMessagePropagation.Local" />
        <element api="F:System.ServiceModel.PeerMessagePropagation.Remote" />
        <element api="F:System.ServiceModel.PeerMessagePropagation.LocalAndRemote" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessagePropagation.Local">
      <topicdata group="api" notopic="" />
      <apidata name="Local" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessagePropagation.LocalAndRemote">
      <topicdata group="api" notopic="" />
      <apidata name="LocalAndRemote" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessagePropagation.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerMessagePropagation.Remote">
      <topicdata group="api" notopic="" />
      <apidata name="Remote" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerMessagePropagationFilter">
      <topicdata group="api" />
      <apidata name="PeerMessagePropagationFilter" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerMessagePropagationFilter.#ctor" />
        <element api="M:System.ServiceModel.PeerMessagePropagationFilter.ShouldMessagePropagate(System.ServiceModel.Channels.Message,System.ServiceModel.PeerMessageOrigination)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerMessagePropagationFilter">
      <topicdata name="PeerMessagePropagationFilter" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerMessagePropagationFilter" />
      <apidata name="PeerMessagePropagationFilter" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerMessagePropagationFilter.ShouldMessagePropagate(System.ServiceModel.Channels.Message,System.ServiceModel.PeerMessageOrigination)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagationFilter" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerMessagePropagationFilter.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerMessagePropagationFilter.ShouldMessagePropagate(System.ServiceModel.Channels.Message,System.ServiceModel.PeerMessageOrigination)">
      <topicdata group="api" />
      <apidata name="ShouldMessagePropagate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
        <parameter name="origination">
          <type api="T:System.ServiceModel.PeerMessageOrigination" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagation" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerMessagePropagationFilter" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerNode">
      <topicdata group="api" />
      <apidata name="PeerNode" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.PeerNode.Offline" />
        <element api="E:System.ServiceModel.PeerNode.Online" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.ServiceModel.PeerNode.RefreshConnection" />
        <element api="M:System.ServiceModel.PeerNode.ToString" />
        <element api="P:System.ServiceModel.PeerNode.IsOnline" />
        <element api="P:System.ServiceModel.PeerNode.MessagePropagationFilter" />
        <element api="P:System.ServiceModel.PeerNode.Port" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerNode">
      <topicdata name="PeerNode" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerNode" />
      <apidata name="PeerNode" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.ServiceModel.PeerNode.RefreshConnection" />
        <element api="M:System.ServiceModel.PeerNode.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerNode">
      <topicdata name="PeerNode" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerNode" />
      <apidata name="PeerNode" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.PeerNode.IsOnline" />
        <element api="P:System.ServiceModel.PeerNode.MessagePropagationFilter" />
        <element api="P:System.ServiceModel.PeerNode.Port" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.PeerNode">
      <topicdata name="PeerNode" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.PeerNode" />
      <apidata name="PeerNode" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.PeerNode.Offline" />
        <element api="E:System.ServiceModel.PeerNode.Online" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerNode.IsOnline">
      <topicdata group="api" />
      <apidata name="IsOnline" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsOnline" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IOnlineStatus.IsOnline">
          <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerNode.MessagePropagationFilter">
      <topicdata group="api" />
      <apidata name="MessagePropagationFilter" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessagePropagationFilter" />
      <setter name="set_MessagePropagationFilter" />
      <returns>
        <type api="T:System.ServiceModel.PeerMessagePropagationFilter" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.PeerNode.Offline">
      <topicdata group="api" />
      <apidata name="Offline" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Offline" />
      <remover name="remove_Offline" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.IOnlineStatus.Offline">
          <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.PeerNode.Online">
      <topicdata group="api" />
      <apidata name="Online" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <eventdata add="true" remove="true" />
      <adder name="add_Online" />
      <remover name="remove_Online" />
      <eventhandler>
        <type api="T:System.EventHandler" ref="true" />
      </eventhandler>
      <eventargs>
        <type api="T:System.EventArgs" ref="true" />
      </eventargs>
      <implements>
        <member api="E:System.ServiceModel.IOnlineStatus.Online">
          <type api="T:System.ServiceModel.IOnlineStatus" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerNode.Port">
      <topicdata group="api" />
      <apidata name="Port" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Port" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerNode.RefreshConnection">
      <topicdata group="api" />
      <apidata name="RefreshConnection" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerNode.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNode" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerNodeAddress">
      <topicdata group="api" />
      <apidata name="PeerNodeAddress" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerNodeAddress.#ctor(System.ServiceModel.EndpointAddress,System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress})" />
        <element api="P:System.ServiceModel.PeerNodeAddress.EndpointAddress" />
        <element api="P:System.ServiceModel.PeerNodeAddress.IPAddresses" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.Serialization.DataContractAttribute" ref="true" />
          <assignment name="Name">
            <type api="T:System.String" ref="true" />
            <value>PeerNodeAddress</value>
          </assignment>
          <assignment name="Namespace">
            <type api="T:System.String" ref="true" />
            <value>http://schemas.microsoft.com/net/2006/05/peer</value>
          </assignment>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.Serialization.KnownTypeAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <arrayOf rank="1">
                <type api="T:System.Net.IPAddress" ref="true" />
              </arrayOf>
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerNodeAddress">
      <topicdata name="PeerNodeAddress" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerNodeAddress" />
      <apidata name="PeerNodeAddress" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNodeAddress" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerNodeAddress">
      <topicdata name="PeerNodeAddress" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerNodeAddress" />
      <apidata name="PeerNodeAddress" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.PeerNodeAddress.EndpointAddress" />
        <element api="P:System.ServiceModel.PeerNodeAddress.IPAddresses" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNodeAddress" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerNodeAddress.#ctor(System.ServiceModel.EndpointAddress,System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="endpointAddress">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="ipAddresses">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:System.Net.IPAddress" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerNodeAddress.EndpointAddress">
      <topicdata group="api" />
      <apidata name="EndpointAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EndpointAddress" />
      <returns>
        <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerNodeAddress.IPAddresses">
      <topicdata group="api" />
      <apidata name="IPAddresses" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IPAddresses" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Net.IPAddress" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerResolver">
      <topicdata group="api" />
      <apidata name="PeerResolver" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerResolver.#ctor" />
        <element api="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
        <element api="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
        <element api="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerResolver">
      <topicdata name="PeerResolver" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerResolver" />
      <apidata name="PeerResolver" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
        <element api="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
        <element api="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerResolver">
      <topicdata name="PeerResolver" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerResolver" />
      <apidata name="PeerResolver" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerResolver.CanShareReferrals">
      <topicdata group="api" />
      <apidata name="CanShareReferrals" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_CanShareReferrals" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="address">
          <type api="T:System.ServiceModel.EndpointAddress" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="credentials">
          <type api="T:System.ServiceModel.Description.ClientCredentials" ref="true" />
        </parameter>
        <parameter name="referralPolicy">
          <type api="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Register" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="meshId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="nodeAddress">
          <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Resolve" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="meshId">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="maxAddresses">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Unregister" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="registrationId">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="registrationId">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="updatedNodeAddress">
          <type api="T:System.ServiceModel.PeerNodeAddress" ref="true" />
        </parameter>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerResolver" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerSecuritySettings">
      <topicdata group="api" />
      <apidata name="PeerSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerSecuritySettings.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerSecuritySettings.#ctor" />
        <element api="P:System.ServiceModel.PeerSecuritySettings.Mode" />
        <element api="P:System.ServiceModel.PeerSecuritySettings.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerSecuritySettings">
      <topicdata name="PeerSecuritySettings" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerSecuritySettings" />
      <apidata name="PeerSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerSecuritySettings.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerSecuritySettings" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerSecuritySettings">
      <topicdata name="PeerSecuritySettings" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerSecuritySettings" />
      <apidata name="PeerSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerSecuritySettings.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.PeerSecuritySettings.Mode" />
        <element api="P:System.ServiceModel.PeerSecuritySettings.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerSecuritySettings" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerSecuritySettings.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerSecuritySettings" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerSecuritySettings.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerSecuritySettings" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerSecuritySettings.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.PeerTransportSecuritySettings" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerSecuritySettings" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerTransportCredentialType">
      <topicdata group="api" />
      <apidata name="PeerTransportCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.PeerTransportCredentialType.Password" />
        <element api="F:System.ServiceModel.PeerTransportCredentialType.Certificate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerTransportCredentialType.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerTransportCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.PeerTransportCredentialType.Password">
      <topicdata group="api" notopic="" />
      <apidata name="Password" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.PeerTransportCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PeerTransportSecuritySettings">
      <topicdata group="api" />
      <apidata name="PeerTransportSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor" />
        <element api="P:System.ServiceModel.PeerTransportSecuritySettings.CredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PeerTransportSecuritySettings">
      <topicdata name="PeerTransportSecuritySettings" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PeerTransportSecuritySettings" />
      <apidata name="PeerTransportSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportSecuritySettings" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PeerTransportSecuritySettings">
      <topicdata name="PeerTransportSecuritySettings" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PeerTransportSecuritySettings" />
      <apidata name="PeerTransportSecuritySettings" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.PeerTransportSecuritySettings.CredentialType" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportSecuritySettings" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportSecuritySettings" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.PeerTransportSecuritySettings.CredentialType">
      <topicdata group="api" />
      <apidata name="CredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CredentialType" />
      <setter name="set_CredentialType" />
      <returns>
        <type api="T:System.ServiceModel.PeerTransportCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PeerTransportSecuritySettings" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.PoisonMessageException">
      <topicdata group="api" />
      <apidata name="PoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.PoisonMessageException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.MsmqPoisonMessageException" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.PoisonMessageException.#ctor">
          <element api="M:System.ServiceModel.PoisonMessageException.#ctor" />
          <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.PoisonMessageException">
      <topicdata name="PoisonMessageException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.PoisonMessageException" />
      <apidata name="PoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.PoisonMessageException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.PoisonMessageException">
      <topicdata name="PoisonMessageException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.PoisonMessageException" />
      <apidata name="PoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.PoisonMessageException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.PoisonMessageException">
      <topicdata name="PoisonMessageException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.PoisonMessageException" />
      <apidata name="PoisonMessageException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.PoisonMessageException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.PoisonMessageException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.PoisonMessageException.#ctor" />
        <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.PoisonMessageException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PoisonMessageException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.PoisonMessageException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.PoisonMessageException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PoisonMessageException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.PoisonMessageException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.PoisonMessageException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.PoisonMessageException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.PoisonMessageException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ProtocolException">
      <topicdata group="api" />
      <apidata name="ProtocolException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ProtocolException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.MessageHeaderException" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.ProtocolException.#ctor">
          <element api="M:System.ServiceModel.ProtocolException.#ctor" />
          <element api="M:System.ServiceModel.ProtocolException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ProtocolException">
      <topicdata name="ProtocolException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ProtocolException" />
      <apidata name="ProtocolException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ProtocolException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ProtocolException">
      <topicdata name="ProtocolException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ProtocolException" />
      <apidata name="ProtocolException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ProtocolException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ProtocolException">
      <topicdata name="ProtocolException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ProtocolException" />
      <apidata name="ProtocolException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ProtocolException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ProtocolException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ProtocolException.#ctor" />
        <element api="M:System.ServiceModel.ProtocolException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ProtocolException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ProtocolException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ProtocolException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ProtocolException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ProtocolException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ProtocolException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.QueuedDeliveryRequirementsMode">
      <topicdata group="api" />
      <apidata name="QueuedDeliveryRequirementsMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Allowed" />
        <element api="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Required" />
        <element api="F:System.ServiceModel.QueuedDeliveryRequirementsMode.NotAllowed" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Allowed">
      <topicdata group="api" notopic="" />
      <apidata name="Allowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueuedDeliveryRequirementsMode.NotAllowed">
      <topicdata group="api" notopic="" />
      <apidata name="NotAllowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Required">
      <topicdata group="api" notopic="" />
      <apidata name="Required" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueuedDeliveryRequirementsMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.QueueTransferProtocol">
      <topicdata group="api" />
      <apidata name="QueueTransferProtocol" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.QueueTransferProtocol.Native" />
        <element api="F:System.ServiceModel.QueueTransferProtocol.Srmp" />
        <element api="F:System.ServiceModel.QueueTransferProtocol.SrmpSecure" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueueTransferProtocol.Native">
      <topicdata group="api" notopic="" />
      <apidata name="Native" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueueTransferProtocol.Srmp">
      <topicdata group="api" notopic="" />
      <apidata name="Srmp" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.QueueTransferProtocol.SrmpSecure">
      <topicdata group="api" notopic="" />
      <apidata name="SrmpSecure" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QueueTransferProtocol" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.QuotaExceededException">
      <topicdata group="api" />
      <apidata name="QuotaExceededException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.QuotaExceededException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.QuotaExceededException.#ctor">
          <element api="M:System.ServiceModel.QuotaExceededException.#ctor" />
          <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.QuotaExceededException">
      <topicdata name="QuotaExceededException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.QuotaExceededException" />
      <apidata name="QuotaExceededException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.QuotaExceededException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.QuotaExceededException">
      <topicdata name="QuotaExceededException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.QuotaExceededException" />
      <apidata name="QuotaExceededException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.QuotaExceededException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.QuotaExceededException">
      <topicdata name="QuotaExceededException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.QuotaExceededException" />
      <apidata name="QuotaExceededException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.QuotaExceededException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.QuotaExceededException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.QuotaExceededException.#ctor" />
        <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.QuotaExceededException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.QuotaExceededException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.QuotaExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.QuotaExceededException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.QuotaExceededException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.QuotaExceededException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.QuotaExceededException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ReceiveContextEnabledAttribute">
      <topicdata group="api" />
      <apidata name="ReceiveContextEnabledAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.Validate(System.ServiceModel.Description.OperationDescription)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ReceiveContextEnabledAttribute.ManualControl" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Method" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.ReceiveContextEnabledAttribute">
      <topicdata name="ReceiveContextEnabledAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ReceiveContextEnabledAttribute" />
      <apidata name="ReceiveContextEnabledAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.ReceiveContextEnabledAttribute.Validate(System.ServiceModel.Description.OperationDescription)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ReceiveContextEnabledAttribute">
      <topicdata name="ReceiveContextEnabledAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ReceiveContextEnabledAttribute" />
      <apidata name="ReceiveContextEnabledAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ReceiveContextEnabledAttribute.ManualControl" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReceiveContextEnabledAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="operationDescription">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="bindingParameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <topicdata group="api" />
      <apidata name="ApplyClientBehavior" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="operationDescription">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="clientOperation">
          <type api="T:System.ServiceModel.Dispatcher.ClientOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <topicdata group="api" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="operationDescription">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="dispatchOperation">
          <type api="T:System.ServiceModel.Dispatcher.DispatchOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReceiveContextEnabledAttribute.ManualControl">
      <topicdata group="api" />
      <apidata name="ManualControl" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ManualControl" />
      <setter name="set_ManualControl" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReceiveContextEnabledAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <topicdata group="api" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="operationDescription">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveContextEnabledAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ReceiveErrorHandling">
      <topicdata group="api" />
      <apidata name="ReceiveErrorHandling" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.ReceiveErrorHandling.Fault" />
        <element api="F:System.ServiceModel.ReceiveErrorHandling.Drop" />
        <element api="F:System.ServiceModel.ReceiveErrorHandling.Reject" />
        <element api="F:System.ServiceModel.ReceiveErrorHandling.Move" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReceiveErrorHandling.Drop">
      <topicdata group="api" notopic="" />
      <apidata name="Drop" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReceiveErrorHandling.Fault">
      <topicdata group="api" notopic="" />
      <apidata name="Fault" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReceiveErrorHandling.Move">
      <topicdata group="api" notopic="" />
      <apidata name="Move" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReceiveErrorHandling.Reject">
      <topicdata group="api" notopic="" />
      <apidata name="Reject" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReceiveErrorHandling" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ReleaseInstanceMode">
      <topicdata group="api" />
      <apidata name="ReleaseInstanceMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.ReleaseInstanceMode.None" />
        <element api="F:System.ServiceModel.ReleaseInstanceMode.BeforeCall" />
        <element api="F:System.ServiceModel.ReleaseInstanceMode.AfterCall" />
        <element api="F:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReleaseInstanceMode.AfterCall">
      <topicdata group="api" notopic="" />
      <apidata name="AfterCall" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall">
      <topicdata group="api" notopic="" />
      <apidata name="BeforeAndAfterCall" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReleaseInstanceMode.BeforeCall">
      <topicdata group="api" notopic="" />
      <apidata name="BeforeCall" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.ReleaseInstanceMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReleaseInstanceMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ReliableMessagingVersion">
      <topicdata group="api" />
      <apidata name="ReliableMessagingVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ServiceModel.ReliableMessagingVersion.Default" />
        <element api="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessaging11" />
        <element api="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessagingFebruary2005" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ReliableMessagingVersion">
      <topicdata name="ReliableMessagingVersion" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ReliableMessagingVersion" />
      <apidata name="ReliableMessagingVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableMessagingVersion" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ReliableMessagingVersion">
      <topicdata name="ReliableMessagingVersion" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ReliableMessagingVersion" />
      <apidata name="ReliableMessagingVersion" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ReliableMessagingVersion.Default" />
        <element api="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessaging11" />
        <element api="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessagingFebruary2005" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableMessagingVersion" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReliableMessagingVersion.Default">
      <topicdata group="api" />
      <apidata name="Default" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Default" />
      <returns>
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessaging11">
      <topicdata group="api" />
      <apidata name="WSReliableMessaging11" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSReliableMessaging11" />
      <returns>
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessagingFebruary2005">
      <topicdata group="api" />
      <apidata name="WSReliableMessagingFebruary2005" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSReliableMessagingFebruary2005" />
      <returns>
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableMessagingVersion" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ReliableSession.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ReliableSession.#ctor">
          <element api="M:System.ServiceModel.ReliableSession.#ctor" />
          <element api="M:System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)" />
        </element>
        <element api="P:System.ServiceModel.ReliableSession.InactivityTimeout" />
        <element api="P:System.ServiceModel.ReliableSession.Ordered" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ReliableSession">
      <topicdata name="ReliableSession" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ReliableSession" />
      <apidata name="ReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ReliableSession.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ReliableSession">
      <topicdata name="ReliableSession" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ReliableSession" />
      <apidata name="ReliableSession" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ReliableSession.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.ReliableSession.InactivityTimeout" />
        <element api="P:System.ServiceModel.ReliableSession.Ordered" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ReliableSession.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ReliableSession.#ctor" />
        <element api="M:System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReliableSession.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ReliableSession.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ReliableSession.#ctor" />
      <parameters>
        <parameter name="reliableSessionBindingElement">
          <type api="T:System.ServiceModel.Channels.ReliableSessionBindingElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReliableSession.InactivityTimeout">
      <topicdata group="api" />
      <apidata name="InactivityTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InactivityTimeout" />
      <setter name="set_InactivityTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ReliableSession.Ordered">
      <topicdata group="api" />
      <apidata name="Ordered" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Ordered" />
      <setter name="set_Ordered" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.RsaEndpointIdentity">
      <topicdata group="api" />
      <apidata name="RsaEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.RsaEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="Overload:System.ServiceModel.RsaEndpointIdentity.#ctor">
          <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.String)" />
          <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        </element>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.RsaEndpointIdentity">
      <topicdata name="RsaEndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.RsaEndpointIdentity" />
      <apidata name="RsaEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.RsaEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.RsaEndpointIdentity">
      <topicdata name="RsaEndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.RsaEndpointIdentity" />
      <apidata name="RsaEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.RsaEndpointIdentity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
        <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.String)" />
        <element api="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.RsaEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.RsaEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="certificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.RsaEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="publicKey">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.RsaEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.SecurityMode">
      <topicdata group="api" />
      <apidata name="SecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.SecurityMode.None" />
        <element api="F:System.ServiceModel.SecurityMode.Transport" />
        <element api="F:System.ServiceModel.SecurityMode.Message" />
        <element api="F:System.ServiceModel.SecurityMode.TransportWithMessageCredential" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SecurityMode.Message">
      <topicdata group="api" notopic="" />
      <apidata name="Message" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SecurityMode.TransportWithMessageCredential">
      <topicdata group="api" notopic="" />
      <apidata name="TransportWithMessageCredential" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServerTooBusyException">
      <topicdata group="api" />
      <apidata name="ServerTooBusyException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServerTooBusyException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.ServerTooBusyException.#ctor">
          <element api="M:System.ServiceModel.ServerTooBusyException.#ctor" />
          <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServerTooBusyException">
      <topicdata name="ServerTooBusyException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServerTooBusyException" />
      <apidata name="ServerTooBusyException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServerTooBusyException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServerTooBusyException">
      <topicdata name="ServerTooBusyException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServerTooBusyException" />
      <apidata name="ServerTooBusyException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServerTooBusyException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ServerTooBusyException">
      <topicdata name="ServerTooBusyException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ServerTooBusyException" />
      <apidata name="ServerTooBusyException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServerTooBusyException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServerTooBusyException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ServerTooBusyException.#ctor" />
        <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServerTooBusyException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServerTooBusyException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServerTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ServerTooBusyException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServerTooBusyException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServerTooBusyException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServerTooBusyException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceActivationException">
      <topicdata group="api" />
      <apidata name="ServiceActivationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServiceActivationException.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.CommunicationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="Overload:System.ServiceModel.ServiceActivationException.#ctor">
          <element api="M:System.ServiceModel.ServiceActivationException.#ctor" />
          <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
          <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)" />
        </element>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceActivationException">
      <topicdata name="ServiceActivationException" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceActivationException" />
      <apidata name="ServiceActivationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServiceActivationException.#ctor" />
      <elements>
        <element api="M:System.Exception.GetBaseException" />
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.Exception.GetType" />
        <element api="M:System.Exception.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceActivationException">
      <topicdata name="ServiceActivationException" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceActivationException" />
      <apidata name="ServiceActivationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServiceActivationException.#ctor" />
      <elements>
        <element api="P:System.Exception.Data" />
        <element api="P:System.Exception.HelpLink" />
        <element api="P:System.Exception.HResult" />
        <element api="P:System.Exception.InnerException" />
        <element api="P:System.Exception.Message" />
        <element api="P:System.Exception.Source" />
        <element api="P:System.Exception.StackTrace" />
        <element api="P:System.Exception.TargetSite" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ServiceActivationException">
      <topicdata name="ServiceActivationException" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ServiceActivationException" />
      <apidata name="ServiceActivationException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="true" defaultConstructor="M:System.ServiceModel.ServiceActivationException.#ctor" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceActivationException.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ServiceActivationException.#ctor" />
        <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <element api="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceActivationException.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceActivationException.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ServiceActivationException.#ctor" />
      <parameters>
        <parameter name="info">
          <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceActivationException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceActivationException.#ctor" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="innerException">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceActivationException" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceAuthenticationManager">
      <topicdata group="api" />
      <apidata name="ServiceAuthenticationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceAuthenticationManager.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceAuthenticationManager.#ctor" />
        <element api="M:System.ServiceModel.ServiceAuthenticationManager.Authenticate(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.Uri,System.ServiceModel.Channels.Message@)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceAuthenticationManager">
      <topicdata name="ServiceAuthenticationManager" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceAuthenticationManager" />
      <apidata name="ServiceAuthenticationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceAuthenticationManager.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceAuthenticationManager.Authenticate(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.Uri,System.ServiceModel.Channels.Message@)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthenticationManager" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthenticationManager.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthenticationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthenticationManager.Authenticate(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.Uri,System.ServiceModel.Channels.Message@)">
      <topicdata group="api" />
      <apidata name="Authenticate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="authPolicy">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="message">
          <referenceTo>
            <type api="T:System.ServiceModel.Channels.Message" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthenticationManager" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceAuthorizationManager">
      <topicdata group="api" />
      <apidata name="ServiceAuthorizationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
        <element api="Overload:System.ServiceModel.ServiceAuthorizationManager.CheckAccess">
          <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
          <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
        </element>
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceAuthorizationManager">
      <topicdata name="ServiceAuthorizationManager" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceAuthorizationManager" />
      <apidata name="ServiceAuthorizationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ServiceAuthorizationManager.CheckAccess">
          <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
          <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
        </element>
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceAuthorizationManager.CheckAccess">
      <topicdata name="CheckAccess" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="CheckAccess" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
        <element api="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthorizationManager.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
      <topicdata group="api" />
      <apidata name="CheckAccess" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceAuthorizationManager.CheckAccess" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="operationContext">
          <type api="T:System.ServiceModel.OperationContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
      <topicdata group="api" />
      <apidata name="CheckAccess" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceAuthorizationManager.CheckAccess" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="operationContext">
          <type api="T:System.ServiceModel.OperationContext" ref="true" />
        </parameter>
        <parameter name="message">
          <referenceTo>
            <type api="T:System.ServiceModel.Channels.Message" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
      <topicdata group="api" />
      <apidata name="CheckAccessCore" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="operationContext">
          <type api="T:System.ServiceModel.OperationContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
      <topicdata group="api" />
      <apidata name="GetAuthorizationPolicies" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="operationContext">
          <type api="T:System.ServiceModel.OperationContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceAuthorizationManager" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceBehaviorAttribute">
      <topicdata group="api" />
      <apidata name="ServiceBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IServiceBehavior" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.GetWellKnownSingleton" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.SetWellKnownSingleton(System.Object)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeConfigurationName" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeReleaseServiceInstanceOnTransactionComplete" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionAutoCompleteOnSessionClose" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionIsolationLevel" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionTimeout" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.AddressFilterMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.AutomaticSessionShutdown" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.EnsureOrderedDispatch" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.IgnoreExtensionDataObject" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.MaxItemsInObjectGraph" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.Name" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.Namespace" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.UseSynchronizationContext" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceBehaviorAttribute">
      <topicdata name="ServiceBehaviorAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceBehaviorAttribute" />
      <apidata name="ServiceBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.GetWellKnownSingleton" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.SetWellKnownSingleton(System.Object)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeConfigurationName" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeReleaseServiceInstanceOnTransactionComplete" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionAutoCompleteOnSessionClose" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionIsolationLevel" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionTimeout" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
        <element api="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceBehaviorAttribute">
      <topicdata name="ServiceBehaviorAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceBehaviorAttribute" />
      <apidata name="ServiceBehaviorAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.AddressFilterMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.AutomaticSessionShutdown" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.EnsureOrderedDispatch" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.IgnoreExtensionDataObject" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.MaxItemsInObjectGraph" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.Name" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.Namespace" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.UseSynchronizationContext" />
        <element api="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.AddressFilterMode">
      <topicdata group="api" />
      <apidata name="AddressFilterMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AddressFilterMode" />
      <setter name="set_AddressFilterMode" />
      <returns>
        <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.AddressFilterMode" ref="false" />
            <enumValue>
              <field name="Exact" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.AutomaticSessionShutdown">
      <topicdata group="api" />
      <apidata name="AutomaticSessionShutdown" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AutomaticSessionShutdown" />
      <setter name="set_AutomaticSessionShutdown" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode">
      <topicdata group="api" />
      <apidata name="ConcurrencyMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConcurrencyMode" />
      <setter name="set_ConcurrencyMode" />
      <returns>
        <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.ConcurrencyMode" ref="false" />
            <enumValue>
              <field name="Single" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName">
      <topicdata group="api" />
      <apidata name="ConfigurationName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConfigurationName" />
      <setter name="set_ConfigurationName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.EnsureOrderedDispatch">
      <topicdata group="api" />
      <apidata name="EnsureOrderedDispatch" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EnsureOrderedDispatch" />
      <setter name="set_EnsureOrderedDispatch" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.GetWellKnownSingleton">
      <topicdata group="api" />
      <apidata name="GetWellKnownSingleton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.IgnoreExtensionDataObject">
      <topicdata group="api" />
      <apidata name="IgnoreExtensionDataObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IgnoreExtensionDataObject" />
      <setter name="set_IgnoreExtensionDataObject" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults">
      <topicdata group="api" />
      <apidata name="IncludeExceptionDetailInFaults" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IncludeExceptionDetailInFaults" />
      <setter name="set_IncludeExceptionDetailInFaults" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode">
      <topicdata group="api" />
      <apidata name="InstanceContextMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InstanceContextMode" />
      <setter name="set_InstanceContextMode" />
      <returns>
        <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.InstanceContextMode" ref="false" />
            <enumValue>
              <field name="PerSession" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.MaxItemsInObjectGraph">
      <topicdata group="api" />
      <apidata name="MaxItemsInObjectGraph" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxItemsInObjectGraph" />
      <setter name="set_MaxItemsInObjectGraph" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>2147483647</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Namespace" />
      <setter name="set_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete">
      <topicdata group="api" />
      <apidata name="ReleaseServiceInstanceOnTransactionComplete" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReleaseServiceInstanceOnTransactionComplete" />
      <setter name="set_ReleaseServiceInstanceOnTransactionComplete" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.SetWellKnownSingleton(System.Object)">
      <topicdata group="api" />
      <apidata name="SetWellKnownSingleton" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeConfigurationName">
      <topicdata group="api" />
      <apidata name="ShouldSerializeConfigurationName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeReleaseServiceInstanceOnTransactionComplete">
      <topicdata group="api" />
      <apidata name="ShouldSerializeReleaseServiceInstanceOnTransactionComplete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionAutoCompleteOnSessionClose">
      <topicdata group="api" />
      <apidata name="ShouldSerializeTransactionAutoCompleteOnSessionClose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionIsolationLevel">
      <topicdata group="api" />
      <apidata name="ShouldSerializeTransactionIsolationLevel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionTimeout">
      <topicdata group="api" />
      <apidata name="ShouldSerializeTransactionTimeout" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" eiiName="IServiceBehavior.AddBindingParameters" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
        </parameter>
        <parameter name="serviceHostBase">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
        <parameter name="endpoints">
          <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IServiceBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <topicdata group="api" eiiName="IServiceBehavior.ApplyDispatchBehavior" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
        </parameter>
        <parameter name="serviceHostBase">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <type api="T:System.ServiceModel.Description.IServiceBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <topicdata group="api" eiiName="IServiceBehavior.Validate" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
        </parameter>
        <parameter name="serviceHostBase">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <type api="T:System.ServiceModel.Description.IServiceBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose">
      <topicdata group="api" />
      <apidata name="TransactionAutoCompleteOnSessionClose" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionAutoCompleteOnSessionClose" />
      <setter name="set_TransactionAutoCompleteOnSessionClose" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel">
      <topicdata group="api" />
      <apidata name="TransactionIsolationLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionIsolationLevel" />
      <setter name="set_TransactionIsolationLevel" />
      <returns>
        <type api="T:System.Transactions.IsolationLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout">
      <topicdata group="api" />
      <apidata name="TransactionTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionTimeout" />
      <setter name="set_TransactionTimeout" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.UseSynchronizationContext">
      <topicdata group="api" />
      <apidata name="UseSynchronizationContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseSynchronizationContext" />
      <setter name="set_UseSynchronizationContext" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand">
      <topicdata group="api" />
      <apidata name="ValidateMustUnderstand" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ValidateMustUnderstand" />
      <setter name="set_ValidateMustUnderstand" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceBehaviorAttribute" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.ServiceConfiguration">
      <topicdata group="api" />
      <apidata name="ServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceConfiguration.EnableProtocol(System.ServiceModel.Channels.Binding)" />
        <element api="Overload:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration">
          <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration" />
          <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration(System.Configuration.Configuration)" />
        </element>
        <element api="M:System.ServiceModel.ServiceConfiguration.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Authentication" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Authorization" />
        <element api="P:System.ServiceModel.ServiceConfiguration.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceConfiguration.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Credentials" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Description" />
        <element api="P:System.ServiceModel.ServiceConfiguration.IdentityConfiguration" />
        <element api="P:System.ServiceModel.ServiceConfiguration.OpenTimeout" />
        <element api="P:System.ServiceModel.ServiceConfiguration.UseIdentityConfiguration" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceConfiguration">
      <topicdata name="ServiceConfiguration" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceConfiguration" />
      <apidata name="ServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceConfiguration.EnableProtocol(System.ServiceModel.Channels.Binding)" />
        <element api="Overload:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration">
          <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration" />
          <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration(System.Configuration.Configuration)" />
        </element>
        <element api="M:System.ServiceModel.ServiceConfiguration.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceConfiguration">
      <topicdata name="ServiceConfiguration" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceConfiguration" />
      <apidata name="ServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ServiceConfiguration.Authentication" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Authorization" />
        <element api="P:System.ServiceModel.ServiceConfiguration.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceConfiguration.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Credentials" />
        <element api="P:System.ServiceModel.ServiceConfiguration.Description" />
        <element api="P:System.ServiceModel.ServiceConfiguration.IdentityConfiguration" />
        <element api="P:System.ServiceModel.ServiceConfiguration.OpenTimeout" />
        <element api="P:System.ServiceModel.ServiceConfiguration.UseIdentityConfiguration" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint">
      <topicdata name="AddServiceEndpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration">
      <topicdata name="LoadFromConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="LoadFromConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration" />
        <element api="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration(System.Configuration.Configuration)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="contractType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.Authentication">
      <topicdata group="api" />
      <apidata name="Authentication" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Authentication" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceAuthenticationBehavior" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.Authorization">
      <topicdata group="api" />
      <apidata name="Authorization" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Authorization" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceAuthorizationBehavior" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.BaseAddresses">
      <topicdata group="api" />
      <apidata name="BaseAddresses" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BaseAddresses" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Uri" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.CloseTimeout">
      <topicdata group="api" />
      <apidata name="CloseTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CloseTimeout" />
      <setter name="set_CloseTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.Credentials">
      <topicdata group="api" />
      <apidata name="Credentials" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Credentials" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceCredentials" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.Description">
      <topicdata group="api" />
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Description" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.EnableProtocol(System.ServiceModel.Channels.Binding)">
      <topicdata group="api" />
      <apidata name="EnableProtocol" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="protocol">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.ObjectModel.Collection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.IdentityConfiguration">
      <topicdata group="api" />
      <apidata name="IdentityConfiguration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IdentityConfiguration" />
      <setter name="set_IdentityConfiguration" />
      <returns>
        <type api="T:System.IdentityModel.Configuration.IdentityConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration">
      <topicdata group="api" />
      <apidata name="LoadFromConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration(System.Configuration.Configuration)">
      <topicdata group="api" />
      <apidata name="LoadFromConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.Configuration.Configuration" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.OpenTimeout">
      <topicdata group="api" />
      <apidata name="OpenTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OpenTimeout" />
      <setter name="set_OpenTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceConfiguration.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)">
      <topicdata group="api" />
      <apidata name="SetEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="relativeAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceConfiguration.UseIdentityConfiguration">
      <topicdata group="api" />
      <apidata name="UseIdentityConfiguration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseIdentityConfiguration" />
      <setter name="set_UseIdentityConfiguration" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceContractAttribute">
      <topicdata group="api" />
      <apidata name="ServiceContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.Name" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceContractAttribute">
      <topicdata name="ServiceContractAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceContractAttribute" />
      <apidata name="ServiceContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceContractAttribute">
      <topicdata name="ServiceContractAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceContractAttribute" />
      <apidata name="ServiceContractAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.Name" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
        <element api="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <topicdata group="api" />
      <apidata name="CallbackContract" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CallbackContract" />
      <setter name="set_CallbackContract" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <topicdata group="api" />
      <apidata name="ConfigurationName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ConfigurationName" />
      <setter name="set_ConfigurationName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
      <topicdata group="api" />
      <apidata name="HasProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_HasProtectionLevel" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <topicdata group="api" />
      <apidata name="Namespace" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Namespace" />
      <setter name="set_Namespace" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
      <topicdata group="api" />
      <apidata name="SessionMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SessionMode" />
      <setter name="set_SessionMode" />
      <returns>
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceContractAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceHost">
      <topicdata group="api" />
      <apidata name="ServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.Security.WSTrustServiceHost" ref="true" />
          <type api="T:System.ServiceModel.Web.WebServiceHost" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ServiceHost.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHost.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHost.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.ServiceHost.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="Overload:System.ServiceModel.ServiceHost.#ctor">
          <element api="M:System.ServiceModel.ServiceHost.#ctor" />
          <element api="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])" />
          <element api="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHost.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="Overload:System.ServiceModel.ServiceHost.InitializeDescription">
          <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
          <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)" />
          <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHost.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHost.SingletonInstance" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceHost">
      <topicdata name="ServiceHost" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceHost" />
      <apidata name="ServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ServiceHost.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHost.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHost.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.ServiceHost.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHost.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="Overload:System.ServiceModel.ServiceHost.InitializeDescription">
          <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
          <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)" />
          <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHost.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceHost">
      <topicdata name="ServiceHost" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceHost" />
      <apidata name="ServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHost.SingletonInstance" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ServiceHost">
      <topicdata name="ServiceHost" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ServiceHost" />
      <apidata name="ServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceHost.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHost.#ctor" />
        <element api="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])" />
        <element api="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint">
      <topicdata name="AddServiceEndpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceHost.InitializeDescription">
      <topicdata name="InitializeDescription" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="InitializeDescription" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.ServiceHost.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceHost.#ctor" />
      <parameters>
        <parameter name="singletonInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="baseAddresses" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceHost.#ctor" />
      <parameters>
        <parameter name="serviceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="baseAddresses" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.ApplyConfiguration">
      <topicdata group="api" />
      <apidata name="ApplyConfiguration" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <topicdata group="api" />
      <apidata name="CreateDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="implementedContracts" out="true">
          <referenceTo>
            <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)">
      <topicdata group="api" />
      <apidata name="InitializeDescription" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ServiceHost.InitializeDescription" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="singletonInstance">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="baseAddresses">
          <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)">
      <topicdata group="api" />
      <apidata name="InitializeDescription" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:System.ServiceModel.ServiceHost.InitializeDescription" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serviceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="baseAddresses">
          <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHost.OnClosed">
      <topicdata group="api" />
      <apidata name="OnClosed" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ServiceHostBase.OnClosed">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHost.SingletonInstance">
      <topicdata group="api" />
      <apidata name="SingletonInstance" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_SingletonInstance" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHost" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceHostBase">
      <topicdata group="api" />
      <apidata name="ServiceHostBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.ServiceHost" ref="true" />
          <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
          <type api="T:System.ServiceModel.Activities.WorkflowServiceHost" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHostBase.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHostBase.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="M:System.ServiceModel.ServiceHostBase.#ctor" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceHostBase">
      <topicdata name="ServiceHostBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceHostBase" />
      <apidata name="ServiceHostBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHostBase.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.ServiceHostBase.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceHostBase">
      <topicdata name="ServiceHostBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceHostBase" />
      <apidata name="ServiceHostBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.ServiceHostBase">
      <topicdata name="ServiceHostBase" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.ServiceHostBase" />
      <apidata name="ServiceHostBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint">
      <topicdata name="AddServiceEndpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)">
      <topicdata group="api" />
      <apidata name="AddBaseAddress" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="baseAddress">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints">
      <topicdata group="api" />
      <apidata name="AddDefaultEndpoints" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.ServiceHostBase.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration">
      <topicdata group="api" />
      <apidata name="ApplyConfiguration" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.Authentication">
      <topicdata group="api" />
      <apidata name="Authentication" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Authentication" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceAuthenticationBehavior" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.Authorization">
      <topicdata group="api" />
      <apidata name="Authorization" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Authorization" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceAuthorizationBehavior" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.BaseAddresses">
      <topicdata group="api" />
      <apidata name="BaseAddresses" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_BaseAddresses" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Uri" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers">
      <topicdata group="api" />
      <apidata name="ChannelDispatchers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ChannelDispatchers" />
      <returns>
        <type api="T:System.ServiceModel.Dispatcher.ChannelDispatcherCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.CloseTimeout">
      <topicdata group="api" />
      <apidata name="CloseTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CloseTimeout" />
      <setter name="set_CloseTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <topicdata group="api" />
      <apidata name="CreateDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="implementedContracts" out="true">
          <referenceTo>
            <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.Credentials">
      <topicdata group="api" />
      <apidata name="Credentials" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Credentials" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceCredentials" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout">
      <topicdata group="api" />
      <apidata name="DefaultCloseTimeout" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_DefaultCloseTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout">
      <topicdata group="api" />
      <apidata name="DefaultOpenTimeout" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_DefaultOpenTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.Description">
      <topicdata group="api" />
      <apidata name="Description" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Description" />
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.Extensions">
      <topicdata group="api" />
      <apidata name="Extensions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Extensions" />
      <returns>
        <type api="T:System.ServiceModel.IExtensionCollection`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.ServiceModel.IExtensibleObject`1.Extensions">
          <type api="T:System.ServiceModel.IExtensibleObject`1" ref="true">
            <specialization>
              <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.ImplementedContracts">
      <topicdata group="api" />
      <apidata name="ImplementedContracts" group="member" subgroup="property" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ImplementedContracts" />
      <returns>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)">
      <topicdata group="api" />
      <apidata name="IncrementManualFlowControlLimit" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="incrementBy">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)">
      <topicdata group="api" />
      <apidata name="InitializeDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="baseAddresses">
          <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.InitializeRuntime">
      <topicdata group="api" />
      <apidata name="InitializeRuntime" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)">
      <topicdata group="api" />
      <apidata name="LoadConfigurationSection" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serviceSection">
          <type api="T:System.ServiceModel.Configuration.ServiceElement" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit">
      <topicdata group="api" />
      <apidata name="ManualFlowControlLimit" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ManualFlowControlLimit" />
      <setter name="set_ManualFlowControlLimit" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnAbort">
      <topicdata group="api" />
      <apidata name="OnAbort" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="OnBeginClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <topicdata group="api" />
      <apidata name="OnBeginOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
        <parameter name="callback">
          <type api="T:System.AsyncCallback" ref="true" />
        </parameter>
        <parameter name="state">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IAsyncResult" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="OnClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnClosed">
      <topicdata group="api" />
      <apidata name="OnClosed" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="OnEndClose" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)">
      <topicdata group="api" />
      <apidata name="OnEndOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="result">
          <type api="T:System.IAsyncResult" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)">
      <topicdata group="api" />
      <apidata name="OnOpen" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="timeout">
          <type api="T:System.TimeSpan" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.OnOpened">
      <topicdata group="api" />
      <apidata name="OnOpened" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostBase.OpenTimeout">
      <topicdata group="api" />
      <apidata name="OpenTimeout" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_OpenTimeout" />
      <setter name="set_OpenTimeout" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters">
      <topicdata group="api" />
      <apidata name="ReleasePerformanceCounters" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)">
      <topicdata group="api" />
      <apidata name="SetEndpointAddress" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="endpoint">
          <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
        </parameter>
        <parameter name="relativeAddress">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose">
      <topicdata group="api" eiiName="IDisposable.Dispose" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived">
      <topicdata group="api" />
      <apidata name="UnknownMessageReceived" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_UnknownMessageReceived" />
      <remover name="remove_UnknownMessageReceived" />
      <eventhandler>
        <type api="T:System.EventHandler`1" ref="true">
          <specialization>
            <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
          </specialization>
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceHostingEnvironment">
      <topicdata group="api" />
      <apidata name="ServiceHostingEnvironment" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailable(System.String)" />
        <element api="P:System.ServiceModel.ServiceHostingEnvironment.AspNetCompatibilityEnabled" />
        <element api="P:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceHostingEnvironment">
      <topicdata name="ServiceHostingEnvironment" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceHostingEnvironment" />
      <apidata name="ServiceHostingEnvironment" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailable(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostingEnvironment" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceHostingEnvironment">
      <topicdata name="ServiceHostingEnvironment" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceHostingEnvironment" />
      <apidata name="ServiceHostingEnvironment" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ServiceHostingEnvironment.AspNetCompatibilityEnabled" />
        <element api="P:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostingEnvironment" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostingEnvironment.AspNetCompatibilityEnabled">
      <topicdata group="api" />
      <apidata name="AspNetCompatibilityEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AspNetCompatibilityEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostingEnvironment" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailable(System.String)">
      <topicdata group="api" />
      <apidata name="EnsureServiceAvailable" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="virtualPath">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostingEnvironment" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled">
      <topicdata group="api" />
      <apidata name="MultipleSiteBindingsEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MultipleSiteBindingsEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Activation" module="System.ServiceModel.Activation" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceHostingEnvironment" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <topicdata group="api" />
      <apidata name="ServiceKnownTypeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ServiceKnownTypeAttribute.#ctor">
          <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)" />
          <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)" />
          <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)" />
        </element>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.Type" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Method" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceKnownTypeAttribute">
      <topicdata name="ServiceKnownTypeAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceKnownTypeAttribute" />
      <apidata name="ServiceKnownTypeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceKnownTypeAttribute">
      <topicdata name="ServiceKnownTypeAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceKnownTypeAttribute" />
      <apidata name="ServiceKnownTypeAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName" />
        <element api="P:System.ServiceModel.ServiceKnownTypeAttribute.Type" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceKnownTypeAttribute.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)" />
        <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)" />
        <element api="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceKnownTypeAttribute.#ctor" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceKnownTypeAttribute.#ctor" />
      <parameters>
        <parameter name="methodName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="declaringType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceKnownTypeAttribute.#ctor" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <topicdata group="api" />
      <apidata name="DeclaringType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DeclaringType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <topicdata group="api" />
      <apidata name="MethodName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MethodName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceKnownTypeAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.ServiceSecurityContext">
      <topicdata group="api" />
      <apidata name="ServiceSecurityContext" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.ServiceSecurityContext.#ctor">
          <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)" />
          <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
          <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
        </element>
        <element api="P:System.ServiceModel.ServiceSecurityContext.Anonymous" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.AuthorizationContext" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.Current" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.IsAnonymous" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.WindowsIdentity" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.ServiceSecurityContext">
      <topicdata name="ServiceSecurityContext" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.ServiceSecurityContext" />
      <apidata name="ServiceSecurityContext" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.ServiceSecurityContext">
      <topicdata name="ServiceSecurityContext" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.ServiceSecurityContext" />
      <apidata name="ServiceSecurityContext" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.ServiceSecurityContext.Anonymous" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.AuthorizationContext" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.Current" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.IsAnonymous" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity" />
        <element api="P:System.ServiceModel.ServiceSecurityContext.WindowsIdentity" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.ServiceSecurityContext.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)" />
        <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
        <element api="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceSecurityContext.#ctor" />
      <parameters>
        <parameter name="authorizationPolicies">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceSecurityContext.#ctor" />
      <parameters>
        <parameter name="authorizationContext">
          <type api="T:System.IdentityModel.Policy.AuthorizationContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.ServiceSecurityContext.#ctor" />
      <parameters>
        <parameter name="authorizationContext">
          <type api="T:System.IdentityModel.Policy.AuthorizationContext" ref="true" />
        </parameter>
        <parameter name="authorizationPolicies">
          <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
            <specialization>
              <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.Anonymous">
      <topicdata group="api" />
      <apidata name="Anonymous" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Anonymous" />
      <returns>
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.AuthorizationContext">
      <topicdata group="api" />
      <apidata name="AuthorizationContext" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_AuthorizationContext" />
      <returns>
        <type api="T:System.IdentityModel.Policy.AuthorizationContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies">
      <topicdata group="api" />
      <apidata name="AuthorizationPolicies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AuthorizationPolicies" />
      <setter name="set_AuthorizationPolicies" />
      <returns>
        <type api="T:System.Collections.ObjectModel.ReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.IdentityModel.Policy.IAuthorizationPolicy" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Current" />
      <returns>
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.IsAnonymous">
      <topicdata group="api" />
      <apidata name="IsAnonymous" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsAnonymous" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity">
      <topicdata group="api" />
      <apidata name="PrimaryIdentity" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_PrimaryIdentity" />
      <returns>
        <type api="T:System.Security.Principal.IIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.ServiceSecurityContext.WindowsIdentity">
      <topicdata group="api" />
      <apidata name="WindowsIdentity" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WindowsIdentity" />
      <returns>
        <type api="T:System.Security.Principal.WindowsIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.ServiceSecurityContext" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.SessionMode">
      <topicdata group="api" />
      <apidata name="SessionMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.SessionMode.Allowed" />
        <element api="F:System.ServiceModel.SessionMode.Required" />
        <element api="F:System.ServiceModel.SessionMode.NotAllowed" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SessionMode.Allowed">
      <topicdata group="api" notopic="" />
      <apidata name="Allowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SessionMode.NotAllowed">
      <topicdata group="api" notopic="" />
      <apidata name="NotAllowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.SessionMode.Required">
      <topicdata group="api" notopic="" />
      <apidata name="Required" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SessionMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.SpnEndpointIdentity">
      <topicdata group="api" />
      <apidata name="SpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.SpnEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="Overload:System.ServiceModel.SpnEndpointIdentity.#ctor">
          <element api="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.String)" />
        </element>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
        <element api="P:System.ServiceModel.SpnEndpointIdentity.SpnLookupTime" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.SpnEndpointIdentity">
      <topicdata name="SpnEndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.SpnEndpointIdentity" />
      <apidata name="SpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.SpnEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.SpnEndpointIdentity">
      <topicdata name="SpnEndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.SpnEndpointIdentity" />
      <apidata name="SpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
        <element api="P:System.ServiceModel.SpnEndpointIdentity.SpnLookupTime" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.SpnEndpointIdentity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
        <element api="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.SpnEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.SpnEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="spnName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.SpnEndpointIdentity.SpnLookupTime">
      <topicdata group="api" />
      <apidata name="SpnLookupTime" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SpnLookupTime" />
      <setter name="set_SpnLookupTime" />
      <returns>
        <type api="T:System.TimeSpan" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.SpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.TcpClientCredentialType">
      <topicdata group="api" />
      <apidata name="TcpClientCredentialType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.TcpClientCredentialType.None" />
        <element api="F:System.ServiceModel.TcpClientCredentialType.Windows" />
        <element api="F:System.ServiceModel.TcpClientCredentialType.Certificate" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TcpClientCredentialType.Certificate">
      <topicdata group="api" notopic="" />
      <apidata name="Certificate" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TcpClientCredentialType.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TcpClientCredentialType.Windows">
      <topicdata group="api" notopic="" />
      <apidata name="Windows" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.TcpTransportSecurity">
      <topicdata group="api" />
      <apidata name="TcpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.TcpTransportSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.TcpTransportSecurity.#ctor" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.ClientCredentialType" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.ProtectionLevel" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.SslProtocols" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.TcpTransportSecurity">
      <topicdata name="TcpTransportSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.TcpTransportSecurity" />
      <apidata name="TcpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.TcpTransportSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.TcpTransportSecurity">
      <topicdata name="TcpTransportSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.TcpTransportSecurity" />
      <apidata name="TcpTransportSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.TcpTransportSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.TcpTransportSecurity.ClientCredentialType" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.ProtectionLevel" />
        <element api="P:System.ServiceModel.TcpTransportSecurity.SslProtocols" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TcpTransportSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TcpTransportSecurity.ClientCredentialType">
      <topicdata group="api" />
      <apidata name="ClientCredentialType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCredentialType" />
      <setter name="set_ClientCredentialType" />
      <returns>
        <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.TcpClientCredentialType" ref="false" />
            <enumValue>
              <field name="Windows" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy">
      <topicdata group="api" />
      <apidata name="ExtendedProtectionPolicy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ExtendedProtectionPolicy" />
      <setter name="set_ExtendedProtectionPolicy" />
      <returns>
        <type api="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TcpTransportSecurity.ProtectionLevel">
      <topicdata group="api" />
      <apidata name="ProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProtectionLevel" />
      <setter name="set_ProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
            <enumValue>
              <field name="EncryptAndSign" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.TcpTransportSecurity.SslProtocols">
      <topicdata group="api" />
      <apidata name="SslProtocols" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SslProtocols" />
      <setter name="set_SslProtocols" />
      <returns>
        <type api="T:System.Security.Authentication.SslProtocols" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TcpTransportSecurity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Security.Authentication.SslProtocols" ref="false" />
            <enumValue>
              <field name="Tls" />
              <field name="Tls11" />
              <field name="Tls12" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.TransactionFlowAttribute">
      <topicdata group="api" />
      <apidata name="TransactionFlowAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.#ctor(System.ServiceModel.TransactionFlowOption)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.TransactionFlowAttribute.Transactions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Method" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.TransactionFlowAttribute">
      <topicdata name="TransactionFlowAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.TransactionFlowAttribute" />
      <apidata name="TransactionFlowAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
        <element api="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.TransactionFlowAttribute">
      <topicdata name="TransactionFlowAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.TransactionFlowAttribute" />
      <apidata name="TransactionFlowAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.TransactionFlowAttribute.Transactions" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionFlowAttribute.#ctor(System.ServiceModel.TransactionFlowOption)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="transactions">
          <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" eiiName="IOperationBehavior.AddBindingParameters" />
      <apidata name="AddBindingParameters" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <topicdata group="api" eiiName="IOperationBehavior.ApplyClientBehavior" />
      <apidata name="ApplyClientBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="proxy">
          <type api="T:System.ServiceModel.Dispatcher.ClientOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <topicdata group="api" eiiName="IOperationBehavior.ApplyDispatchBehavior" />
      <apidata name="ApplyDispatchBehavior" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
        <parameter name="dispatch">
          <type api="T:System.ServiceModel.Dispatcher.DispatchOperation" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <topicdata group="api" eiiName="IOperationBehavior.Validate" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <parameters>
        <parameter name="description">
          <type api="T:System.ServiceModel.Description.OperationDescription" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
          <type api="T:System.ServiceModel.Description.IOperationBehavior" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TransactionFlowAttribute.Transactions">
      <topicdata group="api" />
      <apidata name="Transactions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Transactions" />
      <returns>
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.TransactionFlowOption">
      <topicdata group="api" />
      <apidata name="TransactionFlowOption" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.TransactionFlowOption.NotAllowed" />
        <element api="F:System.ServiceModel.TransactionFlowOption.Allowed" />
        <element api="F:System.ServiceModel.TransactionFlowOption.Mandatory" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransactionFlowOption.Allowed">
      <topicdata group="api" notopic="" />
      <apidata name="Allowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransactionFlowOption.Mandatory">
      <topicdata group="api" notopic="" />
      <apidata name="Mandatory" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransactionFlowOption.NotAllowed">
      <topicdata group="api" notopic="" />
      <apidata name="NotAllowed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionFlowOption" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.TransactionProtocol">
      <topicdata group="api" />
      <apidata name="TransactionProtocol" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.TransactionProtocol.#ctor" />
        <element api="P:System.ServiceModel.TransactionProtocol.Default" />
        <element api="P:System.ServiceModel.TransactionProtocol.OleTransactions" />
        <element api="P:System.ServiceModel.TransactionProtocol.WSAtomicTransaction11" />
        <element api="P:System.ServiceModel.TransactionProtocol.WSAtomicTransactionOctober2004" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.TransactionProtocol">
      <topicdata name="TransactionProtocol" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.TransactionProtocol" />
      <apidata name="TransactionProtocol" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.TransactionProtocol">
      <topicdata name="TransactionProtocol" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.TransactionProtocol" />
      <apidata name="TransactionProtocol" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.TransactionProtocol.Default" />
        <element api="P:System.ServiceModel.TransactionProtocol.OleTransactions" />
        <element api="P:System.ServiceModel.TransactionProtocol.WSAtomicTransaction11" />
        <element api="P:System.ServiceModel.TransactionProtocol.WSAtomicTransactionOctober2004" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.TransactionProtocol.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TransactionProtocol.Default">
      <topicdata group="api" />
      <apidata name="Default" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Default" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TransactionProtocol.OleTransactions">
      <topicdata group="api" />
      <apidata name="OleTransactions" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_OleTransactions" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TransactionProtocol.WSAtomicTransaction11">
      <topicdata group="api" />
      <apidata name="WSAtomicTransaction11" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSAtomicTransaction11" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.TransactionProtocol.WSAtomicTransactionOctober2004">
      <topicdata group="api" />
      <apidata name="WSAtomicTransactionOctober2004" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_WSAtomicTransactionOctober2004" />
      <returns>
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransactionProtocol" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.TransferMode">
      <topicdata group="api" />
      <apidata name="TransferMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.TransferMode.Buffered" />
        <element api="F:System.ServiceModel.TransferMode.Streamed" />
        <element api="F:System.ServiceModel.TransferMode.StreamedRequest" />
        <element api="F:System.ServiceModel.TransferMode.StreamedResponse" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransferMode.Buffered">
      <topicdata group="api" notopic="" />
      <apidata name="Buffered" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransferMode.Streamed">
      <topicdata group="api" notopic="" />
      <apidata name="Streamed" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransferMode.StreamedRequest">
      <topicdata group="api" notopic="" />
      <apidata name="StreamedRequest" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.TransferMode.StreamedResponse">
      <topicdata group="api" notopic="" />
      <apidata name="StreamedResponse" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.UdpBinding">
      <topicdata group="api" />
      <apidata name="UdpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.UdpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.UdpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.UdpBinding.#ctor">
          <element api="M:System.ServiceModel.UdpBinding.#ctor" />
          <element api="M:System.ServiceModel.UdpBinding.#ctor(System.String)" />
        </element>
        <element api="M:System.ServiceModel.UdpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.UdpBinding.DuplicateMessageHistoryLength" />
        <element api="P:System.ServiceModel.UdpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxPendingMessagesTotalSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxRetransmitCount" />
        <element api="P:System.ServiceModel.UdpBinding.MulticastInterfaceId" />
        <element api="P:System.ServiceModel.UdpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.UdpBinding.Scheme" />
        <element api="P:System.ServiceModel.UdpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.UdpBinding.TextEncoding" />
        <element api="P:System.ServiceModel.UdpBinding.TimeToLive" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.UdpBinding">
      <topicdata name="UdpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.UdpBinding" />
      <apidata name="UdpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.UdpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.UdpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.UdpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.UdpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.UdpBinding">
      <topicdata name="UdpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.UdpBinding" />
      <apidata name="UdpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.UdpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.UdpBinding.DuplicateMessageHistoryLength" />
        <element api="P:System.ServiceModel.UdpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxPendingMessagesTotalSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.UdpBinding.MaxRetransmitCount" />
        <element api="P:System.ServiceModel.UdpBinding.MulticastInterfaceId" />
        <element api="P:System.ServiceModel.UdpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.UdpBinding.Scheme" />
        <element api="P:System.ServiceModel.UdpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.UdpBinding.TextEncoding" />
        <element api="P:System.ServiceModel.UdpBinding.TimeToLive" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.UdpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.UdpBinding.#ctor" />
        <element api="M:System.ServiceModel.UdpBinding.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UdpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.UdpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UdpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.UdpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UdpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.DuplicateMessageHistoryLength">
      <topicdata group="api" />
      <apidata name="DuplicateMessageHistoryLength" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DuplicateMessageHistoryLength" />
      <setter name="set_DuplicateMessageHistoryLength" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.MaxPendingMessagesTotalSize">
      <topicdata group="api" />
      <apidata name="MaxPendingMessagesTotalSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxPendingMessagesTotalSize" />
      <setter name="set_MaxPendingMessagesTotalSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.MaxRetransmitCount">
      <topicdata group="api" />
      <apidata name="MaxRetransmitCount" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxRetransmitCount" />
      <setter name="set_MaxRetransmitCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.MulticastInterfaceId">
      <topicdata group="api" />
      <apidata name="MulticastInterfaceId" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MulticastInterfaceId" />
      <setter name="set_MulticastInterfaceId" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.TextEncoding">
      <topicdata group="api" />
      <apidata name="TextEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TextEncoding" />
      <setter name="set_TextEncoding" />
      <returns>
        <type api="T:System.Text.Encoding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UdpBinding.TimeToLive">
      <topicdata group="api" />
      <apidata name="TimeToLive" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TimeToLive" />
      <setter name="set_TimeToLive" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Channels" module="System.ServiceModel.Channels" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UdpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>1</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <topicdata group="api" />
      <apidata name="UnknownMessageReceivedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <topicdata name="UnknownMessageReceivedEventArgs" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.UnknownMessageReceivedEventArgs" />
      <apidata name="UnknownMessageReceivedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <topicdata name="UnknownMessageReceivedEventArgs" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.UnknownMessageReceivedEventArgs" />
      <apidata name="UnknownMessageReceivedEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Message" />
      <returns>
        <type api="T:System.ServiceModel.Channels.Message" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UnknownMessageReceivedEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.UpnEndpointIdentity">
      <topicdata group="api" />
      <apidata name="UpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.UpnEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="Overload:System.ServiceModel.UpnEndpointIdentity.#ctor">
          <element api="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.String)" />
        </element>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.UpnEndpointIdentity">
      <topicdata name="UpnEndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.UpnEndpointIdentity" />
      <apidata name="UpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.UpnEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UpnEndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.UpnEndpointIdentity">
      <topicdata name="UpnEndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.UpnEndpointIdentity" />
      <apidata name="UpnEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UpnEndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.UpnEndpointIdentity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)" />
        <element api="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.UpnEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="identity">
          <type api="T:System.IdentityModel.Claims.Claim" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.UpnEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="upnName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UpnEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.UriSchemeKeyedCollection">
      <topicdata group="api" />
      <apidata name="UriSchemeKeyedCollection" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Collections.Generic.SynchronizedKeyedCollection`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Uri" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Collections.Generic.SynchronizedCollection`1" ref="true">
            <specialization>
              <type api="T:System.Uri" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Clear" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems" />
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Contains">
          <element api="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)" />
          <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)" />
        </element>
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Remove">
          <element api="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)" />
          <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)" />
        </element>
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.#ctor(System.Uri[])" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.GetKeyForItem(System.Uri)" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.InsertItem(System.Int32,System.Uri)" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.SetItem(System.Int32,System.Uri)" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Count" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Items" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)" />
        <element api="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary" />
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Item">
          <element api="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)" />
          <element api="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.UriSchemeKeyedCollection">
      <topicdata name="UriSchemeKeyedCollection" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.UriSchemeKeyedCollection" />
      <apidata name="UriSchemeKeyedCollection" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Clear" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)" />
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)" />
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems" />
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Contains">
          <element api="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)" />
          <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)" />
        </element>
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Remove">
          <element api="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)" />
          <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)" />
        </element>
        <element api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.GetKeyForItem(System.Uri)" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.InsertItem(System.Int32,System.Uri)" />
        <element api="M:System.ServiceModel.UriSchemeKeyedCollection.SetItem(System.Int32,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.UriSchemeKeyedCollection">
      <topicdata name="UriSchemeKeyedCollection" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.UriSchemeKeyedCollection" />
      <apidata name="UriSchemeKeyedCollection" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Count" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.Items" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly" />
        <element api="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)" />
        <element api="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary" />
        <element api="Overload:System.ServiceModel.UriSchemeKeyedCollection.Item">
          <element api="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)" />
          <element api="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UriSchemeKeyedCollection.#ctor(System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="addresses" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UriSchemeKeyedCollection.GetKeyForItem(System.Uri)">
      <topicdata group="api" />
      <apidata name="GetKeyForItem" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)">
          <type api="T:System.Collections.Generic.SynchronizedKeyedCollection`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Uri" ref="true" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UriSchemeKeyedCollection.InsertItem(System.Int32,System.Uri)">
      <topicdata group="api" />
      <apidata name="InsertItem" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)">
          <type api="T:System.Collections.Generic.SynchronizedKeyedCollection`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Uri" ref="true" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.UriSchemeKeyedCollection.SetItem(System.Int32,System.Uri)">
      <topicdata group="api" />
      <apidata name="SetItem" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)">
          <type api="T:System.Collections.Generic.SynchronizedKeyedCollection`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Uri" ref="true" />
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.UriSchemeKeyedCollection" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WebHttpBinding">
      <topicdata group="api" />
      <apidata name="WebHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WebHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WebHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WebHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WebHttpBinding.#ctor">
          <element api="M:System.ServiceModel.WebHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WebHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WebHttpBinding.#ctor(System.ServiceModel.WebHttpSecurityMode)" />
        </element>
        <element api="Overload:System.ServiceModel.WebHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WebHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WebHttpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WebHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WebHttpBinding.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WebHttpBinding.ContentTypeMapper" />
        <element api="P:System.ServiceModel.WebHttpBinding.CrossDomainScriptAccessEnabled" />
        <element api="P:System.ServiceModel.WebHttpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WebHttpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.ProxyAddress" />
        <element api="P:System.ServiceModel.WebHttpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.WebHttpBinding.Scheme" />
        <element api="P:System.ServiceModel.WebHttpBinding.Security" />
        <element api="P:System.ServiceModel.WebHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WebHttpBinding.TransferMode" />
        <element api="P:System.ServiceModel.WebHttpBinding.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.WebHttpBinding.WriteEncoding" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WebHttpBinding">
      <topicdata name="WebHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WebHttpBinding" />
      <apidata name="WebHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WebHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WebHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WebHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WebHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WebHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WebHttpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WebHttpBinding">
      <topicdata name="WebHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WebHttpBinding" />
      <apidata name="WebHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WebHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WebHttpBinding.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WebHttpBinding.ContentTypeMapper" />
        <element api="P:System.ServiceModel.WebHttpBinding.CrossDomainScriptAccessEnabled" />
        <element api="P:System.ServiceModel.WebHttpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WebHttpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxBufferSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WebHttpBinding.ProxyAddress" />
        <element api="P:System.ServiceModel.WebHttpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.WebHttpBinding.Scheme" />
        <element api="P:System.ServiceModel.WebHttpBinding.Security" />
        <element api="P:System.ServiceModel.WebHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WebHttpBinding.TransferMode" />
        <element api="P:System.ServiceModel.WebHttpBinding.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.WebHttpBinding.WriteEncoding" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WebHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WebHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WebHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WebHttpBinding.#ctor(System.ServiceModel.WebHttpSecurityMode)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WebHttpBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.WebHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WebHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WebHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WebHttpBinding.#ctor(System.ServiceModel.WebHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WebHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WebHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WebHttpBinding.#ctor" />
      <parameters>
        <parameter name="configurationName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.AllowCookies">
      <topicdata group="api" />
      <apidata name="AllowCookies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowCookies" />
      <setter name="set_AllowCookies" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.WebHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WebHttpBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.WebHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.BypassProxyOnLocal">
      <topicdata group="api" />
      <apidata name="BypassProxyOnLocal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BypassProxyOnLocal" />
      <setter name="set_BypassProxyOnLocal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.ContentTypeMapper">
      <topicdata group="api" />
      <apidata name="ContentTypeMapper" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContentTypeMapper" />
      <setter name="set_ContentTypeMapper" />
      <returns>
        <type api="T:System.ServiceModel.Channels.WebContentTypeMapper" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WebHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.CrossDomainScriptAccessEnabled">
      <topicdata group="api" />
      <apidata name="CrossDomainScriptAccessEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_CrossDomainScriptAccessEnabled" />
      <setter name="set_CrossDomainScriptAccessEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.MaxBufferSize">
      <topicdata group="api" />
      <apidata name="MaxBufferSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferSize" />
      <setter name="set_MaxBufferSize" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.ProxyAddress">
      <topicdata group="api" />
      <apidata name="ProxyAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProxyAddress" />
      <setter name="set_ProxyAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.WebHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.TransferMode">
      <topicdata group="api" />
      <apidata name="TransferMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransferMode" />
      <setter name="set_TransferMode" />
      <returns>
        <type api="T:System.ServiceModel.TransferMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.TransferMode" ref="false" />
            <enumValue>
              <field name="Buffered" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.UseDefaultWebProxy">
      <topicdata group="api" />
      <apidata name="UseDefaultWebProxy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseDefaultWebProxy" />
      <setter name="set_UseDefaultWebProxy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WebHttpBinding.WriteEncoding">
      <topicdata group="api" />
      <apidata name="WriteEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WriteEncoding" />
      <setter name="set_WriteEncoding" />
      <returns>
        <type api="T:System.Text.Encoding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WebHttpSecurity">
      <topicdata group="api" />
      <apidata name="WebHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.WebHttpSecurity.#ctor" />
        <element api="P:System.ServiceModel.WebHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.WebHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WebHttpSecurity">
      <topicdata name="WebHttpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WebHttpSecurity" />
      <apidata name="WebHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WebHttpSecurity">
      <topicdata name="WebHttpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WebHttpSecurity" />
      <apidata name="WebHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WebHttpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.WebHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.WebHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WebHttpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WebHttpSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WebHttpSecurityMode">
      <topicdata group="api" />
      <apidata name="WebHttpSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.WebHttpSecurityMode.None" />
        <element api="F:System.ServiceModel.WebHttpSecurityMode.Transport" />
        <element api="F:System.ServiceModel.WebHttpSecurityMode.TransportCredentialOnly" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WebHttpSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WebHttpSecurityMode.Transport">
      <topicdata group="api" notopic="" />
      <apidata name="Transport" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WebHttpSecurityMode.TransportCredentialOnly">
      <topicdata group="api" notopic="" />
      <apidata name="TransportCredentialOnly" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel.Web" module="System.ServiceModel.Web" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WebHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WorkflowServiceHost">
      <topicdata group="api" />
      <apidata name="WorkflowServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.#ctor">
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
        </element>
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.OnClosing" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.WorkflowServiceHost">
      <topicdata name="WorkflowServiceHost" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WorkflowServiceHost" />
      <apidata name="WorkflowServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Abort" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.BeginClose">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.BeginOpen">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        </element>
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.Close">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.Fault" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.OnOpening" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.Open">
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open" />
          <element api="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)" />
        </element>
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable" />
        <element api="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints" />
        <element api="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration" />
        <element api="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)" />
        <element api="M:System.ServiceModel.ServiceHostBase.InitializeRuntime" />
        <element api="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnAbort" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnClosed" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)" />
        <element api="M:System.ServiceModel.ServiceHostBase.OnOpened" />
        <element api="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters" />
        <element api="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose" />
        <element api="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint">
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
          <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        </element>
        <element api="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.OnClosing" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WorkflowServiceHost">
      <topicdata name="WorkflowServiceHost" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WorkflowServiceHost" />
      <apidata name="WorkflowServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.State" />
        <element api="P:System.ServiceModel.Channels.CommunicationObject.ThisLock" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authentication" />
        <element api="P:System.ServiceModel.ServiceHostBase.Authorization" />
        <element api="P:System.ServiceModel.ServiceHostBase.BaseAddresses" />
        <element api="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers" />
        <element api="P:System.ServiceModel.ServiceHostBase.CloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Credentials" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout" />
        <element api="P:System.ServiceModel.ServiceHostBase.Description" />
        <element api="P:System.ServiceModel.ServiceHostBase.Extensions" />
        <element api="P:System.ServiceModel.ServiceHostBase.ImplementedContracts" />
        <element api="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit" />
        <element api="P:System.ServiceModel.ServiceHostBase.OpenTimeout" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" />
      </containers>
    </api>
    <api id="Events.T:System.ServiceModel.WorkflowServiceHost">
      <topicdata name="WorkflowServiceHost" group="list" subgroup="Events" typeTopicId="T:System.ServiceModel.WorkflowServiceHost" />
      <apidata name="WorkflowServiceHost" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closed" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Closing" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Faulted" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opened" />
        <element api="E:System.ServiceModel.Channels.CommunicationObject.Opening" />
        <element api="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WorkflowServiceHost.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint">
      <topicdata name="AddServiceEndpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
        <element api="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      </elements>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinition">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleDefinition">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinition">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="ruleDefinition">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="typeProvider">
          <type api="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinition">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinitionPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ruleDefinitionPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinitionPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="ruleDefinitionPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="typeProvider">
          <type api="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowDefinitionPath">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WorkflowServiceHost.#ctor" />
      <parameters>
        <parameter name="workflowType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="baseAddress" params="true">
          <arrayOf rank="1">
            <type api="T:System.Uri" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <topicdata group="api" />
      <apidata name="AddServiceEndpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="implementedContract">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="binding">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </parameter>
        <parameter name="address">
          <type api="T:System.Uri" ref="true" />
        </parameter>
        <parameter name="listenUri">
          <type api="T:System.Uri" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceEndpoint" ref="true" />
      </returns>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <topicdata group="api" />
      <apidata name="CreateDescription" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
          <type api="T:System.ServiceModel.ServiceHostBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="implementedContracts" out="true">
          <referenceTo>
            <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.ServiceModel.Description.ContractDescription" ref="true" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Description.ServiceDescription" ref="true" />
      </returns>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WorkflowServiceHost.OnClosing">
      <topicdata group="api" />
      <apidata name="OnClosing" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
          <type api="T:System.ServiceModel.Channels.CommunicationObject" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="System.WorkflowServices" module="System.WorkflowServices" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WorkflowServiceHost" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WS2007FederationHttpBinding">
      <topicdata group="api" />
      <apidata name="WS2007FederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor">
          <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)" />
          <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.GetTransport" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WS2007FederationHttpBinding">
      <topicdata name="WS2007FederationHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WS2007FederationHttpBinding" />
      <apidata name="WS2007FederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007FederationHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.GetTransport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WS2007FederationHttpBinding">
      <topicdata name="WS2007FederationHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WS2007FederationHttpBinding" />
      <apidata name="WS2007FederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)" />
        <element api="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007FederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007FederationHttpBinding.CreateMessageSecurity">
      <topicdata group="api" />
      <apidata name="CreateMessageSecurity" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSFederationHttpBinding.CreateMessageSecurity">
          <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.SecurityBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WS2007HttpBinding">
      <topicdata group="api" />
      <apidata name="WS2007HttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.#ctor">
          <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode)" />
          <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.WS2007HttpBinding.CreateMessageSecurity" />
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WS2007HttpBinding">
      <topicdata name="WS2007HttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WS2007HttpBinding" />
      <apidata name="WS2007HttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.WS2007HttpBinding.CreateMessageSecurity" />
        <element api="Overload:System.ServiceModel.WS2007HttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WS2007HttpBinding">
      <topicdata name="WS2007HttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WS2007HttpBinding" />
      <apidata name="WS2007HttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WS2007HttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode)" />
        <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007HttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WS2007HttpBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WS2007HttpBinding.CreateMessageSecurity">
      <topicdata group="api" />
      <apidata name="CreateMessageSecurity" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity">
          <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.SecurityBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSDualHttpBinding">
      <topicdata group="api" />
      <apidata name="WSDualHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.#ctor">
          <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)" />
        </element>
        <element api="M:System.ServiceModel.WSDualHttpBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ClientBaseAddress" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ProxyAddress" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.Scheme" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.TextEncoding" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSDualHttpBinding">
      <topicdata name="WSDualHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSDualHttpBinding" />
      <apidata name="WSDualHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSDualHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.WSDualHttpBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSDualHttpBinding">
      <topicdata name="WSDualHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSDualHttpBinding" />
      <apidata name="WSDualHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ClientBaseAddress" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.MessageEncoding" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ProxyAddress" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.ReliableSession" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.Scheme" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.TextEncoding" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.TransactionFlow" />
        <element api="P:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSDualHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSDualHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSDualHttpBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal">
      <topicdata group="api" />
      <apidata name="BypassProxyOnLocal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BypassProxyOnLocal" />
      <setter name="set_BypassProxyOnLocal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.ClientBaseAddress">
      <topicdata group="api" />
      <apidata name="ClientBaseAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientBaseAddress" />
      <setter name="set_ClientBaseAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.WSDualHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.ProxyAddress">
      <topicdata group="api" />
      <apidata name="ProxyAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProxyAddress" />
      <setter name="set_ProxyAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReliableSession" />
      <setter name="set_ReliableSession" />
      <returns>
        <type api="T:System.ServiceModel.ReliableSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.WSDualHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.TextEncoding">
      <topicdata group="api" />
      <apidata name="TextEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TextEncoding" />
      <setter name="set_TextEncoding" />
      <returns>
        <type api="T:System.Text.Encoding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.TransactionFlow">
      <topicdata group="api" />
      <apidata name="TransactionFlow" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionFlow" />
      <setter name="set_TransactionFlow" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy">
      <topicdata group="api" />
      <apidata name="UseDefaultWebProxy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseDefaultWebProxy" />
      <setter name="set_UseDefaultWebProxy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.WSDualHttpSecurity">
      <topicdata group="api" />
      <apidata name="WSDualHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.WSDualHttpSecurity.#ctor" />
        <element api="P:System.ServiceModel.WSDualHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSDualHttpSecurity.Mode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSDualHttpSecurity">
      <topicdata name="WSDualHttpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSDualHttpSecurity" />
      <apidata name="WSDualHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSDualHttpSecurity">
      <topicdata name="WSDualHttpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSDualHttpSecurity" />
      <apidata name="WSDualHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSDualHttpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.WSDualHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSDualHttpSecurity.Mode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSDualHttpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.MessageSecurityOverHttp" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSDualHttpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSDualHttpSecurityMode">
      <topicdata group="api" />
      <apidata name="WSDualHttpSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.WSDualHttpSecurityMode.None" />
        <element api="F:System.ServiceModel.WSDualHttpSecurityMode.Message" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSDualHttpSecurityMode.Message">
      <topicdata group="api" notopic="" />
      <apidata name="Message" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSDualHttpSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSDualHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSFederationHttpBinding">
      <topicdata group="api" />
      <apidata name="WSFederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.WS2007FederationHttpBinding" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor">
          <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)" />
          <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.GetTransport" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSFederationHttpBinding">
      <topicdata name="WSFederationHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSFederationHttpBinding" />
      <apidata name="WSFederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSFederationHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.GetTransport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSFederationHttpBinding">
      <topicdata name="WSFederationHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSFederationHttpBinding" />
      <apidata name="WSFederationHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion" />
        <element api="P:System.ServiceModel.WSFederationHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)" />
        <element api="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSFederationHttpBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.CreateMessageSecurity">
      <topicdata group="api" />
      <apidata name="CreateMessageSecurity" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.SecurityBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpBinding.GetTransport">
      <topicdata group="api" />
      <apidata name="GetTransport" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.GetTransport">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.TransportBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt">
      <topicdata group="api" />
      <apidata name="PrivacyNoticeAt" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PrivacyNoticeAt" />
      <setter name="set_PrivacyNoticeAt" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion">
      <topicdata group="api" />
      <apidata name="PrivacyNoticeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PrivacyNoticeVersion" />
      <setter name="set_PrivacyNoticeVersion" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSFederationHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSFederationHttpSecurity">
      <topicdata group="api" />
      <apidata name="WSFederationHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.WSFederationHttpSecurity.#ctor" />
        <element api="P:System.ServiceModel.WSFederationHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSFederationHttpSecurity.Mode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSFederationHttpSecurity">
      <topicdata name="WSFederationHttpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSFederationHttpSecurity" />
      <apidata name="WSFederationHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSFederationHttpSecurity">
      <topicdata name="WSFederationHttpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSFederationHttpSecurity" />
      <apidata name="WSFederationHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSFederationHttpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.WSFederationHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSFederationHttpSecurity.Mode" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSFederationHttpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSFederationHttpSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.FederatedMessageSecurityOverHttp" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSFederationHttpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSFederationHttpSecurityMode">
      <topicdata group="api" />
      <apidata name="WSFederationHttpSecurityMode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.WSFederationHttpSecurityMode.None" />
        <element api="F:System.ServiceModel.WSFederationHttpSecurityMode.Message" />
        <element api="F:System.ServiceModel.WSFederationHttpSecurityMode.TransportWithMessageCredential" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSFederationHttpSecurityMode.Message">
      <topicdata group="api" notopic="" />
      <apidata name="Message" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSFederationHttpSecurityMode.None">
      <topicdata group="api" notopic="" />
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSFederationHttpSecurityMode.TransportWithMessageCredential">
      <topicdata group="api" notopic="" />
      <apidata name="TransportWithMessageCredential" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSFederationHttpSecurityMode" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSHttpBinding">
      <topicdata group="api" />
      <apidata name="WSHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
          <type api="T:System.ServiceModel.WS2007HttpBinding" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSHttpBinding.#ctor">
          <element api="M:System.ServiceModel.WSHttpBinding.#ctor" />
          <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)" />
          <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSHttpBinding">
      <topicdata name="WSHttpBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSHttpBinding" />
      <apidata name="WSHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSHttpBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSHttpBinding">
      <topicdata name="WSHttpBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSHttpBinding" />
      <apidata name="WSHttpBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSHttpBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WSHttpBinding.#ctor" />
        <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)" />
        <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSHttpBinding.BuildChannelFactory">
      <topicdata name="BuildChannelFactory" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBinding.AllowCookies">
      <topicdata group="api" />
      <apidata name="AllowCookies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AllowCookies" />
      <setter name="set_AllowCookies" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <topicdata group="api" />
      <apidata name="BuildChannelFactory" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.WSHttpBinding.BuildChannelFactory" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TChannel" />
      </templates>
      <parameters>
        <parameter name="parameters">
          <type api="T:System.ServiceModel.Channels.BindingParameterCollection" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.ServiceModel.Channels.IChannelFactory`1" ref="true">
          <specialization>
            <template name="TChannel" index="0" api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity">
      <topicdata group="api" />
      <apidata name="CreateMessageSecurity" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.SecurityBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBinding.GetTransport">
      <topicdata group="api" />
      <apidata name="GetTransport" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBindingBase.GetTransport">
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.TransportBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBinding.Security">
      <topicdata group="api" />
      <apidata name="Security" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Security" />
      <setter name="set_Security" />
      <returns>
        <type api="T:System.ServiceModel.WSHttpSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSHttpBindingBase">
      <topicdata group="api" />
      <apidata name="WSHttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:System.ServiceModel.WSFederationHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.#ctor">
          <element api="M:System.ServiceModel.WSHttpBindingBase.#ctor" />
          <element api="M:System.ServiceModel.WSHttpBindingBase.#ctor(System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.GetTransport" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSHttpBindingBase">
      <topicdata name="WSHttpBindingBase" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSHttpBindingBase" />
      <apidata name="WSHttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.BuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpBindingBase.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.GetTransport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSHttpBindingBase">
      <topicdata name="WSHttpBindingBase" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSHttpBindingBase" />
      <apidata name="WSHttpBindingBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSHttpBindingBase.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WSHttpBindingBase.#ctor" />
        <element api="M:System.ServiceModel.WSHttpBindingBase.#ctor(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBindingBase.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.WSHttpBindingBase.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBindingBase.#ctor(System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" overload="Overload:System.ServiceModel.WSHttpBindingBase.#ctor" />
      <parameters>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal">
      <topicdata group="api" />
      <apidata name="BypassProxyOnLocal" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_BypassProxyOnLocal" />
      <setter name="set_BypassProxyOnLocal" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity">
      <topicdata group="api" />
      <apidata name="CreateMessageSecurity" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.ServiceModel.Channels.SecurityBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion">
      <topicdata group="api" />
      <apidata name="EnvelopeVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_EnvelopeVersion" />
      <returns>
        <type api="T:System.ServiceModel.EnvelopeVersion" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpBindingBase.GetTransport">
      <topicdata group="api" />
      <apidata name="GetTransport" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.ServiceModel.Channels.TransportBindingElement" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode">
      <topicdata group="api" />
      <apidata name="HostNameComparisonMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_HostNameComparisonMode" />
      <setter name="set_HostNameComparisonMode" />
      <returns>
        <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.HostNameComparisonMode" ref="false" />
            <enumValue>
              <field name="StrongWildcard" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize">
      <topicdata group="api" />
      <apidata name="MaxBufferPoolSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxBufferPoolSize" />
      <setter name="set_MaxBufferPoolSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>524288</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize">
      <topicdata group="api" />
      <apidata name="MaxReceivedMessageSize" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MaxReceivedMessageSize" />
      <setter name="set_MaxReceivedMessageSize" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Int64" ref="false" />
            <value>65536</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding">
      <topicdata group="api" />
      <apidata name="MessageEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_MessageEncoding" />
      <setter name="set_MessageEncoding" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress">
      <topicdata group="api" />
      <apidata name="ProxyAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ProxyAddress" />
      <setter name="set_ProxyAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
          <argument>
            <type api="T:System.Type" ref="true" />
            <typeValue>
              <type api="T:System.UriTypeConverter" ref="true" />
            </typeValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas">
      <topicdata group="api" />
      <apidata name="ReaderQuotas" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReaderQuotas" />
      <setter name="set_ReaderQuotas" />
      <returns>
        <type api="T:System.Xml.XmlDictionaryReaderQuotas" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.ReliableSession">
      <topicdata group="api" />
      <apidata name="ReliableSession" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReliableSession" />
      <setter name="set_ReliableSession" />
      <returns>
        <type api="T:System.ServiceModel.OptionalReliableSession" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.Scheme">
      <topicdata group="api" />
      <apidata name="Scheme" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:System.ServiceModel.Channels.Binding.Scheme">
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Scheme" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <topicdata group="api" eiiName="IBindingRuntimePreferences.ReceiveSynchronously" />
      <apidata name="ReceiveSynchronously" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" final="true" eii="true" />
      <propertydata get="true" />
      <getter name="get_System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
          <type api="T:System.ServiceModel.Channels.IBindingRuntimePreferences" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.TextEncoding">
      <topicdata group="api" />
      <apidata name="TextEncoding" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TextEncoding" />
      <setter name="set_TextEncoding" />
      <returns>
        <type api="T:System.Text.Encoding" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow">
      <topicdata group="api" />
      <apidata name="TransactionFlow" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TransactionFlow" />
      <setter name="set_TransactionFlow" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy">
      <topicdata group="api" />
      <apidata name="UseDefaultWebProxy" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UseDefaultWebProxy" />
      <setter name="set_UseDefaultWebProxy" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="T:System.ServiceModel.WSHttpContextBinding">
      <topicdata group="api" />
      <apidata name="WSHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
          <type api="T:System.ServiceModel.WSHttpBindingBase" ref="true" />
          <type api="T:System.ServiceModel.Channels.Binding" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.#ctor">
          <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor" />
          <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode)" />
          <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.String)" />
          <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
        </element>
        <element api="M:System.ServiceModel.WSHttpContextBinding.CreateBindingElements" />
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ContextProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSHttpContextBinding">
      <topicdata name="WSHttpContextBinding" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSHttpContextBinding" />
      <apidata name="WSHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.BuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.CanBuildChannelFactory">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.CanBuildChannelListener">
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)" />
        <element api="Overload:System.ServiceModel.WSHttpContextBinding.BuildChannelFactory">
          <element api="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
          <element api="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])" />
        </element>
        <element api="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity" />
        <element api="M:System.ServiceModel.WSHttpBinding.GetTransport" />
        <element api="M:System.ServiceModel.WSHttpContextBinding.CreateBindingElements" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSHttpContextBinding">
      <topicdata name="WSHttpContextBinding" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSHttpContextBinding" />
      <apidata name="WSHttpContextBinding" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.Channels.Binding.CloseTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.MessageVersion" />
        <element api="P:System.ServiceModel.Channels.Binding.Name" />
        <element api="P:System.ServiceModel.Channels.Binding.Namespace" />
        <element api="P:System.ServiceModel.Channels.Binding.OpenTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.ReceiveTimeout" />
        <element api="P:System.ServiceModel.Channels.Binding.SendTimeout" />
        <element api="P:System.ServiceModel.WSHttpBinding.AllowCookies" />
        <element api="P:System.ServiceModel.WSHttpBinding.Security" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.Scheme" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" />
        <element api="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ContextManagementEnabled" />
        <element api="P:System.ServiceModel.WSHttpContextBinding.ContextProtectionLevel" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.WSHttpContextBinding.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor" />
        <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode)" />
        <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.String)" />
        <element api="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpContextBinding.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <parameters>
        <parameter name="securityMode">
          <type api="T:System.ServiceModel.SecurityMode" ref="false" />
        </parameter>
        <parameter name="reliableSessionEnabled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.WSHttpContextBinding.#ctor" />
      <parameters>
        <parameter name="configName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress">
      <topicdata group="api" />
      <apidata name="ClientCallbackAddress" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ClientCallbackAddress" />
      <setter name="set_ClientCallbackAddress" />
      <returns>
        <type api="T:System.Uri" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpContextBinding.ContextManagementEnabled">
      <topicdata group="api" />
      <apidata name="ContextManagementEnabled" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContextManagementEnabled" />
      <setter name="set_ContextManagementEnabled" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.WSHttpContextBinding.ContextProtectionLevel">
      <topicdata group="api" />
      <apidata name="ContextProtectionLevel" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ContextProtectionLevel" />
      <setter name="set_ContextProtectionLevel" />
      <returns>
        <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.Net.Security.ProtectionLevel" ref="false" />
            <enumValue>
              <field name="Sign" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:System.ServiceModel.WSHttpContextBinding.CreateBindingElements">
      <topicdata group="api" />
      <apidata name="CreateBindingElements" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.WSHttpBinding.CreateBindingElements">
          <type api="T:System.ServiceModel.WSHttpBinding" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Channels.BindingElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpContextBinding" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSHttpSecurity">
      <topicdata group="api" />
      <apidata name="WSHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpSecurity.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.WSHttpSecurity.#ctor" />
        <element api="P:System.ServiceModel.WSHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.WSHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.WSHttpSecurity">
      <topicdata name="WSHttpSecurity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.WSHttpSecurity" />
      <apidata name="WSHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpSecurity.#ctor" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.WSHttpSecurity">
      <topicdata name="WSHttpSecurity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.WSHttpSecurity" />
      <apidata name="WSHttpSecurity" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.WSHttpSecurity.#ctor" />
      <elements>
        <element api="P:System.ServiceModel.WSHttpSecurity.Message" />
        <element api="P:System.ServiceModel.WSHttpSecurity.Mode" />
        <element api="P:System.ServiceModel.WSHttpSecurity.Transport" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.WSHttpSecurity.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpSecurity.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.ServiceModel.NonDualMessageSecurityOverHttp" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpSecurity.Mode">
      <topicdata group="api" />
      <apidata name="Mode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Mode" />
      <setter name="set_Mode" />
      <returns>
        <type api="T:System.ServiceModel.SecurityMode" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.WSHttpSecurity.Transport">
      <topicdata group="api" />
      <apidata name="Transport" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Transport" />
      <setter name="set_Transport" />
      <returns>
        <type api="T:System.ServiceModel.HttpTransportSecurity" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSHttpSecurity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.WSMessageEncoding">
      <topicdata group="api" />
      <apidata name="WSMessageEncoding" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:System.ServiceModel.WSMessageEncoding.Text" />
        <element api="F:System.ServiceModel.WSMessageEncoding.Mtom" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSMessageEncoding.Mtom">
      <topicdata group="api" notopic="" />
      <apidata name="Mtom" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </containers>
    </api>
    <api id="F:System.ServiceModel.WSMessageEncoding.Text">
      <topicdata group="api" notopic="" />
      <apidata name="Text" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.WSMessageEncoding" ref="false" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.X509CertificateEndpointIdentity">
      <topicdata group="api" />
      <apidata name="X509CertificateEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.EndpointIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.X509CertificateEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
        <element api="Overload:System.ServiceModel.X509CertificateEndpointIdentity.#ctor">
          <element api="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
          <element api="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
        </element>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
        <element api="P:System.ServiceModel.X509CertificateEndpointIdentity.Certificates" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
    </api>
    <api id="Methods.T:System.ServiceModel.X509CertificateEndpointIdentity">
      <topicdata name="X509CertificateEndpointIdentity" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.X509CertificateEndpointIdentity" />
      <apidata name="X509CertificateEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)" />
        <element api="M:System.ServiceModel.EndpointIdentity.GetHashCode" />
        <element api="Overload:System.ServiceModel.X509CertificateEndpointIdentity.Initialize">
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)" />
          <element api="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})" />
        </element>
        <element api="M:System.ServiceModel.EndpointIdentity.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.X509CertificateEndpointIdentity">
      <topicdata name="X509CertificateEndpointIdentity" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.X509CertificateEndpointIdentity" />
      <apidata name="X509CertificateEndpointIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />
        <element api="P:System.ServiceModel.X509CertificateEndpointIdentity.Certificates" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.X509CertificateEndpointIdentity.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <element api="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.X509CertificateEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="certificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.X509CertificateEndpointIdentity.#ctor" />
      <parameters>
        <parameter name="primaryCertificate">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2" ref="true" />
        </parameter>
        <parameter name="supportingCertificates">
          <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.X509CertificateEndpointIdentity.Certificates">
      <topicdata group="api" />
      <apidata name="Certificates" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Certificates" />
      <returns>
        <type api="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.X509CertificateEndpointIdentity" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.XmlSerializerFormatAttribute">
      <topicdata group="api" />
      <apidata name="XmlSerializerFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor" />
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.Style" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.SupportFaults" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.Use" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Class" />
              <field name="Method" />
              <field name="Interface" />
            </enumValue>
          </argument>
          <assignment name="Inherited">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
          <assignment name="AllowMultiple">
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </assignment>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.XmlSerializerFormatAttribute">
      <topicdata name="XmlSerializerFormatAttribute" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.XmlSerializerFormatAttribute" />
      <apidata name="XmlSerializerFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)" />
        <element api="M:System.Attribute.GetHashCode" />
        <element api="M:System.Attribute.IsDefaultAttribute" />
        <element api="M:System.Attribute.Match(System.Object)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
        <element api="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.XmlSerializerFormatAttribute">
      <topicdata name="XmlSerializerFormatAttribute" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.XmlSerializerFormatAttribute" />
      <apidata name="XmlSerializerFormatAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" defaultConstructor="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor" />
      <elements>
        <element api="P:System.Attribute.TypeId" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.Style" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.SupportFaults" />
        <element api="P:System.ServiceModel.XmlSerializerFormatAttribute.Use" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.XmlSerializerFormatAttribute.Style">
      <topicdata group="api" />
      <apidata name="Style" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Style" />
      <setter name="set_Style" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatStyle" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.XmlSerializerFormatAttribute.SupportFaults">
      <topicdata group="api" />
      <apidata name="SupportFaults" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SupportFaults" />
      <setter name="set_SupportFaults" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.XmlSerializerFormatAttribute.Use">
      <topicdata group="api" />
      <apidata name="Use" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Use" />
      <setter name="set_Use" />
      <returns>
        <type api="T:System.ServiceModel.OperationFormatUse" ref="false" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XmlSerializerFormatAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:System.ServiceModel.XPathMessageQuery">
      <topicdata group="api" />
      <apidata name="XPathMessageQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.XPathMessageQuery.#ctor" contentProperty="P:System.ServiceModel.XPathMessageQuery.Expression" />
      <family>
        <ancestors>
          <type api="T:System.ServiceModel.Dispatcher.MessageQuery" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="Overload:System.ServiceModel.XPathMessageQuery.#ctor">
          <element api="M:System.ServiceModel.XPathMessageQuery.#ctor" />
          <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String)" />
          <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.XmlNamespaceManager)" />
          <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.Xsl.XsltContext)" />
        </element>
        <element api="M:System.ServiceModel.XPathMessageQuery.CreateMessageQueryCollection" />
        <element api="Overload:System.ServiceModel.XPathMessageQuery.Evaluate">
          <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
        </element>
        <element api="P:System.ServiceModel.XPathMessageQuery.Expression" />
        <element api="P:System.ServiceModel.XPathMessageQuery.Namespaces" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Windows.Markup.ContentPropertyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Expression</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:System.ServiceModel.XPathMessageQuery">
      <topicdata name="XPathMessageQuery" group="list" subgroup="Methods" typeTopicId="T:System.ServiceModel.XPathMessageQuery" />
      <apidata name="XPathMessageQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.XPathMessageQuery.#ctor" contentProperty="P:System.ServiceModel.XPathMessageQuery.Expression" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="M:System.ServiceModel.XPathMessageQuery.CreateMessageQueryCollection" />
        <element api="Overload:System.ServiceModel.XPathMessageQuery.Evaluate">
          <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
          <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
        </element>
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" />
      </containers>
    </api>
    <api id="Properties.T:System.ServiceModel.XPathMessageQuery">
      <topicdata name="XPathMessageQuery" group="list" subgroup="Properties" typeTopicId="T:System.ServiceModel.XPathMessageQuery" />
      <apidata name="XPathMessageQuery" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:System.ServiceModel.XPathMessageQuery.#ctor" contentProperty="P:System.ServiceModel.XPathMessageQuery.Expression" />
      <elements>
        <element api="P:System.ServiceModel.XPathMessageQuery.Expression" />
        <element api="P:System.ServiceModel.XPathMessageQuery.Namespaces" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.XPathMessageQuery.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:System.ServiceModel.XPathMessageQuery.#ctor" />
        <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String)" />
        <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.XmlNamespaceManager)" />
        <element api="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.Xsl.XsltContext)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="Overload:System.ServiceModel.XPathMessageQuery.Evaluate">
      <topicdata name="Evaluate" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Evaluate" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
        <element api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      </elements>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.XPathMessageQuery.#ctor" />
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.XPathMessageQuery.#ctor" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.XmlNamespaceManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.XPathMessageQuery.#ctor" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="namespaces">
          <type api="T:System.Xml.XmlNamespaceManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.Xsl.XsltContext)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:System.ServiceModel.XPathMessageQuery.#ctor" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Xml.Xsl.XsltContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.CreateMessageQueryCollection">
      <topicdata group="api" />
      <apidata name="CreateMessageQueryCollection" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection">
          <type api="T:System.ServiceModel.Dispatcher.MessageQuery" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.ServiceModel.Dispatcher.MessageQueryCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)">
      <topicdata group="api" />
      <apidata name="Evaluate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.XPathMessageQuery.Evaluate" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)">
          <type api="T:System.ServiceModel.Dispatcher.MessageQuery" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="message">
          <type api="T:System.ServiceModel.Channels.Message" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <topicdata group="api" />
      <apidata name="Evaluate" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:System.ServiceModel.XPathMessageQuery.Evaluate" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
          <type api="T:System.ServiceModel.Dispatcher.MessageQuery" ref="true" />
        </member>
      </overrides>
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="buffer">
          <type api="T:System.ServiceModel.Channels.MessageBuffer" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
    </api>
    <api id="P:System.ServiceModel.XPathMessageQuery.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Expression" />
      <setter name="set_Expression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="P:System.ServiceModel.XPathMessageQuery.Namespaces">
      <topicdata group="api" />
      <apidata name="Namespaces" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Namespaces" />
      <setter name="set_Namespaces" />
      <returns>
        <type api="T:System.Xml.XmlNamespaceManager" ref="true" />
      </returns>
      <containers>
        <library assembly="System.ServiceModel" module="System.ServiceModel" kind="DynamicallyLinkedLibrary">
          <assemblydata version="4.8.3761.0" />
        </library>
        <namespace api="N:System.ServiceModel" />
        <type api="T:System.ServiceModel.XPathMessageQuery" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <nullValue />
          </argument>
        </attribute>
      </attributes>
    </api>
  </apis>
</reflection>