<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Microsoft.VisualC.STLCLR">
      <assemblydata version="2.0.0.0" culture="" key="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.VisualC.STLCLR</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>STLCLR cross assembly library</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTrademarkAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>STLCLR</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Microsoft.VisualC.StlClr">
      <topicdata group="api" />
      <apidata name="Microsoft.VisualC.StlClr" group="namespace" />
      <elements>
        <element api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        <element api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
        <element api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
        <element api="T:Microsoft.VisualC.StlClr.UnaryDelegate`2" />
        <element api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" />
        <element api="T:Microsoft.VisualC.StlClr.IList`1" />
        <element api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
        <element api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
        <element api="T:Microsoft.VisualC.StlClr.IQueue`2" />
        <element api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
        <element api="T:Microsoft.VisualC.StlClr.IStack`2" />
        <element api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
        <element api="T:Microsoft.VisualC.StlClr.IVector`1" />
        <element api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
        <element api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
        <element api="T:Microsoft.VisualC.StlClr.IHash`2" />
        <element api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
        <element api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
        <element api="T:Microsoft.VisualC.StlClr.ITree`2" />
        <element api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
        <element api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      </elements>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.BinaryDelegate`3">
      <topicdata group="api" />
      <apidata name="BinaryDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TArg1" />
        <template name="TArg2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="A_0">
          <template name="TArg1" index="0" api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" />
        </parameter>
        <parameter name="A_1">
          <template name="TArg2" index="1" api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="2" api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <topicdata group="api" />
      <apidata name="DequeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <topicdata name="DequeEnumerator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
      <apidata name="DequeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <topicdata name="DequeEnumerator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
      <apidata name="DequeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IEnumerator`1.Current">
          <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
          <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
          <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <topicdata group="api" />
      <apidata name="DequeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <topicdata name="DequeEnumeratorBase" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
      <apidata name="DequeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <topicdata name="DequeEnumeratorBase" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
      <apidata name="DequeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.IEnumerator.Current">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.GenericPair`2">
      <topicdata group="api" />
      <apidata name="GenericPair" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue1" />
        <template name="TValue2" />
      </templates>
      <elements>
        <element api="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />
        <element api="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />
        <element api="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
          <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
          <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)" />
          <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
          <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)" />
          <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.GenericPair`2">
      <topicdata name="GenericPair" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      <apidata name="GenericPair" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <templates>
        <template name="TValue1" />
        <template name="TValue2" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      </containers>
    </api>
    <api id="Operators.T:Microsoft.VisualC.StlClr.GenericPair`2">
      <topicdata name="GenericPair" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      <apidata name="GenericPair" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <templates>
        <template name="TValue1" />
        <template name="TValue2" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      </containers>
    </api>
    <api id="Fields.T:Microsoft.VisualC.StlClr.GenericPair`2">
      <topicdata name="GenericPair" group="list" subgroup="Fields" typeTopicId="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      <apidata name="GenericPair" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" defaultConstructor="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <templates>
        <template name="TValue1" />
        <template name="TValue2" />
      </templates>
      <elements>
        <element api="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />
        <element api="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
            <specialization>
              <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
              <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <parameters>
        <parameter name="_Right">
          <referenceTo>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
                <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <parameters>
        <parameter name="_Val1">
          <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Microsoft.VisualC.StlClr.GenericPair`2.#ctor" />
      <parameters>
        <parameter name="_Val1">
          <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
        </parameter>
        <parameter name="_Val2">
          <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="_Right_arg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="F:Microsoft.VisualC.StlClr.GenericPair`2.first">
      <topicdata group="api" />
      <apidata name="first" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="Assign" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
            <specialization>
              <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
              <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
          <specialization>
            <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
            <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
          </specialization>
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="F:Microsoft.VisualC.StlClr.GenericPair`2.second">
      <topicdata group="api" />
      <apidata name="second" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
            <specialization>
              <template name="TValue1" index="0" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
              <template name="TValue2" index="1" api="T:Microsoft.VisualC.StlClr.GenericPair`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <topicdata group="api" />
      <apidata name="HashEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})" />
        <element api="Overload:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <topicdata name="HashEnumerator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
      <apidata name="HashEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <topicdata name="HashEnumerator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
      <apidata name="HashEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IEnumerator`1.Current">
          <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
          <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
          <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <topicdata group="api" />
      <apidata name="HashEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Microsoft.VisualC.StlClr.HashEnumerator`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <topicdata name="HashEnumeratorBase" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
      <apidata name="HashEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <topicdata name="HashEnumeratorBase" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
      <apidata name="HashEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.IEnumerator.Current">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IDeque`1">
      <topicdata group="api" />
      <apidata name="IDeque" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
          </specialization>
        </type>
        <type api="T:System.ICloneable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.front" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.front_item" />
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IDeque`1">
      <topicdata name="IDeque" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IDeque`1" />
      <apidata name="IDeque" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.front" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IDeque`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IDeque`1">
      <topicdata name="IDeque" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IDeque`1" />
      <apidata name="IDeque" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.front_item" />
        <element api="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign">
      <topicdata name="assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="assign" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IDeque`1.erase">
      <topicdata name="erase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="erase" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert">
      <topicdata name="insert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="insert" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IDeque`1.resize">
      <topicdata name="resize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="resize" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
      <topicdata group="api" />
      <apidata name="at" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.back">
      <topicdata group="api" />
      <apidata name="back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
      <topicdata group="api" />
      <apidata name="back_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_back_item" />
      <setter name="set_back_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="begin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
      <topicdata group="api" />
      <apidata name="begin_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
      <topicdata group="api" />
      <apidata name="clear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="end" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
      <topicdata group="api" />
      <apidata name="end_bias" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_First_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.front">
      <topicdata group="api" />
      <apidata name="front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
      <topicdata group="api" />
      <apidata name="front_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_front_item" />
      <setter name="set_front_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation">
      <topicdata group="api" />
      <apidata name="get_generation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.UInt32" ref="false">
          <optionalModifier>
            <type api="T:System.Runtime.CompilerServices.IsLong" ref="true" />
          </optionalModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Item" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
      <topicdata group="api" />
      <apidata name="pop_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
      <topicdata group="api" />
      <apidata name="pop_front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
      <topicdata group="api" />
      <apidata name="push_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
      <topicdata group="api" />
      <apidata name="push_front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rbegin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IDeque`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IDeque`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IDeque`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IHash`2">
      <topicdata group="api" />
      <apidata name="IHash" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
          </specialization>
        </type>
        <type api="T:System.ICloneable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.erase">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.insert">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.key_comp" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.load_factor" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.value_comp" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IHash`2">
      <topicdata name="IHash" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IHash`2" />
      <apidata name="IHash" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.erase">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.insert">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.key_comp" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.load_factor" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
          <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.value_comp" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IHash`2">
      <topicdata name="IHash" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IHash`2" />
      <apidata name="IHash" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IHash`2.erase">
      <topicdata name="erase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="erase" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IHash`2.insert">
      <topicdata name="insert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="insert" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <topicdata name="max_load_factor" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="max_load_factor" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
        <element api="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="begin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count">
      <topicdata group="api" />
      <apidata name="bucket_count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.clear">
      <topicdata group="api" />
      <apidata name="clear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)">
      <topicdata group="api" />
      <apidata name="count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="end" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <topicdata group="api" />
      <apidata name="equal_range" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
              <specialization>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
                  </specialization>
                </type>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_First_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate">
      <topicdata group="api" />
      <apidata name="hash_delegate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.UnaryDelegate`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
              <specialization>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
                  </specialization>
                </type>
                <type api="T:System.Boolean" ref="false" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.key_comp">
      <topicdata group="api" />
      <apidata name="key_comp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.load_factor">
      <topicdata group="api" />
      <apidata name="load_factor" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="lower_bound" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <topicdata group="api" />
      <apidata name="max_load_factor" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Single" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)">
      <topicdata group="api" />
      <apidata name="max_load_factor" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IHash`2.max_load_factor" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newmax">
          <type api="T:System.Single" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="rbegin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)">
      <topicdata group="api" />
      <apidata name="rehash" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Buckets">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="rend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="upper_bound" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.IHash`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IHash`2.value_comp">
      <topicdata group="api" />
      <apidata name="value_comp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.IHash`2" />
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IHash`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IList`1">
      <topicdata group="api" />
      <apidata name="IList" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
          </specialization>
        </type>
        <type api="T:System.ICloneable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.front" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.splice">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IList`1">
      <topicdata name="IList" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IList`1" />
      <apidata name="IList" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.front" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="Overload:Microsoft.VisualC.StlClr.IList`1.splice">
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IList`1">
      <topicdata name="IList" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IList`1" />
      <apidata name="IList" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IList`1.assign">
      <topicdata name="assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="assign" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IList`1.erase">
      <topicdata name="erase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="erase" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IList`1.insert">
      <topicdata name="insert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="insert" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IList`1.resize">
      <topicdata name="resize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="resize" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IList`1.splice">
      <topicdata name="splice" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="splice" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.back">
      <topicdata group="api" />
      <apidata name="back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IList`1.back_item">
      <topicdata group="api" />
      <apidata name="back_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_back_item" />
      <setter name="set_back_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="begin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.clear">
      <topicdata group="api" />
      <apidata name="clear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="end" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_First_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.front">
      <topicdata group="api" />
      <apidata name="front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IList`1.front_item">
      <topicdata group="api" />
      <apidata name="front_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_front_item" />
      <setter name="set_front_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <topicdata group="api" />
      <apidata name="merge" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Pred">
          <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.pop_back">
      <topicdata group="api" />
      <apidata name="pop_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.pop_front">
      <topicdata group="api" />
      <apidata name="pop_front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)">
      <topicdata group="api" />
      <apidata name="push_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)">
      <topicdata group="api" />
      <apidata name="push_front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rbegin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)">
      <topicdata group="api" />
      <apidata name="remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})">
      <topicdata group="api" />
      <apidata name="remove_if" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Pred">
          <type api="T:Microsoft.VisualC.StlClr.UnaryDelegate`2" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.reverse">
      <topicdata group="api" />
      <apidata name="reverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <topicdata group="api" />
      <apidata name="sort" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Pred">
          <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})">
      <topicdata group="api" />
      <apidata name="splice" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.splice" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="splice" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.splice" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="splice" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IList`1.splice" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <topicdata group="api" />
      <apidata name="unique" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Pred">
          <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IList`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <topicdata group="api" />
      <apidata name="IPriorityQueue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <topicdata name="IPriorityQueue" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      <apidata name="IPriorityQueue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top" />
        <element api="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <topicdata name="IPriorityQueue" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      <apidata name="IPriorityQueue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
              <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container">
      <topicdata group="api" />
      <apidata name="get_container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop">
      <topicdata group="api" />
      <apidata name="pop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)">
      <topicdata group="api" />
      <apidata name="push" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top">
      <topicdata group="api" />
      <apidata name="top" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item">
      <topicdata group="api" />
      <apidata name="top_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_top_item" />
      <setter name="set_top_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp">
      <topicdata group="api" />
      <apidata name="value_comp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" />
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IPriorityQueue`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IQueue`2">
      <topicdata group="api" />
      <apidata name="IQueue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.back" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.front" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.size" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IQueue`2">
      <topicdata name="IQueue" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IQueue`2" />
      <apidata name="IQueue" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.back" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.front" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IQueue`2.size" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
              <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.back">
      <topicdata group="api" />
      <apidata name="back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.front">
      <topicdata group="api" />
      <apidata name="front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.get_container">
      <topicdata group="api" />
      <apidata name="get_container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.pop">
      <topicdata group="api" />
      <apidata name="pop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)">
      <topicdata group="api" />
      <apidata name="push" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IQueue`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IQueue`2.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IQueue`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IStack`2">
      <topicdata group="api" />
      <apidata name="IStack" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.top" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:Microsoft.VisualC.StlClr.IStack`2.top_item" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IStack`2">
      <topicdata name="IStack" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IStack`2" />
      <apidata name="IStack" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.get_container" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.pop" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.IStack`2.top" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IStack`2">
      <topicdata name="IStack" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IStack`2" />
      <apidata name="IStack" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
        <template name="TCont" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.IStack`2.top_item" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IStack`2" />
              <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IStack`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.get_container">
      <topicdata group="api" />
      <apidata name="get_container" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <template name="TCont" index="1" api="T:Microsoft.VisualC.StlClr.IStack`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.pop">
      <topicdata group="api" />
      <apidata name="pop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)">
      <topicdata group="api" />
      <apidata name="push" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IStack`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IStack`2.top">
      <topicdata group="api" />
      <apidata name="top" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IStack`2" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IStack`2.top_item">
      <topicdata group="api" />
      <apidata name="top_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_top_item" />
      <setter name="set_top_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IStack`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IStack`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.ITree`2">
      <topicdata group="api" />
      <apidata name="ITree" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
          </specialization>
        </type>
        <type api="T:System.ICloneable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.clear" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.ITree`2.erase">
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.ITree`2.insert">
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.key_comp" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.value_comp" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.ITree`2">
      <topicdata name="ITree" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.ITree`2" />
      <apidata name="ITree" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.clear" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.empty" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.ITree`2.erase">
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="Overload:Microsoft.VisualC.StlClr.ITree`2.insert">
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
          <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.key_comp" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.size" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.value_comp" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.ITree`2">
      <topicdata name="ITree" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.ITree`2" />
      <apidata name="ITree" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.ITree`2.erase">
      <topicdata name="erase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="erase" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.ITree`2.insert">
      <topicdata name="insert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="insert" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})" />
        <element api="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="begin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.clear">
      <topicdata group="api" />
      <apidata name="clear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)">
      <topicdata group="api" />
      <apidata name="count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="end" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <topicdata group="api" />
      <apidata name="equal_range" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
              <specialization>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
                  </specialization>
                </type>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_First_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.GenericPair`2" ref="true">
              <specialization>
                <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
                  <specialization>
                    <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
                  </specialization>
                </type>
                <type api="T:System.Boolean" ref="false" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ITree`2.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.key_comp">
      <topicdata group="api" />
      <apidata name="key_comp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="lower_bound" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="rbegin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <topicdata group="api" />
      <apidata name="rend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <topicdata group="api" />
      <apidata name="upper_bound" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Keyval">
          <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.ITree`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ITree`2.value_comp">
      <topicdata group="api" />
      <apidata name="value_comp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Microsoft.VisualC.StlClr.BinaryDelegate`3" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.ITree`2" />
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ITree`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.IVector`1">
      <topicdata group="api" />
      <apidata name="IVector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
          </specialization>
        </type>
        <type api="T:System.ICloneable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.capacity" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.front" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.front_item" />
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.IVector`1">
      <topicdata name="IVector" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.IVector`1" />
      <apidata name="IVector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsParallel" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.ParallelQuery" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.ParallelEnumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.assign">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.back" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.capacity" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.clear" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.empty" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.erase">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.front" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.get_generation" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.insert">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.pop_back" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.IVector`1.resize">
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)" />
          <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.size" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})" />
        <element api="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <element api="M:System.Collections.IEnumerable.GetEnumerator" />
        <element api="M:System.ICloneable.Clone" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.IVector`1">
      <topicdata name="IVector" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.IVector`1" />
      <apidata name="IVector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.back_item" />
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.front_item" />
        <element api="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)" />
        <element api="P:System.Collections.ICollection.Count" />
        <element api="P:System.Collections.ICollection.IsSynchronized" />
        <element api="P:System.Collections.ICollection.SyncRoot" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IVector`1.assign">
      <topicdata name="assign" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="assign" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IVector`1.erase">
      <topicdata name="erase" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="erase" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IVector`1.insert">
      <topicdata name="insert" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="insert" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.IVector`1.resize">
      <topicdata name="resize" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="resize" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="assign" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.assign" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)">
      <topicdata group="api" />
      <apidata name="at" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.back">
      <topicdata group="api" />
      <apidata name="back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IVector`1.back_item">
      <topicdata group="api" />
      <apidata name="back_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_back_item" />
      <setter name="set_back_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="begin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.capacity">
      <topicdata group="api" />
      <apidata name="capacity" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.clear">
      <topicdata group="api" />
      <apidata name="clear" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.empty">
      <topicdata group="api" />
      <apidata name="empty" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="end" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <topicdata group="api" />
      <apidata name="erase" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.erase" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_First_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Last_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.front">
      <topicdata group="api" />
      <apidata name="front" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <referenceTo>
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </referenceTo>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IVector`1.front_item">
      <topicdata group="api" />
      <apidata name="front_item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_front_item" />
      <setter name="set_front_item" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.get_generation">
      <topicdata group="api" />
      <apidata name="get_generation" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.UInt32" ref="false">
          <optionalModifier>
            <type api="T:System.Runtime.CompilerServices.IsLong" ref="true" />
          </optionalModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_Last">
          <type api="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where_iter">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Right">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="insert" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.insert" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Where">
          <type api="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
            <requiredModifier>
              <type api="T:System.Runtime.CompilerServices.IsByValue" ref="true" />
            </requiredModifier>
          </type>
        </parameter>
        <parameter name="_Count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Item" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="_Pos">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.pop_back">
      <topicdata group="api" />
      <apidata name="pop_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)">
      <topicdata group="api" />
      <apidata name="push_back" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rbegin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <topicdata group="api" />
      <apidata name="rend" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="">
          <referenceTo>
            <type api="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" ref="true">
              <specialization>
                <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
              </specialization>
            </type>
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Void" ref="false">
          <requiredModifier>
            <type api="T:System.Runtime.CompilerServices.IsUdtReturn" ref="true" />
          </requiredModifier>
        </type>
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)">
      <topicdata group="api" />
      <apidata name="reserve" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Capacity">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)">
      <topicdata group="api" />
      <apidata name="resize" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.IVector`1.resize" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="_Newsize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="_Val">
          <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.size">
      <topicdata group="api" />
      <apidata name="size" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})">
      <topicdata group="api" />
      <apidata name="swap" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.IVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <topicdata group="api" />
      <apidata name="ListEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
        <element api="Overload:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <topicdata name="ListEnumerator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
      <apidata name="ListEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <topicdata name="ListEnumerator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
      <apidata name="ListEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IEnumerator`1.Current">
          <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
          <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
          <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <topicdata group="api" />
      <apidata name="ListEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Microsoft.VisualC.StlClr.ListEnumerator`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <topicdata name="ListEnumeratorBase" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
      <apidata name="ListEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <topicdata name="ListEnumeratorBase" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
      <apidata name="ListEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.IEnumerator.Current">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <topicdata group="api" />
      <apidata name="TreeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})" />
        <element api="Overload:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <topicdata name="TreeEnumerator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      <apidata name="TreeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <topicdata name="TreeEnumerator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      <apidata name="TreeEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IEnumerator`1.Current">
          <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
          <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
          <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />
            </specialization>
          </type>
        </member>
      </overrides>
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <topicdata group="api" />
      <apidata name="TreeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <topicdata name="TreeEnumeratorBase" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
      <apidata name="TreeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <topicdata name="TreeEnumeratorBase" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
      <apidata name="TreeEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_First">
          <type api="T:Microsoft.VisualC.StlClr.Generic.INode`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.IEnumerator.Current">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.UnaryDelegate`2">
      <topicdata group="api" />
      <apidata name="UnaryDelegate" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TArg" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="A_0">
          <template name="TArg" index="0" api="T:Microsoft.VisualC.StlClr.UnaryDelegate`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="T:Microsoft.VisualC.StlClr.UnaryDelegate`2" />
      </returns>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <topicdata group="api" />
      <apidata name="VectorEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)" />
        <element api="Overload:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <topicdata name="VectorEnumerator" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
      <apidata name="VectorEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="Overload:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
          <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose" />
          <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)" />
        </element>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <topicdata name="VectorEnumerator" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
      <apidata name="VectorEnumerator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
      </containers>
    </api>
    <api id="Overload:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IEnumerator`1.Current">
          <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose" />
      <proceduredata virtual="true" final="true" />
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="A_0">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
          <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
          <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />
            </specialization>
          </type>
        </member>
      </overrides>
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
      </containers>
    </api>
    <api id="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <topicdata group="api" />
      <apidata name="VectorEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </implements>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
        <element api="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
      </containers>
    </api>
    <api id="Methods.T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <topicdata name="VectorEnumeratorBase" group="list" subgroup="Methods" typeTopicId="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
      <apidata name="VectorEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext" />
        <element api="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
        <element api="M:System.Object.ToString" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
      </containers>
    </api>
    <api id="Properties.T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <topicdata name="VectorEnumeratorBase" group="list" subgroup="Properties" typeTopicId="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
      <apidata name="VectorEnumeratorBase" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current" />
      </elements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="_Cont">
          <type api="T:Microsoft.VisualC.StlClr.IVector`1" ref="true">
            <specialization>
              <template name="TValue" index="0" api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="_First">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current">
      <topicdata group="api" />
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Current" />
      <setter name="set_Current" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="P:System.Collections.IEnumerator.Current">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
      <topicdata group="api" />
      <apidata name="MoveNext" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerator.MoveNext">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true" />
      </containers>
    </api>
    <api id="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
      <topicdata group="api" />
      <apidata name="Reset" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <implements>
        <member api="M:System.Collections.IEnumerator.Reset">
          <type api="T:System.Collections.IEnumerator" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Microsoft.VisualC.STLCLR" module="Microsoft.VisualC.STLCLR" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.0.0.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.VisualC.StlClr" />
        <type api="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>